{
    "types": [
        {
            "id": 0,
            "type": {
                "path": [
                    "sp_core",
                    "crypto",
                    "AccountId32"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 1,
            "type": {
                "def": {
                    "array": {
                        "len": 32,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 2,
            "type": {
                "def": {
                    "primitive": "u8"
                }
            }
        },
        {
            "id": 3,
            "type": {
                "path": [
                    "frame_system",
                    "AccountInfo"
                ],
                "params": [
                    {
                        "name": "Nonce",
                        "type": 4
                    },
                    {
                        "name": "AccountData",
                        "type": 5
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "nonce",
                                "type": 4,
                                "typeName": "Nonce"
                            },
                            {
                                "name": "consumers",
                                "type": 4,
                                "typeName": "RefCount"
                            },
                            {
                                "name": "providers",
                                "type": 4,
                                "typeName": "RefCount"
                            },
                            {
                                "name": "sufficients",
                                "type": 4,
                                "typeName": "RefCount"
                            },
                            {
                                "name": "data",
                                "type": 5,
                                "typeName": "AccountData"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 4,
            "type": {
                "def": {
                    "primitive": "u32"
                }
            }
        },
        {
            "id": 5,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "AccountData"
                ],
                "params": [
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "free",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "reserved",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "frozen",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "flags",
                                "type": 7,
                                "typeName": "ExtraFlags"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 6,
            "type": {
                "def": {
                    "primitive": "u64"
                }
            }
        },
        {
            "id": 7,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "ExtraFlags"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 8,
                                "typeName": "u128"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 8,
            "type": {
                "def": {
                    "primitive": "u128"
                }
            }
        },
        {
            "id": 9,
            "type": {
                "def": {
                    "primitive": "bool"
                }
            }
        },
        {
            "id": 10,
            "type": {
                "path": [
                    "frame_support",
                    "dispatch",
                    "PerDispatchClass"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 11
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "normal",
                                "type": 11,
                                "typeName": "T"
                            },
                            {
                                "name": "operational",
                                "type": 11,
                                "typeName": "T"
                            },
                            {
                                "name": "mandatory",
                                "type": 11,
                                "typeName": "T"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 11,
            "type": {
                "path": [
                    "sp_weights",
                    "weight_v2",
                    "Weight"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "ref_time",
                                "type": 12,
                                "typeName": "u64"
                            },
                            {
                                "name": "proof_size",
                                "type": 12,
                                "typeName": "u64"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 12,
            "type": {
                "def": {
                    "compact": {
                        "type": 6
                    }
                }
            }
        },
        {
            "id": 13,
            "type": {
                "path": [
                    "primitive_types",
                    "H256"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 14,
            "type": {
                "def": {
                    "sequence": {
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 15,
            "type": {
                "path": [
                    "sp_runtime",
                    "generic",
                    "digest",
                    "Digest"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "logs",
                                "type": 16,
                                "typeName": "Vec<DigestItem>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 16,
            "type": {
                "def": {
                    "sequence": {
                        "type": 17
                    }
                }
            }
        },
        {
            "id": 17,
            "type": {
                "path": [
                    "sp_runtime",
                    "generic",
                    "digest",
                    "DigestItem"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "PreRuntime",
                                "fields": [
                                    {
                                        "type": 18,
                                        "typeName": "ConsensusEngineId"
                                    },
                                    {
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 6
                            },
                            {
                                "name": "Consensus",
                                "fields": [
                                    {
                                        "type": 18,
                                        "typeName": "ConsensusEngineId"
                                    },
                                    {
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 4
                            },
                            {
                                "name": "Seal",
                                "fields": [
                                    {
                                        "type": 18,
                                        "typeName": "ConsensusEngineId"
                                    },
                                    {
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 5
                            },
                            {
                                "name": "Other",
                                "fields": [
                                    {
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "RuntimeEnvironmentUpdated",
                                "index": 8
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 18,
            "type": {
                "def": {
                    "array": {
                        "len": 4,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 19,
            "type": {
                "def": {
                    "sequence": {
                        "type": 20
                    }
                }
            }
        },
        {
            "id": 20,
            "type": {
                "path": [
                    "frame_system",
                    "EventRecord"
                ],
                "params": [
                    {
                        "name": "E",
                        "type": 21
                    },
                    {
                        "name": "T",
                        "type": 13
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "phase",
                                "type": 63,
                                "typeName": "Phase"
                            },
                            {
                                "name": "event",
                                "type": 21,
                                "typeName": "E"
                            },
                            {
                                "name": "topics",
                                "type": 64,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 21,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "RuntimeEvent"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "System",
                                "fields": [
                                    {
                                        "type": 22,
                                        "typeName": "frame_system::Event<Runtime>"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Grandpa",
                                "fields": [
                                    {
                                        "type": 31,
                                        "typeName": "pallet_grandpa::Event"
                                    }
                                ],
                                "index": 4
                            },
                            {
                                "name": "Balances",
                                "fields": [
                                    {
                                        "type": 35,
                                        "typeName": "pallet_balances::Event<Runtime>"
                                    }
                                ],
                                "index": 5
                            },
                            {
                                "name": "TransactionPayment",
                                "fields": [
                                    {
                                        "type": 37,
                                        "typeName": "pallet_transaction_payment::Event<Runtime>"
                                    }
                                ],
                                "index": 6
                            },
                            {
                                "name": "SubtensorModule",
                                "fields": [
                                    {
                                        "type": 38,
                                        "typeName": "pallet_subtensor::Event<Runtime>"
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "Triumvirate",
                                "fields": [
                                    {
                                        "type": 45,
                                        "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>"
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "TriumvirateMembers",
                                "fields": [
                                    {
                                        "type": 46,
                                        "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>"
                                    }
                                ],
                                "index": 9
                            },
                            {
                                "name": "SenateMembers",
                                "fields": [
                                    {
                                        "type": 47,
                                        "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>"
                                    }
                                ],
                                "index": 10
                            },
                            {
                                "name": "Utility",
                                "fields": [
                                    {
                                        "type": 48,
                                        "typeName": "pallet_utility::Event"
                                    }
                                ],
                                "index": 11
                            },
                            {
                                "name": "Sudo",
                                "fields": [
                                    {
                                        "type": 49,
                                        "typeName": "pallet_sudo::Event<Runtime>"
                                    }
                                ],
                                "index": 12
                            },
                            {
                                "name": "Multisig",
                                "fields": [
                                    {
                                        "type": 50,
                                        "typeName": "pallet_multisig::Event<Runtime>"
                                    }
                                ],
                                "index": 13
                            },
                            {
                                "name": "Preimage",
                                "fields": [
                                    {
                                        "type": 52,
                                        "typeName": "pallet_preimage::Event<Runtime>"
                                    }
                                ],
                                "index": 14
                            },
                            {
                                "name": "Scheduler",
                                "fields": [
                                    {
                                        "type": 53,
                                        "typeName": "pallet_scheduler::Event<Runtime>"
                                    }
                                ],
                                "index": 15
                            },
                            {
                                "name": "Proxy",
                                "fields": [
                                    {
                                        "type": 56,
                                        "typeName": "pallet_proxy::Event<Runtime>"
                                    }
                                ],
                                "index": 16
                            },
                            {
                                "name": "Registry",
                                "fields": [
                                    {
                                        "type": 58,
                                        "typeName": "pallet_registry::Event<Runtime>"
                                    }
                                ],
                                "index": 17
                            },
                            {
                                "name": "Commitments",
                                "fields": [
                                    {
                                        "type": 59,
                                        "typeName": "pallet_commitments::Event<Runtime>"
                                    }
                                ],
                                "index": 18
                            },
                            {
                                "name": "AdminUtils",
                                "fields": [
                                    {
                                        "type": 60,
                                        "typeName": "pallet_admin_utils::Event<Runtime>"
                                    }
                                ],
                                "index": 19
                            },
                            {
                                "name": "SafeMode",
                                "fields": [
                                    {
                                        "type": 61,
                                        "typeName": "pallet_safe_mode::Event<Runtime>"
                                    }
                                ],
                                "index": 20
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 22,
            "type": {
                "path": [
                    "frame_system",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "ExtrinsicSuccess",
                                "fields": [
                                    {
                                        "name": "dispatch_info",
                                        "type": 23,
                                        "typeName": "DispatchInfo"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "An extrinsic completed successfully."
                                ]
                            },
                            {
                                "name": "ExtrinsicFailed",
                                "fields": [
                                    {
                                        "name": "dispatch_error",
                                        "type": 26,
                                        "typeName": "DispatchError"
                                    },
                                    {
                                        "name": "dispatch_info",
                                        "type": 23,
                                        "typeName": "DispatchInfo"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "An extrinsic failed."
                                ]
                            },
                            {
                                "name": "CodeUpdated",
                                "index": 2,
                                "docs": [
                                    "`:code` was updated."
                                ]
                            },
                            {
                                "name": "NewAccount",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "A new account was created."
                                ]
                            },
                            {
                                "name": "KilledAccount",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "An account was reaped."
                                ]
                            },
                            {
                                "name": "Remarked",
                                "fields": [
                                    {
                                        "name": "sender",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "On on-chain remark happened."
                                ]
                            },
                            {
                                "name": "UpgradeAuthorized",
                                "fields": [
                                    {
                                        "name": "code_hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    },
                                    {
                                        "name": "check_version",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "An upgrade was authorized."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Event for the System pallet."
                ]
            }
        },
        {
            "id": 23,
            "type": {
                "path": [
                    "frame_support",
                    "dispatch",
                    "DispatchInfo"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "weight",
                                "type": 11,
                                "typeName": "Weight"
                            },
                            {
                                "name": "class",
                                "type": 24,
                                "typeName": "DispatchClass"
                            },
                            {
                                "name": "pays_fee",
                                "type": 25,
                                "typeName": "Pays"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 24,
            "type": {
                "path": [
                    "frame_support",
                    "dispatch",
                    "DispatchClass"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Normal",
                                "index": 0
                            },
                            {
                                "name": "Operational",
                                "index": 1
                            },
                            {
                                "name": "Mandatory",
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 25,
            "type": {
                "path": [
                    "frame_support",
                    "dispatch",
                    "Pays"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Yes",
                                "index": 0
                            },
                            {
                                "name": "No",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 26,
            "type": {
                "path": [
                    "sp_runtime",
                    "DispatchError"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Other",
                                "index": 0
                            },
                            {
                                "name": "CannotLookup",
                                "index": 1
                            },
                            {
                                "name": "BadOrigin",
                                "index": 2
                            },
                            {
                                "name": "Module",
                                "fields": [
                                    {
                                        "type": 27,
                                        "typeName": "ModuleError"
                                    }
                                ],
                                "index": 3
                            },
                            {
                                "name": "ConsumerRemaining",
                                "index": 4
                            },
                            {
                                "name": "NoProviders",
                                "index": 5
                            },
                            {
                                "name": "TooManyConsumers",
                                "index": 6
                            },
                            {
                                "name": "Token",
                                "fields": [
                                    {
                                        "type": 28,
                                        "typeName": "TokenError"
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "Arithmetic",
                                "fields": [
                                    {
                                        "type": 29,
                                        "typeName": "ArithmeticError"
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "Transactional",
                                "fields": [
                                    {
                                        "type": 30,
                                        "typeName": "TransactionalError"
                                    }
                                ],
                                "index": 9
                            },
                            {
                                "name": "Exhausted",
                                "index": 10
                            },
                            {
                                "name": "Corruption",
                                "index": 11
                            },
                            {
                                "name": "Unavailable",
                                "index": 12
                            },
                            {
                                "name": "RootNotAllowed",
                                "index": 13
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 27,
            "type": {
                "path": [
                    "sp_runtime",
                    "ModuleError"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "index",
                                "type": 2,
                                "typeName": "u8"
                            },
                            {
                                "name": "error",
                                "type": 18,
                                "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 28,
            "type": {
                "path": [
                    "sp_runtime",
                    "TokenError"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "FundsUnavailable",
                                "index": 0
                            },
                            {
                                "name": "OnlyProvider",
                                "index": 1
                            },
                            {
                                "name": "BelowMinimum",
                                "index": 2
                            },
                            {
                                "name": "CannotCreate",
                                "index": 3
                            },
                            {
                                "name": "UnknownAsset",
                                "index": 4
                            },
                            {
                                "name": "Frozen",
                                "index": 5
                            },
                            {
                                "name": "Unsupported",
                                "index": 6
                            },
                            {
                                "name": "CannotCreateHold",
                                "index": 7
                            },
                            {
                                "name": "NotExpendable",
                                "index": 8
                            },
                            {
                                "name": "Blocked",
                                "index": 9
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 29,
            "type": {
                "path": [
                    "sp_arithmetic",
                    "ArithmeticError"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Underflow",
                                "index": 0
                            },
                            {
                                "name": "Overflow",
                                "index": 1
                            },
                            {
                                "name": "DivisionByZero",
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 30,
            "type": {
                "path": [
                    "sp_runtime",
                    "TransactionalError"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "LimitReached",
                                "index": 0
                            },
                            {
                                "name": "NoLayer",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 31,
            "type": {
                "path": [
                    "pallet_grandpa",
                    "pallet",
                    "Event"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "NewAuthorities",
                                "fields": [
                                    {
                                        "name": "authority_set",
                                        "type": 32,
                                        "typeName": "AuthorityList"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "New authority set has been applied."
                                ]
                            },
                            {
                                "name": "Paused",
                                "index": 1,
                                "docs": [
                                    "Current authority set has been paused."
                                ]
                            },
                            {
                                "name": "Resumed",
                                "index": 2,
                                "docs": [
                                    "Current authority set has been resumed."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 32,
            "type": {
                "def": {
                    "sequence": {
                        "type": 33
                    }
                }
            }
        },
        {
            "id": 33,
            "type": {
                "def": {
                    "tuple": [
                        34,
                        6
                    ]
                }
            }
        },
        {
            "id": 34,
            "type": {
                "path": [
                    "sp_consensus_grandpa",
                    "app",
                    "Public"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "ed25519::Public"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 35,
            "type": {
                "path": [
                    "pallet_balances",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Endowed",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "free_balance",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "An account was created with some free balance."
                                ]
                            },
                            {
                                "name": "DustLost",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                                    "resulting in an outright loss."
                                ]
                            },
                            {
                                "name": "Transfer",
                                "fields": [
                                    {
                                        "name": "from",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "to",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Transfer succeeded."
                                ]
                            },
                            {
                                "name": "BalanceSet",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "free",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "A balance was set by root."
                                ]
                            },
                            {
                                "name": "Reserved",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Some balance was reserved (moved from free to reserved)."
                                ]
                            },
                            {
                                "name": "Unreserved",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Some balance was unreserved (moved from reserved to free)."
                                ]
                            },
                            {
                                "name": "ReserveRepatriated",
                                "fields": [
                                    {
                                        "name": "from",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "to",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    },
                                    {
                                        "name": "destination_status",
                                        "type": 36,
                                        "typeName": "Status"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "Some balance was moved from the reserve of the first account to the second account.",
                                    "Final argument indicates the destination balance type."
                                ]
                            },
                            {
                                "name": "Deposit",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "Some amount was deposited (e.g. for transaction fees)."
                                ]
                            },
                            {
                                "name": "Withdraw",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "Some amount was withdrawn from the account (e.g. for transaction fees)."
                                ]
                            },
                            {
                                "name": "Slashed",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 9,
                                "docs": [
                                    "Some amount was removed from the account (e.g. for misbehavior)."
                                ]
                            },
                            {
                                "name": "Minted",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 10,
                                "docs": [
                                    "Some amount was minted into an account."
                                ]
                            },
                            {
                                "name": "Burned",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 11,
                                "docs": [
                                    "Some amount was burned from an account."
                                ]
                            },
                            {
                                "name": "Suspended",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 12,
                                "docs": [
                                    "Some amount was suspended from an account (it can be restored later)."
                                ]
                            },
                            {
                                "name": "Restored",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 13,
                                "docs": [
                                    "Some amount was restored into an account."
                                ]
                            },
                            {
                                "name": "Upgraded",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 14,
                                "docs": [
                                    "An account was upgraded."
                                ]
                            },
                            {
                                "name": "Issued",
                                "fields": [
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 15,
                                "docs": [
                                    "Total issuance was increased by `amount`, creating a credit to be balanced."
                                ]
                            },
                            {
                                "name": "Rescinded",
                                "fields": [
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 16,
                                "docs": [
                                    "Total issuance was decreased by `amount`, creating a debt to be balanced."
                                ]
                            },
                            {
                                "name": "Locked",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 17,
                                "docs": [
                                    "Some balance was locked."
                                ]
                            },
                            {
                                "name": "Unlocked",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 18,
                                "docs": [
                                    "Some balance was unlocked."
                                ]
                            },
                            {
                                "name": "Frozen",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 19,
                                "docs": [
                                    "Some balance was frozen."
                                ]
                            },
                            {
                                "name": "Thawed",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 20,
                                "docs": [
                                    "Some balance was thawed."
                                ]
                            },
                            {
                                "name": "TotalIssuanceForced",
                                "fields": [
                                    {
                                        "name": "old",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    },
                                    {
                                        "name": "new",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 21,
                                "docs": [
                                    "The `TotalIssuance` was forcefully changed."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 36,
            "type": {
                "path": [
                    "frame_support",
                    "traits",
                    "tokens",
                    "misc",
                    "BalanceStatus"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Free",
                                "index": 0
                            },
                            {
                                "name": "Reserved",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 37,
            "type": {
                "path": [
                    "pallet_transaction_payment",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "TransactionFeePaid",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "actual_fee",
                                        "type": 6,
                                        "typeName": "BalanceOf<T>"
                                    },
                                    {
                                        "name": "tip",
                                        "type": 6,
                                        "typeName": "BalanceOf<T>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                                    "has been paid by `who`."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 38,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "NetworkAdded",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "a new network is added."
                                ]
                            },
                            {
                                "name": "NetworkRemoved",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "a network is removed."
                                ]
                            },
                            {
                                "name": "StakeAdded",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "stake has been transferred from the a coldkey account onto the hotkey staking account."
                                ]
                            },
                            {
                                "name": "StakeRemoved",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "stake has been removed from the hotkey staking account onto the coldkey account."
                                ]
                            },
                            {
                                "name": "WeightsSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "a caller successfully sets their weights on a subnetwork."
                                ]
                            },
                            {
                                "name": "NeuronRegistered",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "a new neuron account has been registered to the chain."
                                ]
                            },
                            {
                                "name": "BulkNeuronsRegistered",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "multiple uids have been concurrently registered."
                                ]
                            },
                            {
                                "name": "BulkBalancesSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "FIXME: Not used yet"
                                ]
                            },
                            {
                                "name": "MaxAllowedUidsSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "max allowed uids has been set for a subnetwork."
                                ]
                            },
                            {
                                "name": "MaxWeightLimitSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 9,
                                "docs": [
                                    "the max weight limit has been set for a subnetwork."
                                ]
                            },
                            {
                                "name": "DifficultySet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 10,
                                "docs": [
                                    "the difficulty has been set for a subnet."
                                ]
                            },
                            {
                                "name": "AdjustmentIntervalSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 11,
                                "docs": [
                                    "the adjustment interval is set for a subnet."
                                ]
                            },
                            {
                                "name": "RegistrationPerIntervalSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 12,
                                "docs": [
                                    "registration per interval is set for a subnet."
                                ]
                            },
                            {
                                "name": "MaxRegistrationsPerBlockSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 13,
                                "docs": [
                                    "we set max registrations per block."
                                ]
                            },
                            {
                                "name": "ActivityCutoffSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 14,
                                "docs": [
                                    "an activity cutoff is set for a subnet."
                                ]
                            },
                            {
                                "name": "RhoSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 15,
                                "docs": [
                                    "Rho value is set."
                                ]
                            },
                            {
                                "name": "KappaSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 16,
                                "docs": [
                                    "Kappa is set for a subnet."
                                ]
                            },
                            {
                                "name": "MinAllowedWeightSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 17,
                                "docs": [
                                    "minimum allowed weight is set for a subnet."
                                ]
                            },
                            {
                                "name": "ValidatorPruneLenSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 18,
                                "docs": [
                                    "the validator pruning length has been set."
                                ]
                            },
                            {
                                "name": "ScalingLawPowerSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 19,
                                "docs": [
                                    "the scaling law power has been set for a subnet."
                                ]
                            },
                            {
                                "name": "WeightsSetRateLimitSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 20,
                                "docs": [
                                    "weights set rate limit has been set for a subnet."
                                ]
                            },
                            {
                                "name": "ImmunityPeriodSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 21,
                                "docs": [
                                    "immunity period is set for a subnet."
                                ]
                            },
                            {
                                "name": "BondsMovingAverageSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 22,
                                "docs": [
                                    "bonds moving average is set for a subnet."
                                ]
                            },
                            {
                                "name": "MaxAllowedValidatorsSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 23,
                                "docs": [
                                    "setting the max number of allowed validators on a subnet."
                                ]
                            },
                            {
                                "name": "AxonServed",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 24,
                                "docs": [
                                    "the axon server information is added to the network."
                                ]
                            },
                            {
                                "name": "PrometheusServed",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 25,
                                "docs": [
                                    "the prometheus server information is added to the network."
                                ]
                            },
                            {
                                "name": "EmissionValuesSet",
                                "index": 26,
                                "docs": [
                                    "emission ratios for all networks is set."
                                ]
                            },
                            {
                                "name": "DelegateAdded",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 27,
                                "docs": [
                                    "a hotkey has become a delegate."
                                ]
                            },
                            {
                                "name": "DefaultTakeSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 28,
                                "docs": [
                                    "the default take is set."
                                ]
                            },
                            {
                                "name": "WeightsVersionKeySet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 29,
                                "docs": [
                                    "weights version key is set for a network."
                                ]
                            },
                            {
                                "name": "MinDifficultySet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 30,
                                "docs": [
                                    "setting min difficulty on a network."
                                ]
                            },
                            {
                                "name": "MaxDifficultySet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 31,
                                "docs": [
                                    "setting max difficulty on a network."
                                ]
                            },
                            {
                                "name": "ServingRateLimitSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 32,
                                "docs": [
                                    "setting the prometheus serving rate limit."
                                ]
                            },
                            {
                                "name": "BurnSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 33,
                                "docs": [
                                    "setting burn on a network."
                                ]
                            },
                            {
                                "name": "MaxBurnSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 34,
                                "docs": [
                                    "setting max burn on a network."
                                ]
                            },
                            {
                                "name": "MinBurnSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 35,
                                "docs": [
                                    "setting min burn on a network."
                                ]
                            },
                            {
                                "name": "TxRateLimitSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 36,
                                "docs": [
                                    "setting the transaction rate limit."
                                ]
                            },
                            {
                                "name": "TxDelegateTakeRateLimitSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 37,
                                "docs": [
                                    "setting the delegate take transaction rate limit."
                                ]
                            },
                            {
                                "name": "TxChildKeyTakeRateLimitSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 38,
                                "docs": [
                                    "setting the childkey take transaction rate limit."
                                ]
                            },
                            {
                                "name": "MinChildKeyTakeSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 39,
                                "docs": [
                                    "minimum childkey take set"
                                ]
                            },
                            {
                                "name": "MaxChildKeyTakeSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 40,
                                "docs": [
                                    "maximum childkey take set"
                                ]
                            },
                            {
                                "name": "ChildKeyTakeSet",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 41,
                                "docs": [
                                    "childkey take set"
                                ]
                            },
                            {
                                "name": "Sudid",
                                "fields": [
                                    {
                                        "type": 40,
                                        "typeName": "DispatchResult"
                                    }
                                ],
                                "index": 42,
                                "docs": [
                                    "a sudo call is done."
                                ]
                            },
                            {
                                "name": "RegistrationAllowed",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 43,
                                "docs": [
                                    "registration is allowed/disallowed for a subnet."
                                ]
                            },
                            {
                                "name": "PowRegistrationAllowed",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 44,
                                "docs": [
                                    "POW registration is allowed/disallowed for a subnet."
                                ]
                            },
                            {
                                "name": "TempoSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 45,
                                "docs": [
                                    "setting tempo on a network"
                                ]
                            },
                            {
                                "name": "RAORecycledForRegistrationSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 46,
                                "docs": [
                                    "setting the RAO recycled for registration."
                                ]
                            },
                            {
                                "name": "WeightsMinStake",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 47,
                                "docs": [
                                    "min stake is set for validators to set weights."
                                ]
                            },
                            {
                                "name": "SenateRequiredStakePercentSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 48,
                                "docs": [
                                    "setting the minimum required stake amount for senate registration."
                                ]
                            },
                            {
                                "name": "AdjustmentAlphaSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 49,
                                "docs": [
                                    "setting the adjustment alpha on a subnet."
                                ]
                            },
                            {
                                "name": "Faucet",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 50,
                                "docs": [
                                    "the faucet it called on the test net."
                                ]
                            },
                            {
                                "name": "SubnetOwnerCutSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 51,
                                "docs": [
                                    "the subnet owner cut is set."
                                ]
                            },
                            {
                                "name": "NetworkRateLimitSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 52,
                                "docs": [
                                    "the network creation rate limit is set."
                                ]
                            },
                            {
                                "name": "NetworkImmunityPeriodSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 53,
                                "docs": [
                                    "the network immunity period is set."
                                ]
                            },
                            {
                                "name": "NetworkMinLockCostSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 54,
                                "docs": [
                                    "the network minimum locking cost is set."
                                ]
                            },
                            {
                                "name": "SubnetLimitSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 55,
                                "docs": [
                                    "the maximum number of subnets is set"
                                ]
                            },
                            {
                                "name": "NetworkLockCostReductionIntervalSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 56,
                                "docs": [
                                    "the lock cost reduction is set"
                                ]
                            },
                            {
                                "name": "TakeDecreased",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 57,
                                "docs": [
                                    "the take for a delegate is decreased."
                                ]
                            },
                            {
                                "name": "TakeIncreased",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 58,
                                "docs": [
                                    "the take for a delegate is increased."
                                ]
                            },
                            {
                                "name": "HotkeySwapped",
                                "fields": [
                                    {
                                        "name": "coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "the account ID of coldkey"
                                        ]
                                    },
                                    {
                                        "name": "old_hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "the account ID of old hotkey"
                                        ]
                                    },
                                    {
                                        "name": "new_hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "the account ID of new hotkey"
                                        ]
                                    }
                                ],
                                "index": 59,
                                "docs": [
                                    "the hotkey is swapped"
                                ]
                            },
                            {
                                "name": "MaxDelegateTakeSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 60,
                                "docs": [
                                    "maximum delegate take is set by sudo/admin transaction"
                                ]
                            },
                            {
                                "name": "MinDelegateTakeSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 61,
                                "docs": [
                                    "minimum delegate take is set by sudo/admin transaction"
                                ]
                            },
                            {
                                "name": "TargetStakesPerIntervalSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 62,
                                "docs": [
                                    "the target stakes per interval is set by sudo/admin transaction"
                                ]
                            },
                            {
                                "name": "SenateAdjusted",
                                "fields": [
                                    {
                                        "name": "old_member",
                                        "type": 42,
                                        "typeName": "Option<T::AccountId>",
                                        "docs": [
                                            "the account ID of the old senate member, if any"
                                        ]
                                    },
                                    {
                                        "name": "new_member",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "the account ID of the new senate member"
                                        ]
                                    }
                                ],
                                "index": 63,
                                "docs": [
                                    "a member of the senate is adjusted"
                                ]
                            },
                            {
                                "name": "ColdkeySwapped",
                                "fields": [
                                    {
                                        "name": "old_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "the account ID of old coldkey"
                                        ]
                                    },
                                    {
                                        "name": "new_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "the account ID of new coldkey"
                                        ]
                                    }
                                ],
                                "index": 64,
                                "docs": [
                                    "A coldkey has been swapped"
                                ]
                            },
                            {
                                "name": "AllBalanceUnstakedAndTransferredToNewColdkey",
                                "fields": [
                                    {
                                        "name": "current_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account ID of the current coldkey"
                                        ]
                                    },
                                    {
                                        "name": "new_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account ID of the new coldkey"
                                        ]
                                    },
                                    {
                                        "name": "total_balance",
                                        "type": 6,
                                        "typeName": "<<T as Config>::Currency as fungible::Inspect<<T as frame_system::\nConfig>::AccountId,>>::Balance",
                                        "docs": [
                                            "The total balance of the hotkey"
                                        ]
                                    }
                                ],
                                "index": 65,
                                "docs": [
                                    "All balance of a hotkey has been unstaked and transferred to a new coldkey"
                                ]
                            },
                            {
                                "name": "ColdkeySwapScheduled",
                                "fields": [
                                    {
                                        "name": "old_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account ID of the old coldkey"
                                        ]
                                    },
                                    {
                                        "name": "new_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account ID of the new coldkey"
                                        ]
                                    },
                                    {
                                        "name": "execution_block",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>",
                                        "docs": [
                                            "The arbitration block for the coldkey swap"
                                        ]
                                    }
                                ],
                                "index": 66,
                                "docs": [
                                    "A coldkey swap has been scheduled"
                                ]
                            },
                            {
                                "name": "ArbitrationPeriodExtended",
                                "fields": [
                                    {
                                        "name": "coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account ID of the coldkey"
                                        ]
                                    }
                                ],
                                "index": 67,
                                "docs": [
                                    "The arbitration period has been extended"
                                ]
                            },
                            {
                                "name": "SetChildren",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 43,
                                        "typeName": "Vec<(u64, T::AccountId)>"
                                    }
                                ],
                                "index": 68,
                                "docs": [
                                    "The children of a hotkey have been set"
                                ]
                            },
                            {
                                "name": "HotkeyEmissionTempoSet",
                                "fields": [
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 69,
                                "docs": [
                                    "The hotkey emission tempo has been set"
                                ]
                            },
                            {
                                "name": "NetworkMaxStakeSet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 70,
                                "docs": [
                                    "The network maximum stake has been set"
                                ]
                            },
                            {
                                "name": "ChainIdentitySet",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 71,
                                "docs": [
                                    "The identity of a coldkey has been set"
                                ]
                            },
                            {
                                "name": "SubnetIdentitySet",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 72,
                                "docs": [
                                    "The identity of a subnet has been set"
                                ]
                            },
                            {
                                "name": "SubnetIdentityRemoved",
                                "fields": [
                                    {
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 73,
                                "docs": [
                                    "The identity of a subnet has been removed"
                                ]
                            },
                            {
                                "name": "DissolveNetworkScheduled",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account ID schedule the dissolve network extrisnic"
                                        ]
                                    },
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16",
                                        "docs": [
                                            "network ID will be dissolved"
                                        ]
                                    },
                                    {
                                        "name": "execution_block",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>",
                                        "docs": [
                                            "extrinsic execution block number"
                                        ]
                                    }
                                ],
                                "index": 74,
                                "docs": [
                                    "A dissolve network extrinsic scheduled."
                                ]
                            },
                            {
                                "name": "ColdkeySwapScheduleDurationSet",
                                "fields": [
                                    {
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 75,
                                "docs": [
                                    "The duration of schedule coldkey swap has been set"
                                ]
                            },
                            {
                                "name": "DissolveNetworkScheduleDurationSet",
                                "fields": [
                                    {
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 76,
                                "docs": [
                                    "The duration of dissolve network has been set"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 39,
            "type": {
                "def": {
                    "primitive": "u16"
                }
            }
        },
        {
            "id": 40,
            "type": {
                "path": [
                    "Result"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 41
                    },
                    {
                        "name": "E",
                        "type": 26
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Ok",
                                "fields": [
                                    {
                                        "type": 41
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Err",
                                "fields": [
                                    {
                                        "type": 26
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 41,
            "type": {
                "def": {
                    "tuple": []
                }
            }
        },
        {
            "id": 42,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 0
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 0
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 43,
            "type": {
                "def": {
                    "sequence": {
                        "type": 44
                    }
                }
            }
        },
        {
            "id": 44,
            "type": {
                "def": {
                    "tuple": [
                        6,
                        0
                    ]
                }
            }
        },
        {
            "id": 45,
            "type": {
                "path": [
                    "pallet_collective",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Proposed",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account that proposed the motion."
                                        ]
                                    },
                                    {
                                        "name": "proposal_index",
                                        "type": 4,
                                        "typeName": "ProposalIndex",
                                        "docs": [
                                            "The index of the proposal."
                                        ]
                                    },
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash",
                                        "docs": [
                                            "The hash of the proposal."
                                        ]
                                    },
                                    {
                                        "name": "threshold",
                                        "type": 4,
                                        "typeName": "MemberCount",
                                        "docs": [
                                            "The threshold of member for the proposal."
                                        ]
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                                    "`MemberCount`)."
                                ]
                            },
                            {
                                "name": "Voted",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account that voted."
                                        ]
                                    },
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash",
                                        "docs": [
                                            "The hash of the proposal."
                                        ]
                                    },
                                    {
                                        "name": "voted",
                                        "type": 9,
                                        "typeName": "bool",
                                        "docs": [
                                            "Whether the account voted aye."
                                        ]
                                    },
                                    {
                                        "name": "yes",
                                        "type": 4,
                                        "typeName": "MemberCount",
                                        "docs": [
                                            "The number of yes votes."
                                        ]
                                    },
                                    {
                                        "name": "no",
                                        "type": 4,
                                        "typeName": "MemberCount",
                                        "docs": [
                                            "The number of no votes."
                                        ]
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "A motion (given hash) has been voted on by given account, leaving",
                                    "a tally (yes votes and no votes given respectively as `MemberCount`)."
                                ]
                            },
                            {
                                "name": "Approved",
                                "fields": [
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash",
                                        "docs": [
                                            "The hash of the proposal."
                                        ]
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "A motion was approved by the required threshold."
                                ]
                            },
                            {
                                "name": "Disapproved",
                                "fields": [
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash",
                                        "docs": [
                                            "The hash of the proposal."
                                        ]
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "A motion was not approved by the required threshold."
                                ]
                            },
                            {
                                "name": "Executed",
                                "fields": [
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash",
                                        "docs": [
                                            "The hash of the proposal."
                                        ]
                                    },
                                    {
                                        "name": "result",
                                        "type": 40,
                                        "typeName": "DispatchResult",
                                        "docs": [
                                            "The result of the execution."
                                        ]
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "A motion was executed; result will be `Ok` if it returned without error."
                                ]
                            },
                            {
                                "name": "MemberExecuted",
                                "fields": [
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash",
                                        "docs": [
                                            "The hash of the proposal."
                                        ]
                                    },
                                    {
                                        "name": "result",
                                        "type": 40,
                                        "typeName": "DispatchResult",
                                        "docs": [
                                            "The result of the execution."
                                        ]
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "A single member did some action; result will be `Ok` if it returned without error."
                                ]
                            },
                            {
                                "name": "Closed",
                                "fields": [
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash",
                                        "docs": [
                                            "The hash of the proposal."
                                        ]
                                    },
                                    {
                                        "name": "yes",
                                        "type": 4,
                                        "typeName": "MemberCount",
                                        "docs": [
                                            "Whether the proposal was approved."
                                        ]
                                    },
                                    {
                                        "name": "no",
                                        "type": 4,
                                        "typeName": "MemberCount",
                                        "docs": [
                                            "Whether the proposal was rejected."
                                        ]
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "A proposal was closed because its threshold was reached or after its duration was up."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 46,
            "type": {
                "path": [
                    "pallet_membership",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "MemberAdded",
                                "index": 0,
                                "docs": [
                                    "The given member was added; see the transaction for who."
                                ]
                            },
                            {
                                "name": "MemberRemoved",
                                "index": 1,
                                "docs": [
                                    "The given member was removed; see the transaction for who."
                                ]
                            },
                            {
                                "name": "MembersSwapped",
                                "index": 2,
                                "docs": [
                                    "Two members were swapped; see the transaction for who."
                                ]
                            },
                            {
                                "name": "MembersReset",
                                "index": 3,
                                "docs": [
                                    "The membership was reset; see the transaction for who the new set is."
                                ]
                            },
                            {
                                "name": "KeyChanged",
                                "index": 4,
                                "docs": [
                                    "One of the members' keys changed."
                                ]
                            },
                            {
                                "name": "Dummy",
                                "index": 5,
                                "docs": [
                                    "Phantom member, never used."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 47,
            "type": {
                "path": [
                    "pallet_membership",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "MemberAdded",
                                "index": 0,
                                "docs": [
                                    "The given member was added; see the transaction for who."
                                ]
                            },
                            {
                                "name": "MemberRemoved",
                                "index": 1,
                                "docs": [
                                    "The given member was removed; see the transaction for who."
                                ]
                            },
                            {
                                "name": "MembersSwapped",
                                "index": 2,
                                "docs": [
                                    "Two members were swapped; see the transaction for who."
                                ]
                            },
                            {
                                "name": "MembersReset",
                                "index": 3,
                                "docs": [
                                    "The membership was reset; see the transaction for who the new set is."
                                ]
                            },
                            {
                                "name": "KeyChanged",
                                "index": 4,
                                "docs": [
                                    "One of the members' keys changed."
                                ]
                            },
                            {
                                "name": "Dummy",
                                "index": 5,
                                "docs": [
                                    "Phantom member, never used."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 48,
            "type": {
                "path": [
                    "pallet_utility",
                    "pallet",
                    "Event"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "BatchInterrupted",
                                "fields": [
                                    {
                                        "name": "index",
                                        "type": 4,
                                        "typeName": "u32"
                                    },
                                    {
                                        "name": "error",
                                        "type": 26,
                                        "typeName": "DispatchError"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                                    "well as the error."
                                ]
                            },
                            {
                                "name": "BatchCompleted",
                                "index": 1,
                                "docs": [
                                    "Batch of dispatches completed fully with no error."
                                ]
                            },
                            {
                                "name": "BatchCompletedWithErrors",
                                "index": 2,
                                "docs": [
                                    "Batch of dispatches completed but has errors."
                                ]
                            },
                            {
                                "name": "ItemCompleted",
                                "index": 3,
                                "docs": [
                                    "A single item within a Batch of dispatches has completed with no error."
                                ]
                            },
                            {
                                "name": "ItemFailed",
                                "fields": [
                                    {
                                        "name": "error",
                                        "type": 26,
                                        "typeName": "DispatchError"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "A single item within a Batch of dispatches has completed with error."
                                ]
                            },
                            {
                                "name": "DispatchedAs",
                                "fields": [
                                    {
                                        "name": "result",
                                        "type": 40,
                                        "typeName": "DispatchResult"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "A call was dispatched."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 49,
            "type": {
                "path": [
                    "pallet_sudo",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Sudid",
                                "fields": [
                                    {
                                        "name": "sudo_result",
                                        "type": 40,
                                        "typeName": "DispatchResult",
                                        "docs": [
                                            "The result of the call made by the sudo user."
                                        ]
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "A sudo call just took place."
                                ]
                            },
                            {
                                "name": "KeyChanged",
                                "fields": [
                                    {
                                        "name": "old",
                                        "type": 42,
                                        "typeName": "Option<T::AccountId>",
                                        "docs": [
                                            "The old sudo key (if one was previously set)."
                                        ]
                                    },
                                    {
                                        "name": "new",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The new sudo key (if one was set)."
                                        ]
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "The sudo key has been updated."
                                ]
                            },
                            {
                                "name": "KeyRemoved",
                                "index": 2,
                                "docs": [
                                    "The key was permanently removed."
                                ]
                            },
                            {
                                "name": "SudoAsDone",
                                "fields": [
                                    {
                                        "name": "sudo_result",
                                        "type": 40,
                                        "typeName": "DispatchResult",
                                        "docs": [
                                            "The result of the call made by the sudo user."
                                        ]
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "A [sudo_as](Pallet::sudo_as) call just took place."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 50,
            "type": {
                "path": [
                    "pallet_multisig",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "NewMultisig",
                                "fields": [
                                    {
                                        "name": "approving",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "multisig",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 1,
                                        "typeName": "CallHash"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "A new multisig operation has begun."
                                ]
                            },
                            {
                                "name": "MultisigApproval",
                                "fields": [
                                    {
                                        "name": "approving",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "timepoint",
                                        "type": 51,
                                        "typeName": "Timepoint<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "multisig",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 1,
                                        "typeName": "CallHash"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "A multisig operation has been approved by someone."
                                ]
                            },
                            {
                                "name": "MultisigExecuted",
                                "fields": [
                                    {
                                        "name": "approving",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "timepoint",
                                        "type": 51,
                                        "typeName": "Timepoint<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "multisig",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 1,
                                        "typeName": "CallHash"
                                    },
                                    {
                                        "name": "result",
                                        "type": 40,
                                        "typeName": "DispatchResult"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "A multisig operation has been executed."
                                ]
                            },
                            {
                                "name": "MultisigCancelled",
                                "fields": [
                                    {
                                        "name": "cancelling",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "timepoint",
                                        "type": 51,
                                        "typeName": "Timepoint<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "multisig",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 1,
                                        "typeName": "CallHash"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "A multisig operation has been cancelled."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 51,
            "type": {
                "path": [
                    "pallet_multisig",
                    "Timepoint"
                ],
                "params": [
                    {
                        "name": "BlockNumber",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "height",
                                "type": 4,
                                "typeName": "BlockNumber"
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "u32"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 52,
            "type": {
                "path": [
                    "pallet_preimage",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Noted",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "A preimage has been noted."
                                ]
                            },
                            {
                                "name": "Requested",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "A preimage has been requested."
                                ]
                            },
                            {
                                "name": "Cleared",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "A preimage has ben cleared."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 53,
            "type": {
                "path": [
                    "pallet_scheduler",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Scheduled",
                                "fields": [
                                    {
                                        "name": "when",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "index",
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Scheduled some task."
                                ]
                            },
                            {
                                "name": "Canceled",
                                "fields": [
                                    {
                                        "name": "when",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "index",
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Canceled some task."
                                ]
                            },
                            {
                                "name": "Dispatched",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "id",
                                        "type": 55,
                                        "typeName": "Option<TaskName>"
                                    },
                                    {
                                        "name": "result",
                                        "type": 40,
                                        "typeName": "DispatchResult"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Dispatched some task."
                                ]
                            },
                            {
                                "name": "RetrySet",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "id",
                                        "type": 55,
                                        "typeName": "Option<TaskName>"
                                    },
                                    {
                                        "name": "period",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "retries",
                                        "type": 2,
                                        "typeName": "u8"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Set a retry configuration for some task."
                                ]
                            },
                            {
                                "name": "RetryCancelled",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "id",
                                        "type": 55,
                                        "typeName": "Option<TaskName>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Cancel a retry configuration for some task."
                                ]
                            },
                            {
                                "name": "CallUnavailable",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "id",
                                        "type": 55,
                                        "typeName": "Option<TaskName>"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "The call for the provided hash was not found so the task has been aborted."
                                ]
                            },
                            {
                                "name": "PeriodicFailed",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "id",
                                        "type": 55,
                                        "typeName": "Option<TaskName>"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "The given task was unable to be renewed since the agenda is full at that block."
                                ]
                            },
                            {
                                "name": "RetryFailed",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "id",
                                        "type": 55,
                                        "typeName": "Option<TaskName>"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "The given task was unable to be retried since the agenda is full at that block or there",
                                    "was not enough weight to reschedule it."
                                ]
                            },
                            {
                                "name": "PermanentlyOverweight",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "id",
                                        "type": 55,
                                        "typeName": "Option<TaskName>"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "The given task can never be executed since it is overweight."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Events type."
                ]
            }
        },
        {
            "id": 54,
            "type": {
                "def": {
                    "tuple": [
                        4,
                        4
                    ]
                }
            }
        },
        {
            "id": 55,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 1
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 56,
            "type": {
                "path": [
                    "pallet_proxy",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "ProxyExecuted",
                                "fields": [
                                    {
                                        "name": "result",
                                        "type": 40,
                                        "typeName": "DispatchResult"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "A proxy was executed correctly, with the given."
                                ]
                            },
                            {
                                "name": "PureCreated",
                                "fields": [
                                    {
                                        "name": "pure",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "proxy_type",
                                        "type": 57,
                                        "typeName": "T::ProxyType"
                                    },
                                    {
                                        "name": "disambiguation_index",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "A pure account has been created by new proxy with given",
                                    "disambiguation index and proxy type."
                                ]
                            },
                            {
                                "name": "Announced",
                                "fields": [
                                    {
                                        "name": "real",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "proxy",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 13,
                                        "typeName": "CallHashOf<T>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "An announcement was placed to make a call in the future."
                                ]
                            },
                            {
                                "name": "ProxyAdded",
                                "fields": [
                                    {
                                        "name": "delegator",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "delegatee",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "proxy_type",
                                        "type": 57,
                                        "typeName": "T::ProxyType"
                                    },
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "A proxy was added."
                                ]
                            },
                            {
                                "name": "ProxyRemoved",
                                "fields": [
                                    {
                                        "name": "delegator",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "delegatee",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "proxy_type",
                                        "type": 57,
                                        "typeName": "T::ProxyType"
                                    },
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "A proxy was removed."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 57,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "ProxyType"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Any",
                                "index": 0
                            },
                            {
                                "name": "Owner",
                                "index": 1
                            },
                            {
                                "name": "NonCritical",
                                "index": 2
                            },
                            {
                                "name": "NonTransfer",
                                "index": 3
                            },
                            {
                                "name": "Senate",
                                "index": 4
                            },
                            {
                                "name": "NonFungibile",
                                "index": 5
                            },
                            {
                                "name": "Triumvirate",
                                "index": 6
                            },
                            {
                                "name": "Governance",
                                "index": 7
                            },
                            {
                                "name": "Staking",
                                "index": 8
                            },
                            {
                                "name": "Registration",
                                "index": 9
                            },
                            {
                                "name": "Transfer",
                                "index": 10
                            },
                            {
                                "name": "SmallTransfer",
                                "index": 11
                            },
                            {
                                "name": "RootWeights",
                                "index": 12
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 58,
            "type": {
                "path": [
                    "pallet_registry",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "IdentitySet",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account that registered the identity"
                                        ]
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Emitted when a user registers an identity"
                                ]
                            },
                            {
                                "name": "IdentityDissolved",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account that dissolved the identity"
                                        ]
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Emitted when a user dissolves an identity"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 59,
            "type": {
                "path": [
                    "pallet_commitments",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Commitment",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16",
                                        "docs": [
                                            "The netuid of the commitment"
                                        ]
                                    },
                                    {
                                        "name": "who",
                                        "type": 0,
                                        "typeName": "T::AccountId",
                                        "docs": [
                                            "The account"
                                        ]
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "A commitment was set"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 60,
            "type": {
                "path": [
                    "pallet_admin_utils",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {}
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 61,
            "type": {
                "path": [
                    "pallet_safe_mode",
                    "pallet",
                    "Event"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Entered",
                                "fields": [
                                    {
                                        "name": "until",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "The safe-mode was entered until inclusively this block."
                                ]
                            },
                            {
                                "name": "Extended",
                                "fields": [
                                    {
                                        "name": "until",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "The safe-mode was extended until inclusively this block."
                                ]
                            },
                            {
                                "name": "Exited",
                                "fields": [
                                    {
                                        "name": "reason",
                                        "type": 62,
                                        "typeName": "ExitReason"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Exited the safe-mode for a specific reason."
                                ]
                            },
                            {
                                "name": "DepositPlaced",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "BalanceOf<T>"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "An account reserved funds for either entering or extending the safe-mode."
                                ]
                            },
                            {
                                "name": "DepositReleased",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "BalanceOf<T>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "An account had a reserve released that was reserved."
                                ]
                            },
                            {
                                "name": "DepositSlashed",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "BalanceOf<T>"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "An account had reserve slashed that was reserved."
                                ]
                            },
                            {
                                "name": "CannotDeposit",
                                "index": 6,
                                "docs": [
                                    "Could not hold funds for entering or extending the safe-mode.",
                                    "",
                                    "This error comes from the underlying `Currency`."
                                ]
                            },
                            {
                                "name": "CannotRelease",
                                "index": 7,
                                "docs": [
                                    "Could not release funds for entering or extending the safe-mode.",
                                    "",
                                    "This error comes from the underlying `Currency`."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Event` enum of this pallet"
                ]
            }
        },
        {
            "id": 62,
            "type": {
                "path": [
                    "pallet_safe_mode",
                    "pallet",
                    "ExitReason"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Timeout",
                                "index": 0
                            },
                            {
                                "name": "Force",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 63,
            "type": {
                "path": [
                    "frame_system",
                    "Phase"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "ApplyExtrinsic",
                                "fields": [
                                    {
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Finalization",
                                "index": 1
                            },
                            {
                                "name": "Initialization",
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 64,
            "type": {
                "def": {
                    "sequence": {
                        "type": 13
                    }
                }
            }
        },
        {
            "id": 65,
            "type": {
                "def": {
                    "sequence": {
                        "type": 54
                    }
                }
            }
        },
        {
            "id": 66,
            "type": {
                "path": [
                    "frame_system",
                    "LastRuntimeUpgradeInfo"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "spec_version",
                                "type": 67,
                                "typeName": "codec::Compact<u32>"
                            },
                            {
                                "name": "spec_name",
                                "type": 68,
                                "typeName": "sp_runtime::RuntimeString"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 67,
            "type": {
                "def": {
                    "compact": {
                        "type": 4
                    }
                }
            }
        },
        {
            "id": 68,
            "type": {
                "def": {
                    "primitive": "str"
                }
            }
        },
        {
            "id": 69,
            "type": {
                "path": [
                    "frame_system",
                    "CodeUpgradeAuthorization"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "code_hash",
                                "type": 13,
                                "typeName": "T::Hash"
                            },
                            {
                                "name": "check_version",
                                "type": 9,
                                "typeName": "bool"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 70,
            "type": {
                "path": [
                    "frame_system",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "remark",
                                "fields": [
                                    {
                                        "name": "remark",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Make some on-chain remark.",
                                    "",
                                    "Can be executed by every `origin`."
                                ]
                            },
                            {
                                "name": "set_heap_pages",
                                "fields": [
                                    {
                                        "name": "pages",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Set the number of pages in the WebAssembly environment's heap."
                                ]
                            },
                            {
                                "name": "set_code",
                                "fields": [
                                    {
                                        "name": "code",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Set the new runtime code."
                                ]
                            },
                            {
                                "name": "set_code_without_checks",
                                "fields": [
                                    {
                                        "name": "code",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Set the new runtime code without doing any checks of the given `code`.",
                                    "",
                                    "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                                    "version!"
                                ]
                            },
                            {
                                "name": "set_storage",
                                "fields": [
                                    {
                                        "name": "items",
                                        "type": 71,
                                        "typeName": "Vec<KeyValue>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Set some items of storage."
                                ]
                            },
                            {
                                "name": "kill_storage",
                                "fields": [
                                    {
                                        "name": "keys",
                                        "type": 73,
                                        "typeName": "Vec<Key>"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Kill some items from storage."
                                ]
                            },
                            {
                                "name": "kill_prefix",
                                "fields": [
                                    {
                                        "name": "prefix",
                                        "type": 14,
                                        "typeName": "Key"
                                    },
                                    {
                                        "name": "subkeys",
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "Kill all storage items with a key that starts with the given prefix.",
                                    "",
                                    "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                                    "the prefix we are removing to accurately calculate the weight of this function."
                                ]
                            },
                            {
                                "name": "remark_with_event",
                                "fields": [
                                    {
                                        "name": "remark",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "Make some on-chain remark and emit event."
                                ]
                            },
                            {
                                "name": "authorize_upgrade",
                                "fields": [
                                    {
                                        "name": "code_hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 9,
                                "docs": [
                                    "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                                    "later.",
                                    "",
                                    "This call requires Root origin."
                                ]
                            },
                            {
                                "name": "authorize_upgrade_without_checks",
                                "fields": [
                                    {
                                        "name": "code_hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 10,
                                "docs": [
                                    "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                                    "later.",
                                    "",
                                    "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                                    "example that the spec name remains the same and that the version number increases. Not",
                                    "recommended for normal use. Use `authorize_upgrade` instead.",
                                    "",
                                    "This call requires Root origin."
                                ]
                            },
                            {
                                "name": "apply_authorized_upgrade",
                                "fields": [
                                    {
                                        "name": "code",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 11,
                                "docs": [
                                    "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                                    "",
                                    "If the authorization required a version check, this call will ensure the spec name",
                                    "remains unchanged and that the spec version has increased.",
                                    "",
                                    "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                                    "the new `code` in the same block or attempt to schedule the upgrade.",
                                    "",
                                    "All origins are allowed."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 71,
            "type": {
                "def": {
                    "sequence": {
                        "type": 72
                    }
                }
            }
        },
        {
            "id": 72,
            "type": {
                "def": {
                    "tuple": [
                        14,
                        14
                    ]
                }
            }
        },
        {
            "id": 73,
            "type": {
                "def": {
                    "sequence": {
                        "type": 14
                    }
                }
            }
        },
        {
            "id": 74,
            "type": {
                "path": [
                    "frame_system",
                    "limits",
                    "BlockWeights"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "base_block",
                                "type": 11,
                                "typeName": "Weight"
                            },
                            {
                                "name": "max_block",
                                "type": 11,
                                "typeName": "Weight"
                            },
                            {
                                "name": "per_class",
                                "type": 75,
                                "typeName": "PerDispatchClass<WeightsPerClass>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 75,
            "type": {
                "path": [
                    "frame_support",
                    "dispatch",
                    "PerDispatchClass"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 76
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "normal",
                                "type": 76,
                                "typeName": "T"
                            },
                            {
                                "name": "operational",
                                "type": 76,
                                "typeName": "T"
                            },
                            {
                                "name": "mandatory",
                                "type": 76,
                                "typeName": "T"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 76,
            "type": {
                "path": [
                    "frame_system",
                    "limits",
                    "WeightsPerClass"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "base_extrinsic",
                                "type": 11,
                                "typeName": "Weight"
                            },
                            {
                                "name": "max_extrinsic",
                                "type": 77,
                                "typeName": "Option<Weight>"
                            },
                            {
                                "name": "max_total",
                                "type": 77,
                                "typeName": "Option<Weight>"
                            },
                            {
                                "name": "reserved",
                                "type": 77,
                                "typeName": "Option<Weight>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 77,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 11
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 11
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 78,
            "type": {
                "path": [
                    "frame_system",
                    "limits",
                    "BlockLength"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "max",
                                "type": 79,
                                "typeName": "PerDispatchClass<u32>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 79,
            "type": {
                "path": [
                    "frame_support",
                    "dispatch",
                    "PerDispatchClass"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "normal",
                                "type": 4,
                                "typeName": "T"
                            },
                            {
                                "name": "operational",
                                "type": 4,
                                "typeName": "T"
                            },
                            {
                                "name": "mandatory",
                                "type": 4,
                                "typeName": "T"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 80,
            "type": {
                "path": [
                    "sp_weights",
                    "RuntimeDbWeight"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "read",
                                "type": 6,
                                "typeName": "u64"
                            },
                            {
                                "name": "write",
                                "type": 6,
                                "typeName": "u64"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 81,
            "type": {
                "path": [
                    "sp_version",
                    "RuntimeVersion"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "spec_name",
                                "type": 68,
                                "typeName": "RuntimeString"
                            },
                            {
                                "name": "impl_name",
                                "type": 68,
                                "typeName": "RuntimeString"
                            },
                            {
                                "name": "authoring_version",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "spec_version",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "impl_version",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "apis",
                                "type": 82,
                                "typeName": "ApisVec"
                            },
                            {
                                "name": "transaction_version",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "state_version",
                                "type": 2,
                                "typeName": "u8"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 82,
            "type": {
                "path": [
                    "Cow"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 83
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 83
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 83,
            "type": {
                "def": {
                    "sequence": {
                        "type": 84
                    }
                }
            }
        },
        {
            "id": 84,
            "type": {
                "def": {
                    "tuple": [
                        85,
                        4
                    ]
                }
            }
        },
        {
            "id": 85,
            "type": {
                "def": {
                    "array": {
                        "len": 8,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 86,
            "type": {
                "path": [
                    "frame_system",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "InvalidSpecName",
                                "index": 0,
                                "docs": [
                                    "The name of specification does not match between the current runtime",
                                    "and the new runtime."
                                ]
                            },
                            {
                                "name": "SpecVersionNeedsToIncrease",
                                "index": 1,
                                "docs": [
                                    "The specification version is not allowed to decrease between the current runtime",
                                    "and the new runtime."
                                ]
                            },
                            {
                                "name": "FailedToExtractRuntimeVersion",
                                "index": 2,
                                "docs": [
                                    "Failed to extract the runtime version from the new runtime.",
                                    "",
                                    "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                                ]
                            },
                            {
                                "name": "NonDefaultComposite",
                                "index": 3,
                                "docs": [
                                    "Suicide called when the account has non-default composite data."
                                ]
                            },
                            {
                                "name": "NonZeroRefCount",
                                "index": 4,
                                "docs": [
                                    "There is a non-zero reference count preventing the account from being purged."
                                ]
                            },
                            {
                                "name": "CallFiltered",
                                "index": 5,
                                "docs": [
                                    "The origin filter prevent the call to be dispatched."
                                ]
                            },
                            {
                                "name": "MultiBlockMigrationsOngoing",
                                "index": 6,
                                "docs": [
                                    "A multi-block migration is ongoing and prevents the current code from being replaced."
                                ]
                            },
                            {
                                "name": "NothingAuthorized",
                                "index": 7,
                                "docs": [
                                    "No upgrade authorized."
                                ]
                            },
                            {
                                "name": "Unauthorized",
                                "index": 8,
                                "docs": [
                                    "The submitted code is not authorized."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Error for the System pallet"
                ]
            }
        },
        {
            "id": 87,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 13
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 64,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 88,
            "type": {
                "path": [
                    "pallet_timestamp",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "set",
                                "fields": [
                                    {
                                        "name": "now",
                                        "type": 12,
                                        "typeName": "T::Moment"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Set the current time.",
                                    "",
                                    "This call should be invoked exactly once per block. It will panic at the finalization",
                                    "phase, if this call hasn't been invoked by that time.",
                                    "",
                                    "The timestamp should be greater than the previous one by the amount specified by",
                                    "[`Config::MinimumPeriod`].",
                                    "",
                                    "The dispatch origin for this call must be _None_.",
                                    "",
                                    "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                                    "that changing the complexity of this call could result exhausting the resources in a",
                                    "block to execute any other calls.",
                                    "",
                                    "## Complexity",
                                    "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                                    "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                                    "  `on_finalize`)",
                                    "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 89,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 90
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 91,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 90,
            "type": {
                "path": [
                    "sp_consensus_aura",
                    "sr25519",
                    "app_sr25519",
                    "Public"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "sr25519::Public"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 91,
            "type": {
                "def": {
                    "sequence": {
                        "type": 90
                    }
                }
            }
        },
        {
            "id": 92,
            "type": {
                "path": [
                    "sp_consensus_slots",
                    "Slot"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 6,
                                "typeName": "u64"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 93,
            "type": {
                "path": [
                    "pallet_grandpa",
                    "StoredState"
                ],
                "params": [
                    {
                        "name": "N",
                        "type": 4
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Live",
                                "index": 0
                            },
                            {
                                "name": "PendingPause",
                                "fields": [
                                    {
                                        "name": "scheduled_at",
                                        "type": 4,
                                        "typeName": "N"
                                    },
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "N"
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "Paused",
                                "index": 2
                            },
                            {
                                "name": "PendingResume",
                                "fields": [
                                    {
                                        "name": "scheduled_at",
                                        "type": 4,
                                        "typeName": "N"
                                    },
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "N"
                                    }
                                ],
                                "index": 3
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 94,
            "type": {
                "path": [
                    "pallet_grandpa",
                    "StoredPendingChange"
                ],
                "params": [
                    {
                        "name": "N",
                        "type": 4
                    },
                    {
                        "name": "Limit",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "scheduled_at",
                                "type": 4,
                                "typeName": "N"
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "N"
                            },
                            {
                                "name": "next_authorities",
                                "type": 95,
                                "typeName": "BoundedAuthorityList<Limit>"
                            },
                            {
                                "name": "forced",
                                "type": 96,
                                "typeName": "Option<N>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 95,
            "type": {
                "path": [
                    "bounded_collections",
                    "weak_bounded_vec",
                    "WeakBoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 33
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 32,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 96,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 4
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 4
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 97,
            "type": {
                "path": [
                    "pallet_grandpa",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "report_equivocation",
                                "fields": [
                                    {
                                        "name": "equivocation_proof",
                                        "type": 98,
                                        "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "key_owner_proof",
                                        "type": 108,
                                        "typeName": "T::KeyOwnerProof"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Report voter equivocation/misbehavior. This method will verify the",
                                    "equivocation proof and validate the given key ownership proof",
                                    "against the extracted offender. If both are valid, the offence",
                                    "will be reported."
                                ]
                            },
                            {
                                "name": "report_equivocation_unsigned",
                                "fields": [
                                    {
                                        "name": "equivocation_proof",
                                        "type": 98,
                                        "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "key_owner_proof",
                                        "type": 108,
                                        "typeName": "T::KeyOwnerProof"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Report voter equivocation/misbehavior. This method will verify the",
                                    "equivocation proof and validate the given key ownership proof",
                                    "against the extracted offender. If both are valid, the offence",
                                    "will be reported.",
                                    "",
                                    "This extrinsic must be called unsigned and it is expected that only",
                                    "block authors will call it (validated in `ValidateUnsigned`), as such",
                                    "if the block author is defined it will be defined as the equivocation",
                                    "reporter."
                                ]
                            },
                            {
                                "name": "note_stalled",
                                "fields": [
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "best_finalized_block_number",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                                    "",
                                    "This will trigger a forced authority set change at the beginning of the next session, to",
                                    "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                                    "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                                    "The block production rate (which may be slowed down because of finality lagging) should",
                                    "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                                    "authority will start voting on top of `best_finalized_block_number` for new finalized",
                                    "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                                    "block of all validators of the new authority set.",
                                    "",
                                    "Only callable by root."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 98,
            "type": {
                "path": [
                    "sp_consensus_grandpa",
                    "EquivocationProof"
                ],
                "params": [
                    {
                        "name": "H",
                        "type": 13
                    },
                    {
                        "name": "N",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "set_id",
                                "type": 6,
                                "typeName": "SetId"
                            },
                            {
                                "name": "equivocation",
                                "type": 99,
                                "typeName": "Equivocation<H, N>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 99,
            "type": {
                "path": [
                    "sp_consensus_grandpa",
                    "Equivocation"
                ],
                "params": [
                    {
                        "name": "H",
                        "type": 13
                    },
                    {
                        "name": "N",
                        "type": 4
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Prevote",
                                "fields": [
                                    {
                                        "type": 100,
                                        "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Precommit",
                                "fields": [
                                    {
                                        "type": 105,
                                        "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>"
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 100,
            "type": {
                "path": [
                    "finality_grandpa",
                    "Equivocation"
                ],
                "params": [
                    {
                        "name": "Id",
                        "type": 34
                    },
                    {
                        "name": "V",
                        "type": 101
                    },
                    {
                        "name": "S",
                        "type": 102
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "round_number",
                                "type": 6,
                                "typeName": "u64"
                            },
                            {
                                "name": "identity",
                                "type": 34,
                                "typeName": "Id"
                            },
                            {
                                "name": "first",
                                "type": 104,
                                "typeName": "(V, S)"
                            },
                            {
                                "name": "second",
                                "type": 104,
                                "typeName": "(V, S)"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 101,
            "type": {
                "path": [
                    "finality_grandpa",
                    "Prevote"
                ],
                "params": [
                    {
                        "name": "H",
                        "type": 13
                    },
                    {
                        "name": "N",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "target_hash",
                                "type": 13,
                                "typeName": "H"
                            },
                            {
                                "name": "target_number",
                                "type": 4,
                                "typeName": "N"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 102,
            "type": {
                "path": [
                    "sp_consensus_grandpa",
                    "app",
                    "Signature"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 103,
                                "typeName": "ed25519::Signature"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 103,
            "type": {
                "def": {
                    "array": {
                        "len": 64,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 104,
            "type": {
                "def": {
                    "tuple": [
                        101,
                        102
                    ]
                }
            }
        },
        {
            "id": 105,
            "type": {
                "path": [
                    "finality_grandpa",
                    "Equivocation"
                ],
                "params": [
                    {
                        "name": "Id",
                        "type": 34
                    },
                    {
                        "name": "V",
                        "type": 106
                    },
                    {
                        "name": "S",
                        "type": 102
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "round_number",
                                "type": 6,
                                "typeName": "u64"
                            },
                            {
                                "name": "identity",
                                "type": 34,
                                "typeName": "Id"
                            },
                            {
                                "name": "first",
                                "type": 107,
                                "typeName": "(V, S)"
                            },
                            {
                                "name": "second",
                                "type": 107,
                                "typeName": "(V, S)"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 106,
            "type": {
                "path": [
                    "finality_grandpa",
                    "Precommit"
                ],
                "params": [
                    {
                        "name": "H",
                        "type": 13
                    },
                    {
                        "name": "N",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "target_hash",
                                "type": 13,
                                "typeName": "H"
                            },
                            {
                                "name": "target_number",
                                "type": 4,
                                "typeName": "N"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 107,
            "type": {
                "def": {
                    "tuple": [
                        106,
                        102
                    ]
                }
            }
        },
        {
            "id": 108,
            "type": {
                "path": [
                    "sp_core",
                    "Void"
                ],
                "def": {
                    "variant": {}
                }
            }
        },
        {
            "id": 109,
            "type": {
                "path": [
                    "pallet_grandpa",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "PauseFailed",
                                "index": 0,
                                "docs": [
                                    "Attempt to signal GRANDPA pause when the authority set isn't live",
                                    "(either paused or already pending pause)."
                                ]
                            },
                            {
                                "name": "ResumeFailed",
                                "index": 1,
                                "docs": [
                                    "Attempt to signal GRANDPA resume when the authority set isn't paused",
                                    "(either live or already pending resume)."
                                ]
                            },
                            {
                                "name": "ChangePending",
                                "index": 2,
                                "docs": [
                                    "Attempt to signal GRANDPA change with one already pending."
                                ]
                            },
                            {
                                "name": "TooSoon",
                                "index": 3,
                                "docs": [
                                    "Cannot signal forced change so soon after last."
                                ]
                            },
                            {
                                "name": "InvalidKeyOwnershipProof",
                                "index": 4,
                                "docs": [
                                    "A key ownership proof provided as part of an equivocation report is invalid."
                                ]
                            },
                            {
                                "name": "InvalidEquivocationProof",
                                "index": 5,
                                "docs": [
                                    "An equivocation proof provided as part of an equivocation report is invalid."
                                ]
                            },
                            {
                                "name": "DuplicateOffenceReport",
                                "index": 6,
                                "docs": [
                                    "A given equivocation report is valid but already previously reported."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 110,
            "type": {
                "path": [
                    "bounded_collections",
                    "weak_bounded_vec",
                    "WeakBoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 111
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 113,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 111,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "BalanceLock"
                ],
                "params": [
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "id",
                                "type": 85,
                                "typeName": "LockIdentifier"
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "reasons",
                                "type": 112,
                                "typeName": "Reasons"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 112,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "Reasons"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Fee",
                                "index": 0
                            },
                            {
                                "name": "Misc",
                                "index": 1
                            },
                            {
                                "name": "All",
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 113,
            "type": {
                "def": {
                    "sequence": {
                        "type": 111
                    }
                }
            }
        },
        {
            "id": 114,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 115
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 116,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 115,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "ReserveData"
                ],
                "params": [
                    {
                        "name": "ReserveIdentifier",
                        "type": 85
                    },
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "id",
                                "type": 85,
                                "typeName": "ReserveIdentifier"
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "Balance"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 116,
            "type": {
                "def": {
                    "sequence": {
                        "type": 115
                    }
                }
            }
        },
        {
            "id": 117,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 118
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 123,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 118,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "IdAmount"
                ],
                "params": [
                    {
                        "name": "Id",
                        "type": 119
                    },
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "id",
                                "type": 119,
                                "typeName": "Id"
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "Balance"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 119,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "RuntimeHoldReason"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Preimage",
                                "fields": [
                                    {
                                        "type": 120,
                                        "typeName": "pallet_preimage::HoldReason"
                                    }
                                ],
                                "index": 14
                            },
                            {
                                "name": "Registry",
                                "fields": [
                                    {
                                        "type": 121,
                                        "typeName": "pallet_registry::HoldReason"
                                    }
                                ],
                                "index": 17
                            },
                            {
                                "name": "SafeMode",
                                "fields": [
                                    {
                                        "type": 122,
                                        "typeName": "pallet_safe_mode::HoldReason"
                                    }
                                ],
                                "index": 20
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 120,
            "type": {
                "path": [
                    "pallet_preimage",
                    "pallet",
                    "HoldReason"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Preimage",
                                "index": 0
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 121,
            "type": {
                "path": [
                    "pallet_registry",
                    "pallet",
                    "HoldReason"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "RegistryIdentity",
                                "index": 0
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 122,
            "type": {
                "path": [
                    "pallet_safe_mode",
                    "pallet",
                    "HoldReason"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "EnterOrExtend",
                                "index": 0
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 123,
            "type": {
                "def": {
                    "sequence": {
                        "type": 118
                    }
                }
            }
        },
        {
            "id": 124,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 125
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 127,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 125,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "IdAmount"
                ],
                "params": [
                    {
                        "name": "Id",
                        "type": 126
                    },
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "id",
                                "type": 126,
                                "typeName": "Id"
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "Balance"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 126,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "RuntimeFreezeReason"
                ],
                "def": {
                    "variant": {}
                }
            }
        },
        {
            "id": 127,
            "type": {
                "def": {
                    "sequence": {
                        "type": 125
                    }
                }
            }
        },
        {
            "id": 128,
            "type": {
                "path": [
                    "pallet_balances",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "transfer_allow_death",
                                "fields": [
                                    {
                                        "name": "dest",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "value",
                                        "type": 12,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Transfer some liquid free balance to another account.",
                                    "",
                                    "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                                    "If the sender's account is below the existential deposit as a result",
                                    "of the transfer, the account will be reaped.",
                                    "",
                                    "The dispatch origin for this call must be `Signed` by the transactor."
                                ]
                            },
                            {
                                "name": "force_transfer",
                                "fields": [
                                    {
                                        "name": "source",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "dest",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "value",
                                        "type": 12,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                                    "may be specified."
                                ]
                            },
                            {
                                "name": "transfer_keep_alive",
                                "fields": [
                                    {
                                        "name": "dest",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "value",
                                        "type": 12,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                                    "kill the origin account.",
                                    "",
                                    "99% of the time you want [`transfer_allow_death`] instead.",
                                    "",
                                    "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                                ]
                            },
                            {
                                "name": "transfer_all",
                                "fields": [
                                    {
                                        "name": "dest",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "keep_alive",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Transfer the entire transferable balance from the caller account.",
                                    "",
                                    "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                                    "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                                    "transferred by this function. To ensure that this function results in a killed account,",
                                    "you might need to prepare the account by removing any reference counters, storage",
                                    "deposits, etc...",
                                    "",
                                    "The dispatch origin of this call must be Signed.",
                                    "",
                                    "- `dest`: The recipient of the transfer.",
                                    "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                                    "  of the funds the account has, causing the sender account to be killed (false), or",
                                    "  transfer everything except at least the existential deposit, which will guarantee to",
                                    "  keep the sender account alive (true)."
                                ]
                            },
                            {
                                "name": "force_unreserve",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "amount",
                                        "type": 6,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Unreserve some balance from a user by force.",
                                    "",
                                    "Can only be called by ROOT."
                                ]
                            },
                            {
                                "name": "upgrade_accounts",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "Upgrade a specified account.",
                                    "",
                                    "- `origin`: Must be `Signed`.",
                                    "- `who`: The account to be upgraded.",
                                    "",
                                    "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                                    "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                                    "possibility of churn)."
                                ]
                            },
                            {
                                "name": "force_set_balance",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "new_free",
                                        "type": 12,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "Set the regular balance of a given account.",
                                    "",
                                    "The dispatch origin for this call is `root`."
                                ]
                            },
                            {
                                "name": "force_adjust_total_issuance",
                                "fields": [
                                    {
                                        "name": "direction",
                                        "type": 133,
                                        "typeName": "AdjustmentDirection"
                                    },
                                    {
                                        "name": "delta",
                                        "type": 12,
                                        "typeName": "T::Balance"
                                    }
                                ],
                                "index": 9,
                                "docs": [
                                    "Adjust the total issuance in a saturating way.",
                                    "",
                                    "Can only be called by root and always needs a positive `delta`.",
                                    "",
                                    "# Example"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 129,
            "type": {
                "path": [
                    "sp_runtime",
                    "multiaddress",
                    "MultiAddress"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "AccountIndex",
                        "type": 41
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Id",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "AccountId"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Index",
                                "fields": [
                                    {
                                        "type": 130,
                                        "typeName": "AccountIndex"
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "Raw",
                                "fields": [
                                    {
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 2
                            },
                            {
                                "name": "Address32",
                                "fields": [
                                    {
                                        "type": 1,
                                        "typeName": "[u8; 32]"
                                    }
                                ],
                                "index": 3
                            },
                            {
                                "name": "Address20",
                                "fields": [
                                    {
                                        "type": 131,
                                        "typeName": "[u8; 20]"
                                    }
                                ],
                                "index": 4
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 130,
            "type": {
                "def": {
                    "compact": {
                        "type": 41
                    }
                }
            }
        },
        {
            "id": 131,
            "type": {
                "def": {
                    "array": {
                        "len": 20,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 132,
            "type": {
                "def": {
                    "sequence": {
                        "type": 0
                    }
                }
            }
        },
        {
            "id": 133,
            "type": {
                "path": [
                    "pallet_balances",
                    "types",
                    "AdjustmentDirection"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Increase",
                                "index": 0
                            },
                            {
                                "name": "Decrease",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 134,
            "type": {
                "path": [
                    "pallet_balances",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "VestingBalance",
                                "index": 0,
                                "docs": [
                                    "Vesting balance too high to send value."
                                ]
                            },
                            {
                                "name": "LiquidityRestrictions",
                                "index": 1,
                                "docs": [
                                    "Account liquidity restrictions prevent withdrawal."
                                ]
                            },
                            {
                                "name": "InsufficientBalance",
                                "index": 2,
                                "docs": [
                                    "Balance too low to send value."
                                ]
                            },
                            {
                                "name": "ExistentialDeposit",
                                "index": 3,
                                "docs": [
                                    "Value too low to create account due to existential deposit."
                                ]
                            },
                            {
                                "name": "Expendability",
                                "index": 4,
                                "docs": [
                                    "Transfer/payment would kill account."
                                ]
                            },
                            {
                                "name": "ExistingVestingSchedule",
                                "index": 5,
                                "docs": [
                                    "A vesting schedule already exists for this account."
                                ]
                            },
                            {
                                "name": "DeadAccount",
                                "index": 6,
                                "docs": [
                                    "Beneficiary account must pre-exist."
                                ]
                            },
                            {
                                "name": "TooManyReserves",
                                "index": 7,
                                "docs": [
                                    "Number of named reserves exceed `MaxReserves`."
                                ]
                            },
                            {
                                "name": "TooManyHolds",
                                "index": 8,
                                "docs": [
                                    "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                                ]
                            },
                            {
                                "name": "TooManyFreezes",
                                "index": 9,
                                "docs": [
                                    "Number of freezes exceed `MaxFreezes`."
                                ]
                            },
                            {
                                "name": "IssuanceDeactivated",
                                "index": 10,
                                "docs": [
                                    "The issuance cannot be modified since it is already deactivated."
                                ]
                            },
                            {
                                "name": "DeltaZero",
                                "index": 11,
                                "docs": [
                                    "The delta cannot be zero."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 135,
            "type": {
                "path": [
                    "sp_arithmetic",
                    "fixed_point",
                    "FixedU128"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 8,
                                "typeName": "u128"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 136,
            "type": {
                "path": [
                    "pallet_transaction_payment",
                    "Releases"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "V1Ancient",
                                "index": 0
                            },
                            {
                                "name": "V2",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 137,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        0
                    ]
                }
            }
        },
        {
            "id": 138,
            "type": {
                "def": {
                    "tuple": [
                        6,
                        6
                    ]
                }
            }
        },
        {
            "id": 139,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        39
                    ]
                }
            }
        },
        {
            "id": 140,
            "type": {
                "def": {
                    "tuple": [
                        39,
                        39
                    ]
                }
            }
        },
        {
            "id": 141,
            "type": {
                "def": {
                    "sequence": {
                        "type": 39
                    }
                }
            }
        },
        {
            "id": 142,
            "type": {
                "def": {
                    "tuple": [
                        39,
                        0
                    ]
                }
            }
        },
        {
            "id": 143,
            "type": {
                "def": {
                    "sequence": {
                        "type": 144
                    }
                }
            }
        },
        {
            "id": 144,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        6,
                        6
                    ]
                }
            }
        },
        {
            "id": 145,
            "type": {
                "def": {
                    "sequence": {
                        "type": 9
                    }
                }
            }
        },
        {
            "id": 146,
            "type": {
                "def": {
                    "sequence": {
                        "type": 6
                    }
                }
            }
        },
        {
            "id": 147,
            "type": {
                "def": {
                    "sequence": {
                        "type": 140
                    }
                }
            }
        },
        {
            "id": 148,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "pallet",
                    "AxonInfo"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "block",
                                "type": 6,
                                "typeName": "u64"
                            },
                            {
                                "name": "version",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "ip",
                                "type": 8,
                                "typeName": "u128"
                            },
                            {
                                "name": "port",
                                "type": 39,
                                "typeName": "u16"
                            },
                            {
                                "name": "ip_type",
                                "type": 2,
                                "typeName": "u8"
                            },
                            {
                                "name": "protocol",
                                "type": 2,
                                "typeName": "u8"
                            },
                            {
                                "name": "placeholder1",
                                "type": 2,
                                "typeName": "u8"
                            },
                            {
                                "name": "placeholder2",
                                "type": 2,
                                "typeName": "u8"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 149,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "pallet",
                    "PrometheusInfo"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "block",
                                "type": 6,
                                "typeName": "u64"
                            },
                            {
                                "name": "version",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "ip",
                                "type": 8,
                                "typeName": "u128"
                            },
                            {
                                "name": "port",
                                "type": 39,
                                "typeName": "u16"
                            },
                            {
                                "name": "ip_type",
                                "type": 2,
                                "typeName": "u8"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 150,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "pallet",
                    "ChainIdentity"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "name",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "url",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "image",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "discord",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "description",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "additional",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 151,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "pallet",
                    "SubnetIdentity"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "subnet_name",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "github_repo",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "subnet_contact",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 152,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        39,
                        39
                    ]
                }
            }
        },
        {
            "id": 153,
            "type": {
                "def": {
                    "tuple": [
                        13,
                        6
                    ]
                }
            }
        },
        {
            "id": 154,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "set_weights",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "dests",
                                        "type": 141,
                                        "typeName": "Vec<u16>"
                                    },
                                    {
                                        "name": "weights",
                                        "type": 141,
                                        "typeName": "Vec<u16>"
                                    },
                                    {
                                        "name": "version_key",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "--- Sets the caller weights for the incentive mechanism. The call can be",
                                    "made from the hotkey account so is potentially insecure, however, the damage",
                                    "of changing weights is minimal if caught early. This function includes all the",
                                    "checks that the passed weights meet the requirements. Stored as u16s they represent",
                                    "rational values in the range [0,1] which sum to 1 and can be interpreted as",
                                    "probabilities. The specific weights determine how inflation propagates outward",
                                    "from this peer.",
                                    "",
                                    "Note: The 16 bit integers weights should represent 1.0 as the max u16.",
                                    "However, the function normalizes all integers to u16_max anyway. This means that if the sum of all",
                                    "elements is larger or smaller than the amount of elements * u16_max, all elements",
                                    "will be corrected for this deviation.",
                                    "",
                                    "# Args:",
                                    "* `origin`: (<T as frame_system::Config>Origin):",
                                    "    - The caller, a hotkey who wishes to set their weights.",
                                    "",
                                    "* `netuid` (u16):",
                                    "\t- The network uid we are setting these weights on.",
                                    "",
                                    "* `dests` (Vec<u16>):",
                                    "\t- The edge endpoint for the weight, i.e. j for w_ij.",
                                    "",
                                    "* 'weights' (Vec<u16>):",
                                    "\t- The u16 integer encoded weights. Interpreted as rational",
                                    "\t\tvalues in the range [0,1]. They must sum to in32::MAX.",
                                    "",
                                    "* 'version_key' ( u64 ):",
                                    "\t- The network version key to check if the validator is up to date.",
                                    "",
                                    "# Event:",
                                    "* WeightsSet;",
                                    "\t- On successfully setting the weights on chain.",
                                    "",
                                    "# Raises:",
                                    "* 'SubNetworkDoesNotExist':",
                                    "\t- Attempting to set weights on a non-existent network.",
                                    "",
                                    "* 'NotRegistered':",
                                    "\t- Attempting to set weights from a non registered account.",
                                    "",
                                    "* 'WeightVecNotEqualSize':",
                                    "\t- Attempting to set weights with uids not of same length.",
                                    "",
                                    "* 'DuplicateUids':",
                                    "\t- Attempting to set weights with duplicate uids.",
                                    "",
                                    "    * 'UidsLengthExceedUidsInSubNet':",
                                    "\t- Attempting to set weights above the max allowed uids.",
                                    "",
                                    "* 'UidVecContainInvalidOne':",
                                    "\t- Attempting to set weights with invalid uids.",
                                    "",
                                    "* 'WeightVecLengthIsLow':",
                                    "\t- Attempting to set weights with fewer weights than min.",
                                    "",
                                    "* 'MaxWeightExceeded':",
                                    "\t- Attempting to set weights with max value exceeding limit."
                                ]
                            },
                            {
                                "name": "commit_weights",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "commit_hash",
                                        "type": 13,
                                        "typeName": "H256"
                                    }
                                ],
                                "index": 96,
                                "docs": [
                                    "---- Used to commit a hash of your weight values to later be revealed.",
                                    "",
                                    "# Args:",
                                    "* `origin`: (`<T as frame_system::Config>::RuntimeOrigin`):",
                                    "  - The signature of the committing hotkey.",
                                    "",
                                    "* `netuid` (`u16`):",
                                    "  - The u16 network identifier.",
                                    "",
                                    "* `commit_hash` (`H256`):",
                                    "  - The hash representing the committed weights.",
                                    "",
                                    "# Raises:",
                                    "* `WeightsCommitNotAllowed`:",
                                    "  - Attempting to commit when it is not allowed.",
                                    ""
                                ]
                            },
                            {
                                "name": "reveal_weights",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "uids",
                                        "type": 141,
                                        "typeName": "Vec<u16>"
                                    },
                                    {
                                        "name": "values",
                                        "type": 141,
                                        "typeName": "Vec<u16>"
                                    },
                                    {
                                        "name": "salt",
                                        "type": 141,
                                        "typeName": "Vec<u16>"
                                    },
                                    {
                                        "name": "version_key",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 97,
                                "docs": [
                                    "---- Used to reveal the weights for a previously committed hash.",
                                    "",
                                    "# Args:",
                                    "* `origin`: (`<T as frame_system::Config>::RuntimeOrigin`):",
                                    "  - The signature of the revealing hotkey.",
                                    "",
                                    "* `netuid` (`u16`):",
                                    "  - The u16 network identifier.",
                                    "",
                                    "* `uids` (`Vec<u16>`):",
                                    "  - The uids for the weights being revealed.",
                                    "",
                                    "* `values` (`Vec<u16>`):",
                                    "  - The values of the weights being revealed.",
                                    "",
                                    "* `salt` (`Vec<u8>`):",
                                    "  - The random salt to protect from brute-force guessing attack in case of small weight changes bit-wise.",
                                    "",
                                    "* `version_key` (`u64`):",
                                    "  - The network version key.",
                                    "",
                                    "# Raises:",
                                    "* `NoWeightsCommitFound`:",
                                    "  - Attempting to reveal weights without an existing commit.",
                                    "",
                                    "* `InvalidRevealCommitHashNotMatchTempo`:",
                                    "  - Attempting to reveal weights outside the valid tempo.",
                                    "",
                                    "* `InvalidRevealCommitHashNotMatch`:",
                                    "  - The revealed hash does not match the committed hash.",
                                    ""
                                ]
                            },
                            {
                                "name": "set_root_weights",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "dests",
                                        "type": 141,
                                        "typeName": "Vec<u16>"
                                    },
                                    {
                                        "name": "weights",
                                        "type": 141,
                                        "typeName": "Vec<u16>"
                                    },
                                    {
                                        "name": "version_key",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "# Args:",
                                    "* `origin`: (<T as frame_system::Config>Origin):",
                                    "\t- The caller, a hotkey who wishes to set their weights.",
                                    "",
                                    "* `netuid` (u16):",
                                    "\t- The network uid we are setting these weights on.",
                                    "",
                                    "* `hotkey` (T::AccountId):",
                                    "\t- The hotkey associated with the operation and the calling coldkey.",
                                    "",
                                    "* `dests` (Vec<u16>):",
                                    "\t- The edge endpoint for the weight, i.e. j for w_ij.",
                                    "",
                                    "* 'weights' (Vec<u16>):",
                                    "\t- The u16 integer encoded weights. Interpreted as rational",
                                    "\t\tvalues in the range [0,1]. They must sum to in32::MAX.",
                                    "",
                                    "* 'version_key' ( u64 ):",
                                    "\t- The network version key to check if the validator is up to date.",
                                    "",
                                    "# Event:",
                                    "",
                                    "* WeightsSet;",
                                    "\t- On successfully setting the weights on chain.",
                                    "",
                                    "# Raises:",
                                    "",
                                    "* NonAssociatedColdKey;",
                                    "\t- Attempting to set weights on a non-associated cold key.",
                                    "",
                                    "* 'SubNetworkDoesNotExist':",
                                    "\t- Attempting to set weights on a non-existent network.",
                                    "",
                                    "* 'NotRootSubnet':",
                                    "\t- Attempting to set weights on a subnet that is not the root network.",
                                    "",
                                    "* 'WeightVecNotEqualSize':",
                                    "\t- Attempting to set weights with uids not of same length.",
                                    "",
                                    "* 'UidVecContainInvalidOne':",
                                    "\t- Attempting to set weights with invalid uids.",
                                    "",
                                    "* 'NotRegistered':",
                                    "\t- Attempting to set weights from a non registered account.",
                                    "",
                                    "* 'WeightVecLengthIsLow':",
                                    "\t- Attempting to set weights with fewer weights than min.",
                                    "",
                                    " * 'IncorrectWeightVersionKey':",
                                    "     - Attempting to set weights with the incorrect network version key.",
                                    "",
                                    " * 'SettingWeightsTooFast':",
                                    "     - Attempting to set weights too fast.",
                                    "",
                                    "* 'WeightVecLengthIsLow':",
                                    "\t- Attempting to set weights with fewer weights than min.",
                                    "",
                                    "* 'MaxWeightExceeded':",
                                    "\t- Attempting to set weights with max value exceeding limit.",
                                    ""
                                ]
                            },
                            {
                                "name": "become_delegate",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "--- Sets the key as a delegate.",
                                    "",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>Origin):",
                                    "\t- The signature of the caller's coldkey.",
                                    "",
                                    "* 'hotkey' (T::AccountId):",
                                    "\t- The hotkey we are delegating (must be owned by the coldkey.)",
                                    "",
                                    "* 'take' (u64):",
                                    "\t- The stake proportion that this hotkey takes from delegations.",
                                    "",
                                    "# Event:",
                                    "* DelegateAdded;",
                                    "\t- On successfully setting a hotkey as a delegate.",
                                    "",
                                    "# Raises:",
                                    "* 'NotRegistered':",
                                    "\t- The hotkey we are delegating is not registered on the network.",
                                    "",
                                    "* 'NonAssociatedColdKey':",
                                    "\t- The hotkey we are delegating is not owned by the calling coldket.",
                                    ""
                                ]
                            },
                            {
                                "name": "decrease_take",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "take",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 65,
                                "docs": [
                                    "--- Allows delegates to decrease its take value.",
                                    "",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>::Origin):",
                                    "\t- The signature of the caller's coldkey.",
                                    "",
                                    "* 'hotkey' (T::AccountId):",
                                    "\t- The hotkey we are delegating (must be owned by the coldkey.)",
                                    "",
                                    "* 'netuid' (u16):",
                                    "\t- Subnet ID to decrease take for",
                                    "",
                                    "* 'take' (u16):",
                                    "\t- The new stake proportion that this hotkey takes from delegations.",
                                    "       The new value can be between 0 and 11_796 and should be strictly",
                                    "       lower than the previous value. It T is the new value (rational number),",
                                    "       the the parameter is calculated as [65535 * T]. For example, 1% would be",
                                    "       [0.01 * 65535] = [655.35] = 655",
                                    "",
                                    "# Event:",
                                    "* TakeDecreased;",
                                    "\t- On successfully setting a decreased take for this hotkey.",
                                    "",
                                    "# Raises:",
                                    "* 'NotRegistered':",
                                    "\t- The hotkey we are delegating is not registered on the network.",
                                    "",
                                    "* 'NonAssociatedColdKey':",
                                    "\t- The hotkey we are delegating is not owned by the calling coldkey.",
                                    "",
                                    "* 'DelegateTakeTooLow':",
                                    "\t- The delegate is setting a take which is not lower than the previous.",
                                    ""
                                ]
                            },
                            {
                                "name": "increase_take",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "take",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 66,
                                "docs": [
                                    "--- Allows delegates to increase its take value. This call is rate-limited.",
                                    "",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>::Origin):",
                                    "\t- The signature of the caller's coldkey.",
                                    "",
                                    "* 'hotkey' (T::AccountId):",
                                    "\t- The hotkey we are delegating (must be owned by the coldkey.)",
                                    "",
                                    "* 'take' (u16):",
                                    "\t- The new stake proportion that this hotkey takes from delegations.",
                                    "       The new value can be between 0 and 11_796 and should be strictly",
                                    "       greater than the previous value. T is the new value (rational number),",
                                    "       the the parameter is calculated as [65535 * T]. For example, 1% would be",
                                    "       [0.01 * 65535] = [655.35] = 655",
                                    "",
                                    "# Event:",
                                    "* TakeIncreased;",
                                    "\t- On successfully setting a increased take for this hotkey.",
                                    "",
                                    "# Raises:",
                                    "* 'NotRegistered':",
                                    "\t- The hotkey we are delegating is not registered on the network.",
                                    "",
                                    "* 'NonAssociatedColdKey':",
                                    "\t- The hotkey we are delegating is not owned by the calling coldkey.",
                                    "",
                                    "* 'DelegateTakeTooHigh':",
                                    "\t- The delegate is setting a take which is not greater than the previous.",
                                    ""
                                ]
                            },
                            {
                                "name": "add_stake",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount_staked",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "--- Adds stake to a hotkey. The call is made from the",
                                    "coldkey account linked in the hotkey.",
                                    "Only the associated coldkey is allowed to make staking and",
                                    "unstaking requests. This protects the neuron against",
                                    "attacks on its hotkey running in production code.",
                                    "",
                                    "# Args:",
                                    " * 'origin': (<T as frame_system::Config>Origin):",
                                    "\t- The signature of the caller's coldkey.",
                                    "",
                                    " * 'hotkey' (T::AccountId):",
                                    "\t- The associated hotkey account.",
                                    "",
                                    " * 'amount_staked' (u64):",
                                    "\t- The amount of stake to be added to the hotkey staking account.",
                                    "",
                                    "# Event:",
                                    " * StakeAdded;",
                                    "\t- On the successfully adding stake to a global account.",
                                    "",
                                    "# Raises:",
                                    " * 'NotEnoughBalanceToStake':",
                                    "\t- Not enough balance on the coldkey to add onto the global account.",
                                    "",
                                    " * 'NonAssociatedColdKey':",
                                    "\t- The calling coldkey is not associated with this hotkey.",
                                    "",
                                    " * 'BalanceWithdrawalError':",
                                    " \t- Errors stemming from transaction pallet.",
                                    ""
                                ]
                            },
                            {
                                "name": "remove_stake",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "amount_unstaked",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Remove stake from the staking account. The call must be made",
                                    "from the coldkey account attached to the neuron metadata. Only this key",
                                    "has permission to make staking and unstaking requests.",
                                    "",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>Origin):",
                                    "\t- The signature of the caller's coldkey.",
                                    "",
                                    "* 'hotkey' (T::AccountId):",
                                    "\t- The associated hotkey account.",
                                    "",
                                    "* 'amount_unstaked' (u64):",
                                    "\t- The amount of stake to be added to the hotkey staking account.",
                                    "",
                                    "# Event:",
                                    "* StakeRemoved;",
                                    "\t- On the successfully removing stake from the hotkey account.",
                                    "",
                                    "# Raises:",
                                    "* 'NotRegistered':",
                                    "\t- Thrown if the account we are attempting to unstake from is non existent.",
                                    "",
                                    "* 'NonAssociatedColdKey':",
                                    "\t- Thrown if the coldkey does not own the hotkey we are unstaking from.",
                                    "",
                                    "* 'NotEnoughStakeToWithdraw':",
                                    "\t- Thrown if there is not enough stake on the hotkey to withdwraw this amount.",
                                    ""
                                ]
                            },
                            {
                                "name": "serve_axon",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "version",
                                        "type": 4,
                                        "typeName": "u32"
                                    },
                                    {
                                        "name": "ip",
                                        "type": 8,
                                        "typeName": "u128"
                                    },
                                    {
                                        "name": "port",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "ip_type",
                                        "type": 2,
                                        "typeName": "u8"
                                    },
                                    {
                                        "name": "protocol",
                                        "type": 2,
                                        "typeName": "u8"
                                    },
                                    {
                                        "name": "placeholder1",
                                        "type": 2,
                                        "typeName": "u8"
                                    },
                                    {
                                        "name": "placeholder2",
                                        "type": 2,
                                        "typeName": "u8"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Serves or updates axon /promethteus information for the neuron associated with the caller. If the caller is",
                                    "already registered the metadata is updated. If the caller is not registered this call throws NotRegistered.",
                                    "",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>Origin):",
                                    "\t- The signature of the caller.",
                                    "",
                                    "* 'netuid' (u16):",
                                    "\t- The u16 network identifier.",
                                    "",
                                    "* 'version' (u64):",
                                    "\t- The bittensor version identifier.",
                                    "",
                                    "* 'ip' (u64):",
                                    "\t- The endpoint ip information as a u128 encoded integer.",
                                    "",
                                    "* 'port' (u16):",
                                    "\t- The endpoint port information as a u16 encoded integer.",
                                    "",
                                    "* 'ip_type' (u8):",
                                    "\t- The endpoint ip version as a u8, 4 or 6.",
                                    "",
                                    "* 'protocol' (u8):",
                                    "\t- UDP:1 or TCP:0",
                                    "",
                                    "* 'placeholder1' (u8):",
                                    "\t- Placeholder for further extra params.",
                                    "",
                                    "* 'placeholder2' (u8):",
                                    "\t- Placeholder for further extra params.",
                                    "",
                                    "# Event:",
                                    "* AxonServed;",
                                    "\t- On successfully serving the axon info.",
                                    "",
                                    "# Raises:",
                                    "* 'SubNetworkDoesNotExist':",
                                    "\t- Attempting to set weights on a non-existent network.",
                                    "",
                                    "* 'NotRegistered':",
                                    "\t- Attempting to set weights from a non registered account.",
                                    "",
                                    "* 'InvalidIpType':",
                                    "\t- The ip type is not 4 or 6.",
                                    "",
                                    "* 'InvalidIpAddress':",
                                    "\t- The numerically encoded ip address does not resolve to a proper ip.",
                                    "",
                                    "* 'ServingRateLimitExceeded':",
                                    "\t- Attempting to set prometheus information withing the rate limit min.",
                                    ""
                                ]
                            },
                            {
                                "name": "serve_prometheus",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "version",
                                        "type": 4,
                                        "typeName": "u32"
                                    },
                                    {
                                        "name": "ip",
                                        "type": 8,
                                        "typeName": "u128"
                                    },
                                    {
                                        "name": "port",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "ip_type",
                                        "type": 2,
                                        "typeName": "u8"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "---- Set prometheus information for the neuron.",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>Origin):",
                                    "\t- The signature of the calling hotkey.",
                                    "",
                                    "* 'netuid' (u16):",
                                    "\t- The u16 network identifier.",
                                    "",
                                    "* 'version' (u16):",
                                    "\t-  The bittensor version identifier.",
                                    "",
                                    "* 'ip' (u128):",
                                    "\t- The prometheus ip information as a u128 encoded integer.",
                                    "",
                                    "* 'port' (u16):",
                                    "\t- The prometheus port information as a u16 encoded integer.",
                                    "",
                                    "* 'ip_type' (u8):",
                                    "\t- The ip type v4 or v6.",
                                    ""
                                ]
                            },
                            {
                                "name": "register",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "block_number",
                                        "type": 6,
                                        "typeName": "u64"
                                    },
                                    {
                                        "name": "nonce",
                                        "type": 6,
                                        "typeName": "u64"
                                    },
                                    {
                                        "name": "work",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "---- Registers a new neuron to the subnetwork.",
                                    "",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>Origin):",
                                    "\t- The signature of the calling hotkey.",
                                    "",
                                    "* 'netuid' (u16):",
                                    "\t- The u16 network identifier.",
                                    "",
                                    "* 'block_number' ( u64 ):",
                                    "\t- Block hash used to prove work done.",
                                    "",
                                    "* 'nonce' ( u64 ):",
                                    "\t- Positive integer nonce used in POW.",
                                    "",
                                    "* 'work' ( Vec<u8> ):",
                                    "\t- Vector encoded bytes representing work done.",
                                    "",
                                    "* 'hotkey' ( T::AccountId ):",
                                    "\t- Hotkey to be registered to the network.",
                                    "",
                                    "* 'coldkey' ( T::AccountId ):",
                                    "\t- Associated coldkey account.",
                                    "",
                                    "# Event:",
                                    "* NeuronRegistered;",
                                    "\t- On successfully registering a uid to a neuron slot on a subnetwork.",
                                    "",
                                    "# Raises:",
                                    "* 'SubNetworkDoesNotExist':",
                                    "\t- Attempting to register to a non existent network.",
                                    "",
                                    "* 'TooManyRegistrationsThisBlock':",
                                    "\t- This registration exceeds the total allowed on this network this block.",
                                    "",
                                    "* 'HotKeyAlreadyRegisteredInSubNet':",
                                    "\t- The hotkey is already registered on this network.",
                                    "",
                                    "* 'InvalidWorkBlock':",
                                    "\t- The work has been performed on a stale, future, or non existent block.",
                                    "",
                                    "* 'InvalidDifficulty':",
                                    "\t- The work does not match the difficulty.",
                                    "",
                                    "* 'InvalidSeal':",
                                    "\t- The seal is incorrect.",
                                    ""
                                ]
                            },
                            {
                                "name": "root_register",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 62,
                                "docs": [
                                    "Register the hotkey to root network"
                                ]
                            },
                            {
                                "name": "adjust_senate",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 63,
                                "docs": [
                                    "Attempt to adjust the senate membership to include a hotkey"
                                ]
                            },
                            {
                                "name": "burned_register",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "User register a new subnetwork via burning token"
                                ]
                            },
                            {
                                "name": "swap_hotkey",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "new_hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 70,
                                "docs": [
                                    "The extrinsic for user to change its hotkey"
                                ]
                            },
                            {
                                "name": "swap_coldkey",
                                "fields": [
                                    {
                                        "name": "old_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "new_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 71,
                                "docs": [
                                    "The extrinsic for user to change the coldkey associated with their account.",
                                    "",
                                    "# Arguments",
                                    "",
                                    "* `origin` - The origin of the call, must be signed by the old coldkey.",
                                    "* `old_coldkey` - The current coldkey associated with the account.",
                                    "* `new_coldkey` - The new coldkey to be associated with the account.",
                                    "",
                                    "# Returns",
                                    "",
                                    "Returns a `DispatchResultWithPostInfo` indicating success or failure of the operation.",
                                    "",
                                    "# Weight",
                                    "",
                                    "Weight is calculated based on the number of database reads and writes."
                                ]
                            },
                            {
                                "name": "set_childkey_take",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "take",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 75,
                                "docs": [
                                    "Sets the childkey take for a given hotkey.",
                                    "",
                                    "This function allows a coldkey to set the childkey take for a given hotkey.",
                                    "The childkey take determines the proportion of stake that the hotkey keeps for itself",
                                    "when distributing stake to its children.",
                                    "",
                                    "# Arguments:",
                                    "* `origin` (<T as frame_system::Config>::RuntimeOrigin):",
                                    "    - The signature of the calling coldkey. Setting childkey take can only be done by the coldkey.",
                                    "",
                                    "* `hotkey` (T::AccountId):",
                                    "    - The hotkey for which the childkey take will be set.",
                                    "",
                                    "* `take` (u16):",
                                    "    - The new childkey take value. This is a percentage represented as a value between 0 and 10000,",
                                    "      where 10000 represents 100%.",
                                    "",
                                    "# Events:",
                                    "* `ChildkeyTakeSet`:",
                                    "    - On successfully setting the childkey take for a hotkey.",
                                    "",
                                    "# Errors:",
                                    "* `NonAssociatedColdKey`:",
                                    "    - The coldkey does not own the hotkey.",
                                    "* `InvalidChildkeyTake`:",
                                    "    - The provided take value is invalid (greater than the maximum allowed take).",
                                    "* `TxChildkeyTakeRateLimitExceeded`:",
                                    "    - The rate limit for changing childkey take has been exceeded.",
                                    ""
                                ]
                            },
                            {
                                "name": "sudo_set_tx_childkey_take_rate_limit",
                                "fields": [
                                    {
                                        "name": "tx_rate_limit",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 69,
                                "docs": [
                                    "Sets the transaction rate limit for changing childkey take.",
                                    "",
                                    "This function can only be called by the root origin.",
                                    "",
                                    "# Arguments:",
                                    "* `origin` - The origin of the call, must be root.",
                                    "* `tx_rate_limit` - The new rate limit in blocks.",
                                    "",
                                    "# Errors:",
                                    "* `BadOrigin` - If the origin is not root.",
                                    ""
                                ]
                            },
                            {
                                "name": "sudo_set_min_childkey_take",
                                "fields": [
                                    {
                                        "name": "take",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 76,
                                "docs": [
                                    "Sets the minimum allowed childkey take.",
                                    "",
                                    "This function can only be called by the root origin.",
                                    "",
                                    "# Arguments:",
                                    "* `origin` - The origin of the call, must be root.",
                                    "* `take` - The new minimum childkey take value.",
                                    "",
                                    "# Errors:",
                                    "* `BadOrigin` - If the origin is not root.",
                                    ""
                                ]
                            },
                            {
                                "name": "sudo_set_max_childkey_take",
                                "fields": [
                                    {
                                        "name": "take",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 77,
                                "docs": [
                                    "Sets the maximum allowed childkey take.",
                                    "",
                                    "This function can only be called by the root origin.",
                                    "",
                                    "# Arguments:",
                                    "* `origin` - The origin of the call, must be root.",
                                    "* `take` - The new maximum childkey take value.",
                                    "",
                                    "# Errors:",
                                    "* `BadOrigin` - If the origin is not root.",
                                    ""
                                ]
                            },
                            {
                                "name": "sudo",
                                "fields": [
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<T::SudoRuntimeCall>"
                                    }
                                ],
                                "index": 51,
                                "docs": [
                                    "Authenticates a council proposal and dispatches a function call with `Root` origin.",
                                    "",
                                    "The dispatch origin for this call must be a council majority.",
                                    "",
                                    "## Complexity",
                                    "- O(1)."
                                ]
                            },
                            {
                                "name": "sudo_unchecked_weight",
                                "fields": [
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<T::SudoRuntimeCall>"
                                    },
                                    {
                                        "name": "weight",
                                        "type": 11,
                                        "typeName": "Weight"
                                    }
                                ],
                                "index": 52,
                                "docs": [
                                    "Authenticates a council proposal and dispatches a function call with `Root` origin.",
                                    "This function does not check the weight of the call, and instead allows the",
                                    "user to specify the weight of the call.",
                                    "",
                                    "The dispatch origin for this call must be a council majority.",
                                    "",
                                    "## Complexity",
                                    "- O(1)."
                                ]
                            },
                            {
                                "name": "vote",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "proposal",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    },
                                    {
                                        "name": "index",
                                        "type": 67,
                                        "typeName": "u32"
                                    },
                                    {
                                        "name": "approve",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 55,
                                "docs": [
                                    "User vote on a proposal"
                                ]
                            },
                            {
                                "name": "register_network",
                                "index": 59,
                                "docs": [
                                    "User register a new subnetwork"
                                ]
                            },
                            {
                                "name": "faucet",
                                "fields": [
                                    {
                                        "name": "block_number",
                                        "type": 6,
                                        "typeName": "u64"
                                    },
                                    {
                                        "name": "nonce",
                                        "type": 6,
                                        "typeName": "u64"
                                    },
                                    {
                                        "name": "work",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 60,
                                "docs": [
                                    "Facility extrinsic for user to get taken from faucet",
                                    "It is only available when pow-faucet feature enabled",
                                    "Just deployed in testnet and devnet for testing purpose"
                                ]
                            },
                            {
                                "name": "dissolve_network",
                                "fields": [
                                    {
                                        "name": "coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 61,
                                "docs": [
                                    "Remove a user's subnetwork",
                                    "The caller must be the owner of the network"
                                ]
                            },
                            {
                                "name": "set_children",
                                "fields": [
                                    {
                                        "name": "hotkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "children",
                                        "type": 43,
                                        "typeName": "Vec<(u64, T::AccountId)>"
                                    }
                                ],
                                "index": 67,
                                "docs": [
                                    "Set a single child for a given hotkey on a specified network.",
                                    "",
                                    "This function allows a coldkey to set a single child for a given hotkey on a specified network.",
                                    "The proportion of the hotkey's stake to be allocated to the child is also specified.",
                                    "",
                                    "# Arguments:",
                                    "* `origin` (<T as frame_system::Config>::RuntimeOrigin):",
                                    "    - The signature of the calling coldkey. Setting a hotkey child can only be done by the coldkey.",
                                    "",
                                    "* `hotkey` (T::AccountId):",
                                    "    - The hotkey which will be assigned the child.",
                                    "",
                                    "* `child` (T::AccountId):",
                                    "    - The child which will be assigned to the hotkey.",
                                    "",
                                    "* `netuid` (u16):",
                                    "    - The u16 network identifier where the childkey will exist.",
                                    "",
                                    "* `proportion` (u64):",
                                    "    - Proportion of the hotkey's stake to be given to the child, the value must be u64 normalized.",
                                    "",
                                    "# Events:",
                                    "* `ChildAddedSingular`:",
                                    "    - On successfully registering a child to a hotkey.",
                                    "",
                                    "# Errors:",
                                    "* `SubNetworkDoesNotExist`:",
                                    "    - Attempting to register to a non-existent network.",
                                    "* `RegistrationNotPermittedOnRootSubnet`:",
                                    "    - Attempting to register a child on the root network.",
                                    "* `NonAssociatedColdKey`:",
                                    "    - The coldkey does not own the hotkey or the child is the same as the hotkey.",
                                    "* `HotKeyAccountNotExists`:",
                                    "    - The hotkey account does not exist.",
                                    "",
                                    "# Detailed Explanation of Checks:",
                                    "1. **Signature Verification**: Ensures that the caller has signed the transaction, verifying the coldkey.",
                                    "2. **Root Network Check**: Ensures that the delegation is not on the root network, as child hotkeys are not valid on the root.",
                                    "3. **Network Existence Check**: Ensures that the specified network exists.",
                                    "4. **Ownership Verification**: Ensures that the coldkey owns the hotkey.",
                                    "5. **Hotkey Account Existence Check**: Ensures that the hotkey account already exists.",
                                    "6. **Child-Hotkey Distinction**: Ensures that the child is not the same as the hotkey.",
                                    "7. **Old Children Cleanup**: Removes the hotkey from the parent list of its old children.",
                                    "8. **New Children Assignment**: Assigns the new child to the hotkey and updates the parent list for the new child."
                                ]
                            },
                            {
                                "name": "schedule_swap_coldkey",
                                "fields": [
                                    {
                                        "name": "new_coldkey",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 73,
                                "docs": [
                                    "Schedules a coldkey swap operation to be executed at a future block.",
                                    "",
                                    "This function allows a user to schedule the swapping of their coldkey to a new one",
                                    "at a specified future block. The swap is not executed immediately but is scheduled",
                                    "to occur at the specified block number.",
                                    "",
                                    "# Arguments",
                                    "",
                                    "* `origin` - The origin of the call, which should be signed by the current coldkey owner.",
                                    "* `new_coldkey` - The account ID of the new coldkey that will replace the current one.",
                                    "* `when` - The block number at which the coldkey swap should be executed.",
                                    "",
                                    "# Returns",
                                    "",
                                    "Returns a `DispatchResultWithPostInfo` indicating whether the scheduling was successful.",
                                    "",
                                    "# Errors",
                                    "",
                                    "This function may return an error if:",
                                    "* The origin is not signed.",
                                    "* The scheduling fails due to conflicts or system constraints.",
                                    "",
                                    "# Notes",
                                    "",
                                    "- The actual swap is not performed by this function. It merely schedules the swap operation.",
                                    "- The weight of this call is set to a fixed value and may need adjustment based on benchmarking.",
                                    "",
                                    "# TODO",
                                    "",
                                    "- Implement proper weight calculation based on the complexity of the operation.",
                                    "- Consider adding checks to prevent scheduling too far into the future.",
                                    "TODO: Benchmark this call"
                                ]
                            },
                            {
                                "name": "schedule_dissolve_network",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 74,
                                "docs": [
                                    "Schedule the dissolution of a network at a specified block number.",
                                    "",
                                    "# Arguments",
                                    "",
                                    "* `origin` - The origin of the call, must be signed by the sender.",
                                    "* `netuid` - The u16 network identifier to be dissolved.",
                                    "",
                                    "# Returns",
                                    "",
                                    "Returns a `DispatchResultWithPostInfo` indicating success or failure of the operation.",
                                    "",
                                    "# Weight",
                                    "",
                                    "Weight is calculated based on the number of database reads and writes."
                                ]
                            },
                            {
                                "name": "set_identity",
                                "fields": [
                                    {
                                        "name": "name",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "url",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "image",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "discord",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "description",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "additional",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 68,
                                "docs": [
                                    "---- Set prometheus information for the neuron.",
                                    "# Args:",
                                    "* 'origin': (<T as frame_system::Config>Origin):",
                                    "\t- The signature of the calling hotkey.",
                                    "",
                                    "* 'netuid' (u16):",
                                    "\t- The u16 network identifier.",
                                    "",
                                    "* 'version' (u16):",
                                    "\t-  The bittensor version identifier.",
                                    "",
                                    "* 'ip' (u128):",
                                    "\t- The prometheus ip information as a u128 encoded integer.",
                                    "",
                                    "* 'port' (u16):",
                                    "\t- The prometheus port information as a u16 encoded integer.",
                                    "",
                                    "* 'ip_type' (u8):",
                                    "\t- The ip type v4 or v6.",
                                    ""
                                ]
                            },
                            {
                                "name": "set_subnet_identity",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "subnet_name",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "github_repo",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    },
                                    {
                                        "name": "subnet_contact",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 78,
                                "docs": [
                                    "---- Set the identity information for a subnet.",
                                    "# Args:",
                                    "* `origin` - (<T as frame_system::Config>::Origin):",
                                    "    - The signature of the calling coldkey, which must be the owner of the subnet.",
                                    "",
                                    "* `netuid` (u16):",
                                    "    - The unique network identifier of the subnet.",
                                    "",
                                    "* `subnet_name` (Vec<u8>):",
                                    "    - The name of the subnet.",
                                    "",
                                    "* `github_repo` (Vec<u8>):",
                                    "    - The GitHub repository associated with the subnet identity.",
                                    "",
                                    "* `subnet_contact` (Vec<u8>):",
                                    "    - The contact information for the subnet."
                                ]
                            },
                            {
                                "name": "register_network_with_identity",
                                "fields": [
                                    {
                                        "name": "identity",
                                        "type": 310,
                                        "typeName": "Option<SubnetIdentityOf>"
                                    }
                                ],
                                "index": 79,
                                "docs": [
                                    "User register a new subnetwork"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Dispatchable functions allow users to interact with the pallet and invoke state changes.",
                    "These functions materialize as \"extrinsics\", which are often compared to transactions.",
                    "Dispatchable functions must be annotated with a weight and must return a DispatchResult."
                ]
            }
        },
        {
            "id": 155,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "RuntimeCall"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "System",
                                "fields": [
                                    {
                                        "type": 70,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Timestamp",
                                "fields": [
                                    {
                                        "type": 88,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                                    }
                                ],
                                "index": 2
                            },
                            {
                                "name": "Grandpa",
                                "fields": [
                                    {
                                        "type": 97,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"
                                    }
                                ],
                                "index": 4
                            },
                            {
                                "name": "Balances",
                                "fields": [
                                    {
                                        "type": 128,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                                    }
                                ],
                                "index": 5
                            },
                            {
                                "name": "SubtensorModule",
                                "fields": [
                                    {
                                        "type": 154,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SubtensorModule, Runtime>"
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "Triumvirate",
                                "fields": [
                                    {
                                        "type": 156,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Triumvirate, Runtime>"
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "TriumvirateMembers",
                                "fields": [
                                    {
                                        "type": 157,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TriumvirateMembers, Runtime>"
                                    }
                                ],
                                "index": 9
                            },
                            {
                                "name": "SenateMembers",
                                "fields": [
                                    {
                                        "type": 158,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SenateMembers, Runtime>"
                                    }
                                ],
                                "index": 10
                            },
                            {
                                "name": "Utility",
                                "fields": [
                                    {
                                        "type": 159,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                                    }
                                ],
                                "index": 11
                            },
                            {
                                "name": "Sudo",
                                "fields": [
                                    {
                                        "type": 164,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                                    }
                                ],
                                "index": 12
                            },
                            {
                                "name": "Multisig",
                                "fields": [
                                    {
                                        "type": 165,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                                    }
                                ],
                                "index": 13
                            },
                            {
                                "name": "Preimage",
                                "fields": [
                                    {
                                        "type": 167,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"
                                    }
                                ],
                                "index": 14
                            },
                            {
                                "name": "Scheduler",
                                "fields": [
                                    {
                                        "type": 168,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                                    }
                                ],
                                "index": 15
                            },
                            {
                                "name": "Proxy",
                                "fields": [
                                    {
                                        "type": 170,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                                    }
                                ],
                                "index": 16
                            },
                            {
                                "name": "Registry",
                                "fields": [
                                    {
                                        "type": 172,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registry, Runtime>"
                                    }
                                ],
                                "index": 17
                            },
                            {
                                "name": "Commitments",
                                "fields": [
                                    {
                                        "type": 239,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Commitments, Runtime>"
                                    }
                                ],
                                "index": 18
                            },
                            {
                                "name": "AdminUtils",
                                "fields": [
                                    {
                                        "type": 308,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AdminUtils, Runtime>"
                                    }
                                ],
                                "index": 19
                            },
                            {
                                "name": "SafeMode",
                                "fields": [
                                    {
                                        "type": 309,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SafeMode, Runtime>"
                                    }
                                ],
                                "index": 20
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 156,
            "type": {
                "path": [
                    "pallet_collective",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "set_members",
                                "fields": [
                                    {
                                        "name": "new_members",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    },
                                    {
                                        "name": "prime",
                                        "type": 42,
                                        "typeName": "Option<T::AccountId>"
                                    },
                                    {
                                        "name": "old_count",
                                        "type": 4,
                                        "typeName": "MemberCount"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Set the collective's membership.",
                                    "",
                                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                                    "- `prime`: The prime member whose vote sets the default.",
                                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                                    "  weight estimation.",
                                    "",
                                    "The dispatch of this call must be `SetMembersOrigin`.",
                                    "",
                                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                                    "      the weight estimations rely on it to estimate dispatchable weight.",
                                    "",
                                    "# WARNING:",
                                    "",
                                    "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                                    "implementation of the trait [`ChangeMembers`].",
                                    "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                                    "with other logic managing the member set.",
                                    "",
                                    "## Complexity:",
                                    "- `O(MP + N)` where:",
                                    "  - `M` old-members-count (code- and governance-bounded)",
                                    "  - `N` new-members-count (code- and governance-bounded)",
                                    "  - `P` proposals-count (code-bounded)"
                                ]
                            },
                            {
                                "name": "execute",
                                "fields": [
                                    {
                                        "name": "proposal",
                                        "type": 155,
                                        "typeName": "Box<<T as Config<I>>::Proposal>"
                                    },
                                    {
                                        "name": "length_bound",
                                        "type": 67,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Dispatch a proposal from a member using the `Member` origin.",
                                    "",
                                    "Origin must be a member of the collective.",
                                    "",
                                    "## Complexity:",
                                    "- `O(B + M + P)` where:",
                                    "- `B` is `proposal` size in bytes (length-fee-bounded)",
                                    "- `M` members-count (code-bounded)",
                                    "- `P` complexity of dispatching `proposal`"
                                ]
                            },
                            {
                                "name": "propose",
                                "fields": [
                                    {
                                        "name": "proposal",
                                        "type": 155,
                                        "typeName": "Box<<T as Config<I>>::Proposal>"
                                    },
                                    {
                                        "name": "length_bound",
                                        "type": 67,
                                        "typeName": "u32"
                                    },
                                    {
                                        "name": "duration",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Add a new proposal to either be voted on or executed directly.",
                                    "",
                                    "Requires the sender to be member.",
                                    "",
                                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                                    "or put up for voting.",
                                    "",
                                    "## Complexity",
                                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                                    "  - `M` is members-count (code- and governance-bounded)",
                                    "  - branching is influenced by `threshold` where:",
                                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                                ]
                            },
                            {
                                "name": "vote",
                                "fields": [
                                    {
                                        "name": "proposal",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    },
                                    {
                                        "name": "index",
                                        "type": 67,
                                        "typeName": "ProposalIndex"
                                    },
                                    {
                                        "name": "approve",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Add an aye or nay vote for the sender to the given proposal.",
                                    "",
                                    "Requires the sender to be a member.",
                                    "",
                                    "Transaction fees will be waived if the member is voting on any particular proposal",
                                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                                    "fee.",
                                    "## Complexity",
                                    "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                                ]
                            },
                            {
                                "name": "disapprove_proposal",
                                "fields": [
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                                    "state.",
                                    "",
                                    "Must be called by the Root origin.",
                                    "",
                                    "Parameters:",
                                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                                    "",
                                    "## Complexity",
                                    "O(P) where P is the number of max proposals"
                                ]
                            },
                            {
                                "name": "close",
                                "fields": [
                                    {
                                        "name": "proposal_hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    },
                                    {
                                        "name": "index",
                                        "type": 67,
                                        "typeName": "ProposalIndex"
                                    },
                                    {
                                        "name": "proposal_weight_bound",
                                        "type": 11,
                                        "typeName": "Weight"
                                    },
                                    {
                                        "name": "length_bound",
                                        "type": 67,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                                    "",
                                    "May be called by any signed account in order to finish voting and close the proposal.",
                                    "",
                                    "If called before the end of the voting period it will only close the vote if it is",
                                    "has enough votes to be approved or disapproved.",
                                    "",
                                    "If called after the end of the voting period abstentions are counted as rejections",
                                    "unless there is a prime member set and the prime member cast an approval.",
                                    "",
                                    "If the close operation completes successfully with disapproval, the transaction fee will",
                                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                                    "",
                                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                                    "proposal.",
                                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                                    "",
                                    "## Complexity",
                                    "- `O(B + M + P1 + P2)` where:",
                                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                                    "  - `M` is members-count (code- and governance-bounded)",
                                    "  - `P1` is the complexity of `proposal` preimage.",
                                    "  - `P2` is proposal-count (code-bounded)"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 157,
            "type": {
                "path": [
                    "pallet_membership",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "add_member",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Add a member `who` to the set.",
                                    "",
                                    "May only be called from `T::AddOrigin`."
                                ]
                            },
                            {
                                "name": "remove_member",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Remove a member `who` from the set.",
                                    "",
                                    "May only be called from `T::RemoveOrigin`."
                                ]
                            },
                            {
                                "name": "swap_member",
                                "fields": [
                                    {
                                        "name": "remove",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "add",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Swap out one member `remove` for another `add`.",
                                    "",
                                    "May only be called from `T::SwapOrigin`.",
                                    "",
                                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                                ]
                            },
                            {
                                "name": "reset_members",
                                "fields": [
                                    {
                                        "name": "members",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                                    "pass `members` pre-sorted.",
                                    "",
                                    "May only be called from `T::ResetOrigin`."
                                ]
                            },
                            {
                                "name": "change_key",
                                "fields": [
                                    {
                                        "name": "new",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Swap out the sending member for some other key `new`.",
                                    "",
                                    "May only be called from `Signed` origin of a current member.",
                                    "",
                                    "Prime membership is passed from the origin account to `new`, if extant."
                                ]
                            },
                            {
                                "name": "set_prime",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Set the prime member. Must be a current member.",
                                    "",
                                    "May only be called from `T::PrimeOrigin`."
                                ]
                            },
                            {
                                "name": "clear_prime",
                                "index": 6,
                                "docs": [
                                    "Remove the prime member if it exists.",
                                    "",
                                    "May only be called from `T::PrimeOrigin`."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 158,
            "type": {
                "path": [
                    "pallet_membership",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "add_member",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Add a member `who` to the set.",
                                    "",
                                    "May only be called from `T::AddOrigin`."
                                ]
                            },
                            {
                                "name": "remove_member",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Remove a member `who` from the set.",
                                    "",
                                    "May only be called from `T::RemoveOrigin`."
                                ]
                            },
                            {
                                "name": "swap_member",
                                "fields": [
                                    {
                                        "name": "remove",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "add",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Swap out one member `remove` for another `add`.",
                                    "",
                                    "May only be called from `T::SwapOrigin`.",
                                    "",
                                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                                ]
                            },
                            {
                                "name": "reset_members",
                                "fields": [
                                    {
                                        "name": "members",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                                    "pass `members` pre-sorted.",
                                    "",
                                    "May only be called from `T::ResetOrigin`."
                                ]
                            },
                            {
                                "name": "change_key",
                                "fields": [
                                    {
                                        "name": "new",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Swap out the sending member for some other key `new`.",
                                    "",
                                    "May only be called from `Signed` origin of a current member.",
                                    "",
                                    "Prime membership is passed from the origin account to `new`, if extant."
                                ]
                            },
                            {
                                "name": "set_prime",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Set the prime member. Must be a current member.",
                                    "",
                                    "May only be called from `T::PrimeOrigin`."
                                ]
                            },
                            {
                                "name": "clear_prime",
                                "index": 6,
                                "docs": [
                                    "Remove the prime member if it exists.",
                                    "",
                                    "May only be called from `T::PrimeOrigin`."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 159,
            "type": {
                "path": [
                    "pallet_utility",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "batch",
                                "fields": [
                                    {
                                        "name": "calls",
                                        "type": 160,
                                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Send a batch of dispatch calls.",
                                    "",
                                    "May be called from any origin except `None`.",
                                    "",
                                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                                    "",
                                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                                    "",
                                    "## Complexity",
                                    "- O(C) where C is the number of calls to be batched.",
                                    "",
                                    "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                                    "event is deposited. If a call failed and the batch was interrupted, then the",
                                    "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                                    "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                                    "event is deposited."
                                ]
                            },
                            {
                                "name": "as_derivative",
                                "fields": [
                                    {
                                        "name": "index",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Send a call through an indexed pseudonym of the sender.",
                                    "",
                                    "Filter from origin are passed along. The call will be dispatched with an origin which",
                                    "use the same filter as the origin of this call.",
                                    "",
                                    "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                                    "because you expect `proxy` to have been used prior in the call stack and you do not want",
                                    "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                                    "in the Multisig pallet instead.",
                                    "",
                                    "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_."
                                ]
                            },
                            {
                                "name": "batch_all",
                                "fields": [
                                    {
                                        "name": "calls",
                                        "type": 160,
                                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Send a batch of dispatch calls and atomically execute them.",
                                    "The whole transaction will rollback and fail if any of the calls failed.",
                                    "",
                                    "May be called from any origin except `None`.",
                                    "",
                                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                                    "",
                                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                                    "",
                                    "## Complexity",
                                    "- O(C) where C is the number of calls to be batched."
                                ]
                            },
                            {
                                "name": "dispatch_as",
                                "fields": [
                                    {
                                        "name": "as_origin",
                                        "type": 161,
                                        "typeName": "Box<T::PalletsOrigin>"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Dispatches a function call with a provided origin.",
                                    "",
                                    "The dispatch origin for this call must be _Root_.",
                                    "",
                                    "## Complexity",
                                    "- O(1)."
                                ]
                            },
                            {
                                "name": "force_batch",
                                "fields": [
                                    {
                                        "name": "calls",
                                        "type": 160,
                                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Send a batch of dispatch calls.",
                                    "Unlike `batch`, it allows errors and won't interrupt.",
                                    "",
                                    "May be called from any origin except `None`.",
                                    "",
                                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                                    "",
                                    "If origin is root then the calls are dispatch without checking origin filter. (This",
                                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                                    "",
                                    "## Complexity",
                                    "- O(C) where C is the number of calls to be batched."
                                ]
                            },
                            {
                                "name": "with_weight",
                                "fields": [
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    },
                                    {
                                        "name": "weight",
                                        "type": 11,
                                        "typeName": "Weight"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Dispatch a function call with a specified weight.",
                                    "",
                                    "This function does not check the weight of the call, and instead allows the",
                                    "Root origin to specify the weight of the call.",
                                    "",
                                    "The dispatch origin for this call must be _Root_."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 160,
            "type": {
                "def": {
                    "sequence": {
                        "type": 155
                    }
                }
            }
        },
        {
            "id": 161,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "OriginCaller"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "system",
                                "fields": [
                                    {
                                        "type": 162,
                                        "typeName": "frame_system::Origin<Runtime>"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Triumvirate",
                                "fields": [
                                    {
                                        "type": 163,
                                        "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>"
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "Void",
                                "fields": [
                                    {
                                        "type": 108,
                                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void"
                                    }
                                ],
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 162,
            "type": {
                "path": [
                    "frame_support",
                    "dispatch",
                    "RawOrigin"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Root",
                                "index": 0
                            },
                            {
                                "name": "Signed",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "AccountId"
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "None",
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 163,
            "type": {
                "path": [
                    "pallet_collective",
                    "RawOrigin"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Members",
                                "fields": [
                                    {
                                        "type": 4,
                                        "typeName": "MemberCount"
                                    },
                                    {
                                        "type": 4,
                                        "typeName": "MemberCount"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Member",
                                "fields": [
                                    {
                                        "type": 0,
                                        "typeName": "AccountId"
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "_Phantom",
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 164,
            "type": {
                "path": [
                    "pallet_sudo",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "sudo",
                                "fields": [
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Authenticates the sudo key and dispatches a function call with `Root` origin."
                                ]
                            },
                            {
                                "name": "sudo_unchecked_weight",
                                "fields": [
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    },
                                    {
                                        "name": "weight",
                                        "type": 11,
                                        "typeName": "Weight"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                    "This function does not check the weight of the call, and instead allows the",
                                    "Sudo user to specify the weight of the call.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_."
                                ]
                            },
                            {
                                "name": "set_key",
                                "fields": [
                                    {
                                        "name": "new",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                                    "key."
                                ]
                            },
                            {
                                "name": "sudo_as",
                                "fields": [
                                    {
                                        "name": "who",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                                    "a given account.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_."
                                ]
                            },
                            {
                                "name": "remove_key",
                                "index": 4,
                                "docs": [
                                    "Permanently removes the sudo key.",
                                    "",
                                    "**This cannot be un-done.**"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 165,
            "type": {
                "path": [
                    "pallet_multisig",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "as_multi_threshold_1",
                                "fields": [
                                    {
                                        "name": "other_signatories",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Immediately dispatch a multi-signature call using a single approval from the caller.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "- `other_signatories`: The accounts (other than the sender) who are part of the",
                                    "multi-signature, but do not participate in the approval process.",
                                    "- `call`: The call to be executed.",
                                    "",
                                    "Result is equivalent to the dispatched result.",
                                    "",
                                    "## Complexity",
                                    "O(Z + C) where Z is the length of the call and C its execution weight."
                                ]
                            },
                            {
                                "name": "as_multi",
                                "fields": [
                                    {
                                        "name": "threshold",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "other_signatories",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    },
                                    {
                                        "name": "maybe_timepoint",
                                        "type": 166,
                                        "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    },
                                    {
                                        "name": "max_weight",
                                        "type": 11,
                                        "typeName": "Weight"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Register approval for a dispatch to be made from a deterministic composite account if",
                                    "approved by a total of `threshold - 1` of `other_signatories`.",
                                    "",
                                    "If there are enough, then dispatch the call.",
                                    "",
                                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                                    "is cancelled.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                                    "dispatch. May not be empty.",
                                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                                    "transaction index) of the first approval transaction.",
                                    "- `call`: The call to be executed.",
                                    "",
                                    "NOTE: Unless this is the final approval, you will generally want to use",
                                    "`approve_as_multi` instead, since it only requires a hash of the call.",
                                    "",
                                    "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                                    "on success, result is `Ok` and the result from the interior call, if it was executed,",
                                    "may be found in the deposited `MultisigExecuted` event.",
                                    "",
                                    "## Complexity",
                                    "- `O(S + Z + Call)`.",
                                    "- Up to one balance-reserve or unreserve operation.",
                                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                    "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                                    "- One encode & hash, both of complexity `O(S)`.",
                                    "- Up to one binary search and insert (`O(logS + S)`).",
                                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                                    "- One event.",
                                    "- The weight of the `call`.",
                                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                                ]
                            },
                            {
                                "name": "approve_as_multi",
                                "fields": [
                                    {
                                        "name": "threshold",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "other_signatories",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    },
                                    {
                                        "name": "maybe_timepoint",
                                        "type": 166,
                                        "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 1,
                                        "typeName": "[u8; 32]"
                                    },
                                    {
                                        "name": "max_weight",
                                        "type": 11,
                                        "typeName": "Weight"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Register approval for a dispatch to be made from a deterministic composite account if",
                                    "approved by a total of `threshold - 1` of `other_signatories`.",
                                    "",
                                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                                    "is cancelled.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                                    "dispatch. May not be empty.",
                                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                                    "transaction index) of the first approval transaction.",
                                    "- `call_hash`: The hash of the call to be executed.",
                                    "",
                                    "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                                    "",
                                    "## Complexity",
                                    "- `O(S)`.",
                                    "- Up to one balance-reserve or unreserve operation.",
                                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                    "- One encode & hash, both of complexity `O(S)`.",
                                    "- Up to one binary search and insert (`O(logS + S)`).",
                                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                                    "- One event.",
                                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                                ]
                            },
                            {
                                "name": "cancel_as_multi",
                                "fields": [
                                    {
                                        "name": "threshold",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "other_signatories",
                                        "type": 132,
                                        "typeName": "Vec<T::AccountId>"
                                    },
                                    {
                                        "name": "timepoint",
                                        "type": 51,
                                        "typeName": "Timepoint<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 1,
                                        "typeName": "[u8; 32]"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                                    "for this operation will be unreserved on success.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                                    "dispatch. May not be empty.",
                                    "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                                    "transaction for this dispatch.",
                                    "- `call_hash`: The hash of the call to be executed.",
                                    "",
                                    "## Complexity",
                                    "- `O(S)`.",
                                    "- Up to one balance-reserve or unreserve operation.",
                                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                    "- One encode & hash, both of complexity `O(S)`.",
                                    "- One event.",
                                    "- I/O: 1 read `O(S)`, one remove.",
                                    "- Storage: removes one item."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 166,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 51
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 51
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 167,
            "type": {
                "path": [
                    "pallet_preimage",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "note_preimage",
                                "fields": [
                                    {
                                        "name": "bytes",
                                        "type": 14,
                                        "typeName": "Vec<u8>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Register a preimage on-chain.",
                                    "",
                                    "If the preimage was previously requested, no fees or deposits are taken for providing",
                                    "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                                ]
                            },
                            {
                                "name": "unnote_preimage",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Clear an unrequested preimage from the runtime storage.",
                                    "",
                                    "If `len` is provided, then it will be a much cheaper operation.",
                                    "",
                                    "- `hash`: The hash of the preimage to be removed from the store.",
                                    "- `len`: The length of the preimage of `hash`."
                                ]
                            },
                            {
                                "name": "request_preimage",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                                    "",
                                    "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                                    "a user may have paid, and take the control of the preimage out of their hands."
                                ]
                            },
                            {
                                "name": "unrequest_preimage",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "T::Hash"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Clear a previously made request for a preimage.",
                                    "",
                                    "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                                ]
                            },
                            {
                                "name": "ensure_updated",
                                "fields": [
                                    {
                                        "name": "hashes",
                                        "type": 64,
                                        "typeName": "Vec<T::Hash>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Ensure that the a bulk of pre-images is upgraded.",
                                    "",
                                    "The caller pays no fee if at least 90% of pre-images were successfully updated."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 168,
            "type": {
                "path": [
                    "pallet_scheduler",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "schedule",
                                "fields": [
                                    {
                                        "name": "when",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "maybe_periodic",
                                        "type": 169,
                                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "priority",
                                        "type": 2,
                                        "typeName": "schedule::Priority"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Anonymously schedule a task."
                                ]
                            },
                            {
                                "name": "cancel",
                                "fields": [
                                    {
                                        "name": "when",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "index",
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Cancel an anonymously scheduled task."
                                ]
                            },
                            {
                                "name": "schedule_named",
                                "fields": [
                                    {
                                        "name": "id",
                                        "type": 1,
                                        "typeName": "TaskName"
                                    },
                                    {
                                        "name": "when",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "maybe_periodic",
                                        "type": 169,
                                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "priority",
                                        "type": 2,
                                        "typeName": "schedule::Priority"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Schedule a named task."
                                ]
                            },
                            {
                                "name": "cancel_named",
                                "fields": [
                                    {
                                        "name": "id",
                                        "type": 1,
                                        "typeName": "TaskName"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "Cancel a named scheduled task."
                                ]
                            },
                            {
                                "name": "schedule_after",
                                "fields": [
                                    {
                                        "name": "after",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "maybe_periodic",
                                        "type": 169,
                                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "priority",
                                        "type": 2,
                                        "typeName": "schedule::Priority"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Anonymously schedule a task after a delay."
                                ]
                            },
                            {
                                "name": "schedule_named_after",
                                "fields": [
                                    {
                                        "name": "id",
                                        "type": 1,
                                        "typeName": "TaskName"
                                    },
                                    {
                                        "name": "after",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "maybe_periodic",
                                        "type": 169,
                                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                                    },
                                    {
                                        "name": "priority",
                                        "type": 2,
                                        "typeName": "schedule::Priority"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Schedule a named task after a delay."
                                ]
                            },
                            {
                                "name": "set_retry",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    },
                                    {
                                        "name": "retries",
                                        "type": 2,
                                        "typeName": "u8"
                                    },
                                    {
                                        "name": "period",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
                                    "be retried after `period` blocks, for a total amount of `retries` retries or until it",
                                    "succeeds.",
                                    "",
                                    "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                                    "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                                    "normally while the task is retrying.",
                                    "",
                                    "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                                    "clones of the original task. Their retry configuration will be derived from the",
                                    "original task's configuration, but will have a lower value for `remaining` than the",
                                    "original `total_retries`."
                                ]
                            },
                            {
                                "name": "set_retry_named",
                                "fields": [
                                    {
                                        "name": "id",
                                        "type": 1,
                                        "typeName": "TaskName"
                                    },
                                    {
                                        "name": "retries",
                                        "type": 2,
                                        "typeName": "u8"
                                    },
                                    {
                                        "name": "period",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
                                    "will be retried after `period` blocks, for a total amount of `retries` retries or until",
                                    "it succeeds.",
                                    "",
                                    "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                                    "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                                    "normally while the task is retrying.",
                                    "",
                                    "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                                    "clones of the original task. Their retry configuration will be derived from the",
                                    "original task's configuration, but will have a lower value for `remaining` than the",
                                    "original `total_retries`."
                                ]
                            },
                            {
                                "name": "cancel_retry",
                                "fields": [
                                    {
                                        "name": "task",
                                        "type": 54,
                                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "Removes the retry configuration of a task."
                                ]
                            },
                            {
                                "name": "cancel_retry_named",
                                "fields": [
                                    {
                                        "name": "id",
                                        "type": 1,
                                        "typeName": "TaskName"
                                    }
                                ],
                                "index": 9,
                                "docs": [
                                    "Cancel the retry configuration of a named task."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 169,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 54
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 54
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 170,
            "type": {
                "path": [
                    "pallet_proxy",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "proxy",
                                "fields": [
                                    {
                                        "name": "real",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "force_proxy_type",
                                        "type": 171,
                                        "typeName": "Option<T::ProxyType>"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Dispatch the given `call` from an account that the sender is authorised for through",
                                    "`add_proxy`.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "Parameters:",
                                    "- `real`: The account that the proxy will make a call on behalf of.",
                                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                                    "- `call`: The call to be made by the `real` account."
                                ]
                            },
                            {
                                "name": "add_proxy",
                                "fields": [
                                    {
                                        "name": "delegate",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "proxy_type",
                                        "type": 57,
                                        "typeName": "T::ProxyType"
                                    },
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Register a proxy account for the sender that is able to make calls on its behalf.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "Parameters:",
                                    "- `proxy`: The account that the `caller` would like to make a proxy.",
                                    "- `proxy_type`: The permissions allowed for this proxy account.",
                                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                                    "zero."
                                ]
                            },
                            {
                                "name": "remove_proxy",
                                "fields": [
                                    {
                                        "name": "delegate",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "proxy_type",
                                        "type": 57,
                                        "typeName": "T::ProxyType"
                                    },
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "Unregister a proxy account for the sender.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "Parameters:",
                                    "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                                    "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                                ]
                            },
                            {
                                "name": "remove_proxies",
                                "index": 3,
                                "docs": [
                                    "Unregister all proxy accounts for the sender.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "WARNING: This may be called on accounts created by `pure`, however if done, then",
                                    "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                                ]
                            },
                            {
                                "name": "create_pure",
                                "fields": [
                                    {
                                        "name": "proxy_type",
                                        "type": 57,
                                        "typeName": "T::ProxyType"
                                    },
                                    {
                                        "name": "delay",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "index",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                                    "initialize it with a proxy of `proxy_type` for `origin` sender.",
                                    "",
                                    "Requires a `Signed` origin.",
                                    "",
                                    "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                                    "new account. This will almost always be the most permissive `ProxyType` possible to",
                                    "allow for maximum flexibility.",
                                    "- `index`: A disambiguation index, in case this is called multiple times in the same",
                                    "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                                    "want to use `0`.",
                                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                                    "zero.",
                                    "",
                                    "Fails with `Duplicate` if this has already been called in this transaction, from the",
                                    "same sender, with the same parameters.",
                                    "",
                                    "Fails if there are insufficient funds to pay for deposit."
                                ]
                            },
                            {
                                "name": "kill_pure",
                                "fields": [
                                    {
                                        "name": "spawner",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "proxy_type",
                                        "type": 57,
                                        "typeName": "T::ProxyType"
                                    },
                                    {
                                        "name": "index",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "height",
                                        "type": 67,
                                        "typeName": "BlockNumberFor<T>"
                                    },
                                    {
                                        "name": "ext_index",
                                        "type": 67,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Removes a previously spawned pure proxy.",
                                    "",
                                    "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                                    "inaccessible.",
                                    "",
                                    "Requires a `Signed` origin, and the sender account must have been created by a call to",
                                    "`pure` with corresponding parameters.",
                                    "",
                                    "- `spawner`: The account that originally called `pure` to create this account.",
                                    "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                                    "- `proxy_type`: The proxy type originally passed to `pure`.",
                                    "- `height`: The height of the chain when the call to `pure` was processed.",
                                    "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                                    "",
                                    "Fails with `NoPermission` in case the caller is not a previously created pure",
                                    "account whose `pure` call has corresponding parameters."
                                ]
                            },
                            {
                                "name": "announce",
                                "fields": [
                                    {
                                        "name": "real",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 13,
                                        "typeName": "CallHashOf<T>"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "Publish the hash of a proxy-call that will be made in the future.",
                                    "",
                                    "This must be called some number of blocks before the corresponding `proxy` is attempted",
                                    "if the delay associated with the proxy relationship is greater than zero.",
                                    "",
                                    "No more than `MaxPending` announcements may be made at any one time.",
                                    "",
                                    "This will take a deposit of `AnnouncementDepositFactor` as well as",
                                    "`AnnouncementDepositBase` if there are no other pending announcements.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                                    "",
                                    "Parameters:",
                                    "- `real`: The account that the proxy will make a call on behalf of.",
                                    "- `call_hash`: The hash of the call to be made by the `real` account."
                                ]
                            },
                            {
                                "name": "remove_announcement",
                                "fields": [
                                    {
                                        "name": "real",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 13,
                                        "typeName": "CallHashOf<T>"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "Remove a given announcement.",
                                    "",
                                    "May be called by a proxy account to remove a call they previously announced and return",
                                    "the deposit.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "Parameters:",
                                    "- `real`: The account that the proxy will make a call on behalf of.",
                                    "- `call_hash`: The hash of the call to be made by the `real` account."
                                ]
                            },
                            {
                                "name": "reject_announcement",
                                "fields": [
                                    {
                                        "name": "delegate",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "call_hash",
                                        "type": 13,
                                        "typeName": "CallHashOf<T>"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "Remove the given announcement of a delegate.",
                                    "",
                                    "May be called by a target (proxied) account to remove a call that one of their delegates",
                                    "(`delegate`) has announced they want to execute. The deposit is returned.",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "Parameters:",
                                    "- `delegate`: The account that previously announced the call.",
                                    "- `call_hash`: The hash of the call to be made."
                                ]
                            },
                            {
                                "name": "proxy_announced",
                                "fields": [
                                    {
                                        "name": "delegate",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "real",
                                        "type": 129,
                                        "typeName": "AccountIdLookupOf<T>"
                                    },
                                    {
                                        "name": "force_proxy_type",
                                        "type": 171,
                                        "typeName": "Option<T::ProxyType>"
                                    },
                                    {
                                        "name": "call",
                                        "type": 155,
                                        "typeName": "Box<<T as Config>::RuntimeCall>"
                                    }
                                ],
                                "index": 9,
                                "docs": [
                                    "Dispatch the given `call` from an account that the sender is authorized for through",
                                    "`add_proxy`.",
                                    "",
                                    "Removes any corresponding announcement(s).",
                                    "",
                                    "The dispatch origin for this call must be _Signed_.",
                                    "",
                                    "Parameters:",
                                    "- `real`: The account that the proxy will make a call on behalf of.",
                                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                                    "- `call`: The call to be made by the `real` account."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 171,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 57
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 57
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 172,
            "type": {
                "path": [
                    "pallet_registry",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "set_identity",
                                "fields": [
                                    {
                                        "name": "identified",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "info",
                                        "type": 173,
                                        "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Register an identity for an account. This will overwrite any existing identity."
                                ]
                            },
                            {
                                "name": "clear_identity",
                                "fields": [
                                    {
                                        "name": "identified",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "Clear the identity of an account."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 173,
            "type": {
                "path": [
                    "pallet_registry",
                    "types",
                    "IdentityInfo"
                ],
                "params": [
                    {
                        "name": "FieldLimit",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "additional",
                                "type": 174,
                                "typeName": "BoundedVec<(Data, Data), FieldLimit>"
                            },
                            {
                                "name": "display",
                                "type": 176,
                                "typeName": "Data"
                            },
                            {
                                "name": "legal",
                                "type": 176,
                                "typeName": "Data"
                            },
                            {
                                "name": "web",
                                "type": 176,
                                "typeName": "Data"
                            },
                            {
                                "name": "riot",
                                "type": 176,
                                "typeName": "Data"
                            },
                            {
                                "name": "email",
                                "type": 176,
                                "typeName": "Data"
                            },
                            {
                                "name": "pgp_fingerprint",
                                "type": 238,
                                "typeName": "Option<[u8; 20]>"
                            },
                            {
                                "name": "image",
                                "type": 176,
                                "typeName": "Data"
                            },
                            {
                                "name": "twitter",
                                "type": 176,
                                "typeName": "Data"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 174,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 175
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 237,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 175,
            "type": {
                "def": {
                    "tuple": [
                        176,
                        176
                    ]
                }
            }
        },
        {
            "id": 176,
            "type": {
                "path": [
                    "pallet_registry",
                    "types",
                    "Data"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Raw0",
                                "fields": [
                                    {
                                        "type": 177
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "Raw1",
                                "fields": [
                                    {
                                        "type": 178
                                    }
                                ],
                                "index": 2
                            },
                            {
                                "name": "Raw2",
                                "fields": [
                                    {
                                        "type": 179
                                    }
                                ],
                                "index": 3
                            },
                            {
                                "name": "Raw3",
                                "fields": [
                                    {
                                        "type": 180
                                    }
                                ],
                                "index": 4
                            },
                            {
                                "name": "Raw4",
                                "fields": [
                                    {
                                        "type": 18
                                    }
                                ],
                                "index": 5
                            },
                            {
                                "name": "Raw5",
                                "fields": [
                                    {
                                        "type": 181
                                    }
                                ],
                                "index": 6
                            },
                            {
                                "name": "Raw6",
                                "fields": [
                                    {
                                        "type": 182
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "Raw7",
                                "fields": [
                                    {
                                        "type": 183
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "Raw8",
                                "fields": [
                                    {
                                        "type": 85
                                    }
                                ],
                                "index": 9
                            },
                            {
                                "name": "Raw9",
                                "fields": [
                                    {
                                        "type": 184
                                    }
                                ],
                                "index": 10
                            },
                            {
                                "name": "Raw10",
                                "fields": [
                                    {
                                        "type": 185
                                    }
                                ],
                                "index": 11
                            },
                            {
                                "name": "Raw11",
                                "fields": [
                                    {
                                        "type": 186
                                    }
                                ],
                                "index": 12
                            },
                            {
                                "name": "Raw12",
                                "fields": [
                                    {
                                        "type": 187
                                    }
                                ],
                                "index": 13
                            },
                            {
                                "name": "Raw13",
                                "fields": [
                                    {
                                        "type": 188
                                    }
                                ],
                                "index": 14
                            },
                            {
                                "name": "Raw14",
                                "fields": [
                                    {
                                        "type": 189
                                    }
                                ],
                                "index": 15
                            },
                            {
                                "name": "Raw15",
                                "fields": [
                                    {
                                        "type": 190
                                    }
                                ],
                                "index": 16
                            },
                            {
                                "name": "Raw16",
                                "fields": [
                                    {
                                        "type": 191
                                    }
                                ],
                                "index": 17
                            },
                            {
                                "name": "Raw17",
                                "fields": [
                                    {
                                        "type": 192
                                    }
                                ],
                                "index": 18
                            },
                            {
                                "name": "Raw18",
                                "fields": [
                                    {
                                        "type": 193
                                    }
                                ],
                                "index": 19
                            },
                            {
                                "name": "Raw19",
                                "fields": [
                                    {
                                        "type": 194
                                    }
                                ],
                                "index": 20
                            },
                            {
                                "name": "Raw20",
                                "fields": [
                                    {
                                        "type": 131
                                    }
                                ],
                                "index": 21
                            },
                            {
                                "name": "Raw21",
                                "fields": [
                                    {
                                        "type": 195
                                    }
                                ],
                                "index": 22
                            },
                            {
                                "name": "Raw22",
                                "fields": [
                                    {
                                        "type": 196
                                    }
                                ],
                                "index": 23
                            },
                            {
                                "name": "Raw23",
                                "fields": [
                                    {
                                        "type": 197
                                    }
                                ],
                                "index": 24
                            },
                            {
                                "name": "Raw24",
                                "fields": [
                                    {
                                        "type": 198
                                    }
                                ],
                                "index": 25
                            },
                            {
                                "name": "Raw25",
                                "fields": [
                                    {
                                        "type": 199
                                    }
                                ],
                                "index": 26
                            },
                            {
                                "name": "Raw26",
                                "fields": [
                                    {
                                        "type": 200
                                    }
                                ],
                                "index": 27
                            },
                            {
                                "name": "Raw27",
                                "fields": [
                                    {
                                        "type": 201
                                    }
                                ],
                                "index": 28
                            },
                            {
                                "name": "Raw28",
                                "fields": [
                                    {
                                        "type": 202
                                    }
                                ],
                                "index": 29
                            },
                            {
                                "name": "Raw29",
                                "fields": [
                                    {
                                        "type": 203
                                    }
                                ],
                                "index": 30
                            },
                            {
                                "name": "Raw30",
                                "fields": [
                                    {
                                        "type": 204
                                    }
                                ],
                                "index": 31
                            },
                            {
                                "name": "Raw31",
                                "fields": [
                                    {
                                        "type": 205
                                    }
                                ],
                                "index": 32
                            },
                            {
                                "name": "Raw32",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 33
                            },
                            {
                                "name": "Raw33",
                                "fields": [
                                    {
                                        "type": 206
                                    }
                                ],
                                "index": 34
                            },
                            {
                                "name": "Raw34",
                                "fields": [
                                    {
                                        "type": 207
                                    }
                                ],
                                "index": 35
                            },
                            {
                                "name": "Raw35",
                                "fields": [
                                    {
                                        "type": 208
                                    }
                                ],
                                "index": 36
                            },
                            {
                                "name": "Raw36",
                                "fields": [
                                    {
                                        "type": 209
                                    }
                                ],
                                "index": 37
                            },
                            {
                                "name": "Raw37",
                                "fields": [
                                    {
                                        "type": 210
                                    }
                                ],
                                "index": 38
                            },
                            {
                                "name": "Raw38",
                                "fields": [
                                    {
                                        "type": 211
                                    }
                                ],
                                "index": 39
                            },
                            {
                                "name": "Raw39",
                                "fields": [
                                    {
                                        "type": 212
                                    }
                                ],
                                "index": 40
                            },
                            {
                                "name": "Raw40",
                                "fields": [
                                    {
                                        "type": 213
                                    }
                                ],
                                "index": 41
                            },
                            {
                                "name": "Raw41",
                                "fields": [
                                    {
                                        "type": 214
                                    }
                                ],
                                "index": 42
                            },
                            {
                                "name": "Raw42",
                                "fields": [
                                    {
                                        "type": 215
                                    }
                                ],
                                "index": 43
                            },
                            {
                                "name": "Raw43",
                                "fields": [
                                    {
                                        "type": 216
                                    }
                                ],
                                "index": 44
                            },
                            {
                                "name": "Raw44",
                                "fields": [
                                    {
                                        "type": 217
                                    }
                                ],
                                "index": 45
                            },
                            {
                                "name": "Raw45",
                                "fields": [
                                    {
                                        "type": 218
                                    }
                                ],
                                "index": 46
                            },
                            {
                                "name": "Raw46",
                                "fields": [
                                    {
                                        "type": 219
                                    }
                                ],
                                "index": 47
                            },
                            {
                                "name": "Raw47",
                                "fields": [
                                    {
                                        "type": 220
                                    }
                                ],
                                "index": 48
                            },
                            {
                                "name": "Raw48",
                                "fields": [
                                    {
                                        "type": 221
                                    }
                                ],
                                "index": 49
                            },
                            {
                                "name": "Raw49",
                                "fields": [
                                    {
                                        "type": 222
                                    }
                                ],
                                "index": 50
                            },
                            {
                                "name": "Raw50",
                                "fields": [
                                    {
                                        "type": 223
                                    }
                                ],
                                "index": 51
                            },
                            {
                                "name": "Raw51",
                                "fields": [
                                    {
                                        "type": 224
                                    }
                                ],
                                "index": 52
                            },
                            {
                                "name": "Raw52",
                                "fields": [
                                    {
                                        "type": 225
                                    }
                                ],
                                "index": 53
                            },
                            {
                                "name": "Raw53",
                                "fields": [
                                    {
                                        "type": 226
                                    }
                                ],
                                "index": 54
                            },
                            {
                                "name": "Raw54",
                                "fields": [
                                    {
                                        "type": 227
                                    }
                                ],
                                "index": 55
                            },
                            {
                                "name": "Raw55",
                                "fields": [
                                    {
                                        "type": 228
                                    }
                                ],
                                "index": 56
                            },
                            {
                                "name": "Raw56",
                                "fields": [
                                    {
                                        "type": 229
                                    }
                                ],
                                "index": 57
                            },
                            {
                                "name": "Raw57",
                                "fields": [
                                    {
                                        "type": 230
                                    }
                                ],
                                "index": 58
                            },
                            {
                                "name": "Raw58",
                                "fields": [
                                    {
                                        "type": 231
                                    }
                                ],
                                "index": 59
                            },
                            {
                                "name": "Raw59",
                                "fields": [
                                    {
                                        "type": 232
                                    }
                                ],
                                "index": 60
                            },
                            {
                                "name": "Raw60",
                                "fields": [
                                    {
                                        "type": 233
                                    }
                                ],
                                "index": 61
                            },
                            {
                                "name": "Raw61",
                                "fields": [
                                    {
                                        "type": 234
                                    }
                                ],
                                "index": 62
                            },
                            {
                                "name": "Raw62",
                                "fields": [
                                    {
                                        "type": 235
                                    }
                                ],
                                "index": 63
                            },
                            {
                                "name": "Raw63",
                                "fields": [
                                    {
                                        "type": 236
                                    }
                                ],
                                "index": 64
                            },
                            {
                                "name": "Raw64",
                                "fields": [
                                    {
                                        "type": 103
                                    }
                                ],
                                "index": 65
                            },
                            {
                                "name": "BlakeTwo256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 66
                            },
                            {
                                "name": "Sha256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 67
                            },
                            {
                                "name": "Keccak256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 68
                            },
                            {
                                "name": "ShaThree256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 69
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 177,
            "type": {
                "def": {
                    "array": {
                        "len": 0,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 178,
            "type": {
                "def": {
                    "array": {
                        "len": 1,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 179,
            "type": {
                "def": {
                    "array": {
                        "len": 2,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 180,
            "type": {
                "def": {
                    "array": {
                        "len": 3,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 181,
            "type": {
                "def": {
                    "array": {
                        "len": 5,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 182,
            "type": {
                "def": {
                    "array": {
                        "len": 6,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 183,
            "type": {
                "def": {
                    "array": {
                        "len": 7,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 184,
            "type": {
                "def": {
                    "array": {
                        "len": 9,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 185,
            "type": {
                "def": {
                    "array": {
                        "len": 10,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 186,
            "type": {
                "def": {
                    "array": {
                        "len": 11,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 187,
            "type": {
                "def": {
                    "array": {
                        "len": 12,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 188,
            "type": {
                "def": {
                    "array": {
                        "len": 13,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 189,
            "type": {
                "def": {
                    "array": {
                        "len": 14,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 190,
            "type": {
                "def": {
                    "array": {
                        "len": 15,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 191,
            "type": {
                "def": {
                    "array": {
                        "len": 16,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 192,
            "type": {
                "def": {
                    "array": {
                        "len": 17,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 193,
            "type": {
                "def": {
                    "array": {
                        "len": 18,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 194,
            "type": {
                "def": {
                    "array": {
                        "len": 19,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 195,
            "type": {
                "def": {
                    "array": {
                        "len": 21,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 196,
            "type": {
                "def": {
                    "array": {
                        "len": 22,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 197,
            "type": {
                "def": {
                    "array": {
                        "len": 23,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 198,
            "type": {
                "def": {
                    "array": {
                        "len": 24,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 199,
            "type": {
                "def": {
                    "array": {
                        "len": 25,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 200,
            "type": {
                "def": {
                    "array": {
                        "len": 26,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 201,
            "type": {
                "def": {
                    "array": {
                        "len": 27,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 202,
            "type": {
                "def": {
                    "array": {
                        "len": 28,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 203,
            "type": {
                "def": {
                    "array": {
                        "len": 29,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 204,
            "type": {
                "def": {
                    "array": {
                        "len": 30,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 205,
            "type": {
                "def": {
                    "array": {
                        "len": 31,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 206,
            "type": {
                "def": {
                    "array": {
                        "len": 33,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 207,
            "type": {
                "def": {
                    "array": {
                        "len": 34,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 208,
            "type": {
                "def": {
                    "array": {
                        "len": 35,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 209,
            "type": {
                "def": {
                    "array": {
                        "len": 36,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 210,
            "type": {
                "def": {
                    "array": {
                        "len": 37,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 211,
            "type": {
                "def": {
                    "array": {
                        "len": 38,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 212,
            "type": {
                "def": {
                    "array": {
                        "len": 39,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 213,
            "type": {
                "def": {
                    "array": {
                        "len": 40,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 214,
            "type": {
                "def": {
                    "array": {
                        "len": 41,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 215,
            "type": {
                "def": {
                    "array": {
                        "len": 42,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 216,
            "type": {
                "def": {
                    "array": {
                        "len": 43,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 217,
            "type": {
                "def": {
                    "array": {
                        "len": 44,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 218,
            "type": {
                "def": {
                    "array": {
                        "len": 45,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 219,
            "type": {
                "def": {
                    "array": {
                        "len": 46,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 220,
            "type": {
                "def": {
                    "array": {
                        "len": 47,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 221,
            "type": {
                "def": {
                    "array": {
                        "len": 48,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 222,
            "type": {
                "def": {
                    "array": {
                        "len": 49,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 223,
            "type": {
                "def": {
                    "array": {
                        "len": 50,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 224,
            "type": {
                "def": {
                    "array": {
                        "len": 51,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 225,
            "type": {
                "def": {
                    "array": {
                        "len": 52,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 226,
            "type": {
                "def": {
                    "array": {
                        "len": 53,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 227,
            "type": {
                "def": {
                    "array": {
                        "len": 54,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 228,
            "type": {
                "def": {
                    "array": {
                        "len": 55,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 229,
            "type": {
                "def": {
                    "array": {
                        "len": 56,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 230,
            "type": {
                "def": {
                    "array": {
                        "len": 57,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 231,
            "type": {
                "def": {
                    "array": {
                        "len": 58,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 232,
            "type": {
                "def": {
                    "array": {
                        "len": 59,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 233,
            "type": {
                "def": {
                    "array": {
                        "len": 60,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 234,
            "type": {
                "def": {
                    "array": {
                        "len": 61,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 235,
            "type": {
                "def": {
                    "array": {
                        "len": 62,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 236,
            "type": {
                "def": {
                    "array": {
                        "len": 63,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 237,
            "type": {
                "def": {
                    "sequence": {
                        "type": 175
                    }
                }
            }
        },
        {
            "id": 238,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 131
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 131
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 239,
            "type": {
                "path": [
                    "pallet_commitments",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "set_commitment",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "info",
                                        "type": 240,
                                        "typeName": "Box<CommitmentInfo<T::MaxFields>>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "Set the commitment for a given netuid"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 240,
            "type": {
                "path": [
                    "pallet_commitments",
                    "types",
                    "CommitmentInfo"
                ],
                "params": [
                    {
                        "name": "FieldLimit",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "fields",
                                "type": 241,
                                "typeName": "BoundedVec<Data, FieldLimit>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 241,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 242
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 307,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 242,
            "type": {
                "path": [
                    "pallet_commitments",
                    "types",
                    "Data"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Raw0",
                                "fields": [
                                    {
                                        "type": 177
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "Raw1",
                                "fields": [
                                    {
                                        "type": 178
                                    }
                                ],
                                "index": 2
                            },
                            {
                                "name": "Raw2",
                                "fields": [
                                    {
                                        "type": 179
                                    }
                                ],
                                "index": 3
                            },
                            {
                                "name": "Raw3",
                                "fields": [
                                    {
                                        "type": 180
                                    }
                                ],
                                "index": 4
                            },
                            {
                                "name": "Raw4",
                                "fields": [
                                    {
                                        "type": 18
                                    }
                                ],
                                "index": 5
                            },
                            {
                                "name": "Raw5",
                                "fields": [
                                    {
                                        "type": 181
                                    }
                                ],
                                "index": 6
                            },
                            {
                                "name": "Raw6",
                                "fields": [
                                    {
                                        "type": 182
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "Raw7",
                                "fields": [
                                    {
                                        "type": 183
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "Raw8",
                                "fields": [
                                    {
                                        "type": 85
                                    }
                                ],
                                "index": 9
                            },
                            {
                                "name": "Raw9",
                                "fields": [
                                    {
                                        "type": 184
                                    }
                                ],
                                "index": 10
                            },
                            {
                                "name": "Raw10",
                                "fields": [
                                    {
                                        "type": 185
                                    }
                                ],
                                "index": 11
                            },
                            {
                                "name": "Raw11",
                                "fields": [
                                    {
                                        "type": 186
                                    }
                                ],
                                "index": 12
                            },
                            {
                                "name": "Raw12",
                                "fields": [
                                    {
                                        "type": 187
                                    }
                                ],
                                "index": 13
                            },
                            {
                                "name": "Raw13",
                                "fields": [
                                    {
                                        "type": 188
                                    }
                                ],
                                "index": 14
                            },
                            {
                                "name": "Raw14",
                                "fields": [
                                    {
                                        "type": 189
                                    }
                                ],
                                "index": 15
                            },
                            {
                                "name": "Raw15",
                                "fields": [
                                    {
                                        "type": 190
                                    }
                                ],
                                "index": 16
                            },
                            {
                                "name": "Raw16",
                                "fields": [
                                    {
                                        "type": 191
                                    }
                                ],
                                "index": 17
                            },
                            {
                                "name": "Raw17",
                                "fields": [
                                    {
                                        "type": 192
                                    }
                                ],
                                "index": 18
                            },
                            {
                                "name": "Raw18",
                                "fields": [
                                    {
                                        "type": 193
                                    }
                                ],
                                "index": 19
                            },
                            {
                                "name": "Raw19",
                                "fields": [
                                    {
                                        "type": 194
                                    }
                                ],
                                "index": 20
                            },
                            {
                                "name": "Raw20",
                                "fields": [
                                    {
                                        "type": 131
                                    }
                                ],
                                "index": 21
                            },
                            {
                                "name": "Raw21",
                                "fields": [
                                    {
                                        "type": 195
                                    }
                                ],
                                "index": 22
                            },
                            {
                                "name": "Raw22",
                                "fields": [
                                    {
                                        "type": 196
                                    }
                                ],
                                "index": 23
                            },
                            {
                                "name": "Raw23",
                                "fields": [
                                    {
                                        "type": 197
                                    }
                                ],
                                "index": 24
                            },
                            {
                                "name": "Raw24",
                                "fields": [
                                    {
                                        "type": 198
                                    }
                                ],
                                "index": 25
                            },
                            {
                                "name": "Raw25",
                                "fields": [
                                    {
                                        "type": 199
                                    }
                                ],
                                "index": 26
                            },
                            {
                                "name": "Raw26",
                                "fields": [
                                    {
                                        "type": 200
                                    }
                                ],
                                "index": 27
                            },
                            {
                                "name": "Raw27",
                                "fields": [
                                    {
                                        "type": 201
                                    }
                                ],
                                "index": 28
                            },
                            {
                                "name": "Raw28",
                                "fields": [
                                    {
                                        "type": 202
                                    }
                                ],
                                "index": 29
                            },
                            {
                                "name": "Raw29",
                                "fields": [
                                    {
                                        "type": 203
                                    }
                                ],
                                "index": 30
                            },
                            {
                                "name": "Raw30",
                                "fields": [
                                    {
                                        "type": 204
                                    }
                                ],
                                "index": 31
                            },
                            {
                                "name": "Raw31",
                                "fields": [
                                    {
                                        "type": 205
                                    }
                                ],
                                "index": 32
                            },
                            {
                                "name": "Raw32",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 33
                            },
                            {
                                "name": "Raw33",
                                "fields": [
                                    {
                                        "type": 206
                                    }
                                ],
                                "index": 34
                            },
                            {
                                "name": "Raw34",
                                "fields": [
                                    {
                                        "type": 207
                                    }
                                ],
                                "index": 35
                            },
                            {
                                "name": "Raw35",
                                "fields": [
                                    {
                                        "type": 208
                                    }
                                ],
                                "index": 36
                            },
                            {
                                "name": "Raw36",
                                "fields": [
                                    {
                                        "type": 209
                                    }
                                ],
                                "index": 37
                            },
                            {
                                "name": "Raw37",
                                "fields": [
                                    {
                                        "type": 210
                                    }
                                ],
                                "index": 38
                            },
                            {
                                "name": "Raw38",
                                "fields": [
                                    {
                                        "type": 211
                                    }
                                ],
                                "index": 39
                            },
                            {
                                "name": "Raw39",
                                "fields": [
                                    {
                                        "type": 212
                                    }
                                ],
                                "index": 40
                            },
                            {
                                "name": "Raw40",
                                "fields": [
                                    {
                                        "type": 213
                                    }
                                ],
                                "index": 41
                            },
                            {
                                "name": "Raw41",
                                "fields": [
                                    {
                                        "type": 214
                                    }
                                ],
                                "index": 42
                            },
                            {
                                "name": "Raw42",
                                "fields": [
                                    {
                                        "type": 215
                                    }
                                ],
                                "index": 43
                            },
                            {
                                "name": "Raw43",
                                "fields": [
                                    {
                                        "type": 216
                                    }
                                ],
                                "index": 44
                            },
                            {
                                "name": "Raw44",
                                "fields": [
                                    {
                                        "type": 217
                                    }
                                ],
                                "index": 45
                            },
                            {
                                "name": "Raw45",
                                "fields": [
                                    {
                                        "type": 218
                                    }
                                ],
                                "index": 46
                            },
                            {
                                "name": "Raw46",
                                "fields": [
                                    {
                                        "type": 219
                                    }
                                ],
                                "index": 47
                            },
                            {
                                "name": "Raw47",
                                "fields": [
                                    {
                                        "type": 220
                                    }
                                ],
                                "index": 48
                            },
                            {
                                "name": "Raw48",
                                "fields": [
                                    {
                                        "type": 221
                                    }
                                ],
                                "index": 49
                            },
                            {
                                "name": "Raw49",
                                "fields": [
                                    {
                                        "type": 222
                                    }
                                ],
                                "index": 50
                            },
                            {
                                "name": "Raw50",
                                "fields": [
                                    {
                                        "type": 223
                                    }
                                ],
                                "index": 51
                            },
                            {
                                "name": "Raw51",
                                "fields": [
                                    {
                                        "type": 224
                                    }
                                ],
                                "index": 52
                            },
                            {
                                "name": "Raw52",
                                "fields": [
                                    {
                                        "type": 225
                                    }
                                ],
                                "index": 53
                            },
                            {
                                "name": "Raw53",
                                "fields": [
                                    {
                                        "type": 226
                                    }
                                ],
                                "index": 54
                            },
                            {
                                "name": "Raw54",
                                "fields": [
                                    {
                                        "type": 227
                                    }
                                ],
                                "index": 55
                            },
                            {
                                "name": "Raw55",
                                "fields": [
                                    {
                                        "type": 228
                                    }
                                ],
                                "index": 56
                            },
                            {
                                "name": "Raw56",
                                "fields": [
                                    {
                                        "type": 229
                                    }
                                ],
                                "index": 57
                            },
                            {
                                "name": "Raw57",
                                "fields": [
                                    {
                                        "type": 230
                                    }
                                ],
                                "index": 58
                            },
                            {
                                "name": "Raw58",
                                "fields": [
                                    {
                                        "type": 231
                                    }
                                ],
                                "index": 59
                            },
                            {
                                "name": "Raw59",
                                "fields": [
                                    {
                                        "type": 232
                                    }
                                ],
                                "index": 60
                            },
                            {
                                "name": "Raw60",
                                "fields": [
                                    {
                                        "type": 233
                                    }
                                ],
                                "index": 61
                            },
                            {
                                "name": "Raw61",
                                "fields": [
                                    {
                                        "type": 234
                                    }
                                ],
                                "index": 62
                            },
                            {
                                "name": "Raw62",
                                "fields": [
                                    {
                                        "type": 235
                                    }
                                ],
                                "index": 63
                            },
                            {
                                "name": "Raw63",
                                "fields": [
                                    {
                                        "type": 236
                                    }
                                ],
                                "index": 64
                            },
                            {
                                "name": "Raw64",
                                "fields": [
                                    {
                                        "type": 103
                                    }
                                ],
                                "index": 65
                            },
                            {
                                "name": "Raw65",
                                "fields": [
                                    {
                                        "type": 243
                                    }
                                ],
                                "index": 66
                            },
                            {
                                "name": "Raw66",
                                "fields": [
                                    {
                                        "type": 244
                                    }
                                ],
                                "index": 67
                            },
                            {
                                "name": "Raw67",
                                "fields": [
                                    {
                                        "type": 245
                                    }
                                ],
                                "index": 68
                            },
                            {
                                "name": "Raw68",
                                "fields": [
                                    {
                                        "type": 246
                                    }
                                ],
                                "index": 69
                            },
                            {
                                "name": "Raw69",
                                "fields": [
                                    {
                                        "type": 247
                                    }
                                ],
                                "index": 70
                            },
                            {
                                "name": "Raw70",
                                "fields": [
                                    {
                                        "type": 248
                                    }
                                ],
                                "index": 71
                            },
                            {
                                "name": "Raw71",
                                "fields": [
                                    {
                                        "type": 249
                                    }
                                ],
                                "index": 72
                            },
                            {
                                "name": "Raw72",
                                "fields": [
                                    {
                                        "type": 250
                                    }
                                ],
                                "index": 73
                            },
                            {
                                "name": "Raw73",
                                "fields": [
                                    {
                                        "type": 251
                                    }
                                ],
                                "index": 74
                            },
                            {
                                "name": "Raw74",
                                "fields": [
                                    {
                                        "type": 252
                                    }
                                ],
                                "index": 75
                            },
                            {
                                "name": "Raw75",
                                "fields": [
                                    {
                                        "type": 253
                                    }
                                ],
                                "index": 76
                            },
                            {
                                "name": "Raw76",
                                "fields": [
                                    {
                                        "type": 254
                                    }
                                ],
                                "index": 77
                            },
                            {
                                "name": "Raw77",
                                "fields": [
                                    {
                                        "type": 255
                                    }
                                ],
                                "index": 78
                            },
                            {
                                "name": "Raw78",
                                "fields": [
                                    {
                                        "type": 256
                                    }
                                ],
                                "index": 79
                            },
                            {
                                "name": "Raw79",
                                "fields": [
                                    {
                                        "type": 257
                                    }
                                ],
                                "index": 80
                            },
                            {
                                "name": "Raw80",
                                "fields": [
                                    {
                                        "type": 258
                                    }
                                ],
                                "index": 81
                            },
                            {
                                "name": "Raw81",
                                "fields": [
                                    {
                                        "type": 259
                                    }
                                ],
                                "index": 82
                            },
                            {
                                "name": "Raw82",
                                "fields": [
                                    {
                                        "type": 260
                                    }
                                ],
                                "index": 83
                            },
                            {
                                "name": "Raw83",
                                "fields": [
                                    {
                                        "type": 261
                                    }
                                ],
                                "index": 84
                            },
                            {
                                "name": "Raw84",
                                "fields": [
                                    {
                                        "type": 262
                                    }
                                ],
                                "index": 85
                            },
                            {
                                "name": "Raw85",
                                "fields": [
                                    {
                                        "type": 263
                                    }
                                ],
                                "index": 86
                            },
                            {
                                "name": "Raw86",
                                "fields": [
                                    {
                                        "type": 264
                                    }
                                ],
                                "index": 87
                            },
                            {
                                "name": "Raw87",
                                "fields": [
                                    {
                                        "type": 265
                                    }
                                ],
                                "index": 88
                            },
                            {
                                "name": "Raw88",
                                "fields": [
                                    {
                                        "type": 266
                                    }
                                ],
                                "index": 89
                            },
                            {
                                "name": "Raw89",
                                "fields": [
                                    {
                                        "type": 267
                                    }
                                ],
                                "index": 90
                            },
                            {
                                "name": "Raw90",
                                "fields": [
                                    {
                                        "type": 268
                                    }
                                ],
                                "index": 91
                            },
                            {
                                "name": "Raw91",
                                "fields": [
                                    {
                                        "type": 269
                                    }
                                ],
                                "index": 92
                            },
                            {
                                "name": "Raw92",
                                "fields": [
                                    {
                                        "type": 270
                                    }
                                ],
                                "index": 93
                            },
                            {
                                "name": "Raw93",
                                "fields": [
                                    {
                                        "type": 271
                                    }
                                ],
                                "index": 94
                            },
                            {
                                "name": "Raw94",
                                "fields": [
                                    {
                                        "type": 272
                                    }
                                ],
                                "index": 95
                            },
                            {
                                "name": "Raw95",
                                "fields": [
                                    {
                                        "type": 273
                                    }
                                ],
                                "index": 96
                            },
                            {
                                "name": "Raw96",
                                "fields": [
                                    {
                                        "type": 274
                                    }
                                ],
                                "index": 97
                            },
                            {
                                "name": "Raw97",
                                "fields": [
                                    {
                                        "type": 275
                                    }
                                ],
                                "index": 98
                            },
                            {
                                "name": "Raw98",
                                "fields": [
                                    {
                                        "type": 276
                                    }
                                ],
                                "index": 99
                            },
                            {
                                "name": "Raw99",
                                "fields": [
                                    {
                                        "type": 277
                                    }
                                ],
                                "index": 100
                            },
                            {
                                "name": "Raw100",
                                "fields": [
                                    {
                                        "type": 278
                                    }
                                ],
                                "index": 101
                            },
                            {
                                "name": "Raw101",
                                "fields": [
                                    {
                                        "type": 279
                                    }
                                ],
                                "index": 102
                            },
                            {
                                "name": "Raw102",
                                "fields": [
                                    {
                                        "type": 280
                                    }
                                ],
                                "index": 103
                            },
                            {
                                "name": "Raw103",
                                "fields": [
                                    {
                                        "type": 281
                                    }
                                ],
                                "index": 104
                            },
                            {
                                "name": "Raw104",
                                "fields": [
                                    {
                                        "type": 282
                                    }
                                ],
                                "index": 105
                            },
                            {
                                "name": "Raw105",
                                "fields": [
                                    {
                                        "type": 283
                                    }
                                ],
                                "index": 106
                            },
                            {
                                "name": "Raw106",
                                "fields": [
                                    {
                                        "type": 284
                                    }
                                ],
                                "index": 107
                            },
                            {
                                "name": "Raw107",
                                "fields": [
                                    {
                                        "type": 285
                                    }
                                ],
                                "index": 108
                            },
                            {
                                "name": "Raw108",
                                "fields": [
                                    {
                                        "type": 286
                                    }
                                ],
                                "index": 109
                            },
                            {
                                "name": "Raw109",
                                "fields": [
                                    {
                                        "type": 287
                                    }
                                ],
                                "index": 110
                            },
                            {
                                "name": "Raw110",
                                "fields": [
                                    {
                                        "type": 288
                                    }
                                ],
                                "index": 111
                            },
                            {
                                "name": "Raw111",
                                "fields": [
                                    {
                                        "type": 289
                                    }
                                ],
                                "index": 112
                            },
                            {
                                "name": "Raw112",
                                "fields": [
                                    {
                                        "type": 290
                                    }
                                ],
                                "index": 113
                            },
                            {
                                "name": "Raw113",
                                "fields": [
                                    {
                                        "type": 291
                                    }
                                ],
                                "index": 114
                            },
                            {
                                "name": "Raw114",
                                "fields": [
                                    {
                                        "type": 292
                                    }
                                ],
                                "index": 115
                            },
                            {
                                "name": "Raw115",
                                "fields": [
                                    {
                                        "type": 293
                                    }
                                ],
                                "index": 116
                            },
                            {
                                "name": "Raw116",
                                "fields": [
                                    {
                                        "type": 294
                                    }
                                ],
                                "index": 117
                            },
                            {
                                "name": "Raw117",
                                "fields": [
                                    {
                                        "type": 295
                                    }
                                ],
                                "index": 118
                            },
                            {
                                "name": "Raw118",
                                "fields": [
                                    {
                                        "type": 296
                                    }
                                ],
                                "index": 119
                            },
                            {
                                "name": "Raw119",
                                "fields": [
                                    {
                                        "type": 297
                                    }
                                ],
                                "index": 120
                            },
                            {
                                "name": "Raw120",
                                "fields": [
                                    {
                                        "type": 298
                                    }
                                ],
                                "index": 121
                            },
                            {
                                "name": "Raw121",
                                "fields": [
                                    {
                                        "type": 299
                                    }
                                ],
                                "index": 122
                            },
                            {
                                "name": "Raw122",
                                "fields": [
                                    {
                                        "type": 300
                                    }
                                ],
                                "index": 123
                            },
                            {
                                "name": "Raw123",
                                "fields": [
                                    {
                                        "type": 301
                                    }
                                ],
                                "index": 124
                            },
                            {
                                "name": "Raw124",
                                "fields": [
                                    {
                                        "type": 302
                                    }
                                ],
                                "index": 125
                            },
                            {
                                "name": "Raw125",
                                "fields": [
                                    {
                                        "type": 303
                                    }
                                ],
                                "index": 126
                            },
                            {
                                "name": "Raw126",
                                "fields": [
                                    {
                                        "type": 304
                                    }
                                ],
                                "index": 127
                            },
                            {
                                "name": "Raw127",
                                "fields": [
                                    {
                                        "type": 305
                                    }
                                ],
                                "index": 128
                            },
                            {
                                "name": "Raw128",
                                "fields": [
                                    {
                                        "type": 306
                                    }
                                ],
                                "index": 129
                            },
                            {
                                "name": "BlakeTwo256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 130
                            },
                            {
                                "name": "Sha256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 131
                            },
                            {
                                "name": "Keccak256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 132
                            },
                            {
                                "name": "ShaThree256",
                                "fields": [
                                    {
                                        "type": 1
                                    }
                                ],
                                "index": 133
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 243,
            "type": {
                "def": {
                    "array": {
                        "len": 65,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 244,
            "type": {
                "def": {
                    "array": {
                        "len": 66,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 245,
            "type": {
                "def": {
                    "array": {
                        "len": 67,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 246,
            "type": {
                "def": {
                    "array": {
                        "len": 68,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 247,
            "type": {
                "def": {
                    "array": {
                        "len": 69,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 248,
            "type": {
                "def": {
                    "array": {
                        "len": 70,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 249,
            "type": {
                "def": {
                    "array": {
                        "len": 71,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 250,
            "type": {
                "def": {
                    "array": {
                        "len": 72,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 251,
            "type": {
                "def": {
                    "array": {
                        "len": 73,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 252,
            "type": {
                "def": {
                    "array": {
                        "len": 74,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 253,
            "type": {
                "def": {
                    "array": {
                        "len": 75,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 254,
            "type": {
                "def": {
                    "array": {
                        "len": 76,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 255,
            "type": {
                "def": {
                    "array": {
                        "len": 77,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 256,
            "type": {
                "def": {
                    "array": {
                        "len": 78,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 257,
            "type": {
                "def": {
                    "array": {
                        "len": 79,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 258,
            "type": {
                "def": {
                    "array": {
                        "len": 80,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 259,
            "type": {
                "def": {
                    "array": {
                        "len": 81,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 260,
            "type": {
                "def": {
                    "array": {
                        "len": 82,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 261,
            "type": {
                "def": {
                    "array": {
                        "len": 83,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 262,
            "type": {
                "def": {
                    "array": {
                        "len": 84,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 263,
            "type": {
                "def": {
                    "array": {
                        "len": 85,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 264,
            "type": {
                "def": {
                    "array": {
                        "len": 86,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 265,
            "type": {
                "def": {
                    "array": {
                        "len": 87,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 266,
            "type": {
                "def": {
                    "array": {
                        "len": 88,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 267,
            "type": {
                "def": {
                    "array": {
                        "len": 89,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 268,
            "type": {
                "def": {
                    "array": {
                        "len": 90,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 269,
            "type": {
                "def": {
                    "array": {
                        "len": 91,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 270,
            "type": {
                "def": {
                    "array": {
                        "len": 92,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 271,
            "type": {
                "def": {
                    "array": {
                        "len": 93,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 272,
            "type": {
                "def": {
                    "array": {
                        "len": 94,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 273,
            "type": {
                "def": {
                    "array": {
                        "len": 95,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 274,
            "type": {
                "def": {
                    "array": {
                        "len": 96,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 275,
            "type": {
                "def": {
                    "array": {
                        "len": 97,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 276,
            "type": {
                "def": {
                    "array": {
                        "len": 98,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 277,
            "type": {
                "def": {
                    "array": {
                        "len": 99,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 278,
            "type": {
                "def": {
                    "array": {
                        "len": 100,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 279,
            "type": {
                "def": {
                    "array": {
                        "len": 101,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 280,
            "type": {
                "def": {
                    "array": {
                        "len": 102,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 281,
            "type": {
                "def": {
                    "array": {
                        "len": 103,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 282,
            "type": {
                "def": {
                    "array": {
                        "len": 104,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 283,
            "type": {
                "def": {
                    "array": {
                        "len": 105,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 284,
            "type": {
                "def": {
                    "array": {
                        "len": 106,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 285,
            "type": {
                "def": {
                    "array": {
                        "len": 107,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 286,
            "type": {
                "def": {
                    "array": {
                        "len": 108,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 287,
            "type": {
                "def": {
                    "array": {
                        "len": 109,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 288,
            "type": {
                "def": {
                    "array": {
                        "len": 110,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 289,
            "type": {
                "def": {
                    "array": {
                        "len": 111,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 290,
            "type": {
                "def": {
                    "array": {
                        "len": 112,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 291,
            "type": {
                "def": {
                    "array": {
                        "len": 113,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 292,
            "type": {
                "def": {
                    "array": {
                        "len": 114,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 293,
            "type": {
                "def": {
                    "array": {
                        "len": 115,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 294,
            "type": {
                "def": {
                    "array": {
                        "len": 116,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 295,
            "type": {
                "def": {
                    "array": {
                        "len": 117,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 296,
            "type": {
                "def": {
                    "array": {
                        "len": 118,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 297,
            "type": {
                "def": {
                    "array": {
                        "len": 119,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 298,
            "type": {
                "def": {
                    "array": {
                        "len": 120,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 299,
            "type": {
                "def": {
                    "array": {
                        "len": 121,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 300,
            "type": {
                "def": {
                    "array": {
                        "len": 122,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 301,
            "type": {
                "def": {
                    "array": {
                        "len": 123,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 302,
            "type": {
                "def": {
                    "array": {
                        "len": 124,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 303,
            "type": {
                "def": {
                    "array": {
                        "len": 125,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 304,
            "type": {
                "def": {
                    "array": {
                        "len": 126,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 305,
            "type": {
                "def": {
                    "array": {
                        "len": 127,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 306,
            "type": {
                "def": {
                    "array": {
                        "len": 128,
                        "type": 2
                    }
                }
            }
        },
        {
            "id": 307,
            "type": {
                "def": {
                    "sequence": {
                        "type": 242
                    }
                }
            }
        },
        {
            "id": 308,
            "type": {
                "path": [
                    "pallet_admin_utils",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "swap_authorities",
                                "fields": [
                                    {
                                        "name": "new_authorities",
                                        "type": 89,
                                        "typeName": "BoundedVec<T::AuthorityId, T::MaxAuthorities>"
                                    }
                                ],
                                "index": 0,
                                "docs": [
                                    "The extrinsic sets the new authorities for Aura consensus.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Aura pallet to change the authorities."
                                ]
                            },
                            {
                                "name": "sudo_set_default_take",
                                "fields": [
                                    {
                                        "name": "default_take",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 1,
                                "docs": [
                                    "The extrinsic sets the default take for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the default take."
                                ]
                            },
                            {
                                "name": "sudo_set_tx_rate_limit",
                                "fields": [
                                    {
                                        "name": "tx_rate_limit",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 2,
                                "docs": [
                                    "The extrinsic sets the transaction rate limit for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the transaction rate limit."
                                ]
                            },
                            {
                                "name": "sudo_set_serving_rate_limit",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "serving_rate_limit",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 3,
                                "docs": [
                                    "The extrinsic sets the serving rate limit for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the serving rate limit."
                                ]
                            },
                            {
                                "name": "sudo_set_min_difficulty",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "min_difficulty",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 4,
                                "docs": [
                                    "The extrinsic sets the minimum difficulty for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the minimum difficulty."
                                ]
                            },
                            {
                                "name": "sudo_set_max_difficulty",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "max_difficulty",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "The extrinsic sets the maximum difficulty for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the maximum difficulty."
                                ]
                            },
                            {
                                "name": "sudo_set_weights_version_key",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "weights_version_key",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "The extrinsic sets the weights version key for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the weights version key."
                                ]
                            },
                            {
                                "name": "sudo_set_weights_set_rate_limit",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "weights_set_rate_limit",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "The extrinsic sets the weights set rate limit for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the weights set rate limit."
                                ]
                            },
                            {
                                "name": "sudo_set_adjustment_interval",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "adjustment_interval",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 8,
                                "docs": [
                                    "The extrinsic sets the adjustment interval for a subnet.",
                                    "It is only callable by the root account, not changeable by the subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the adjustment interval."
                                ]
                            },
                            {
                                "name": "sudo_set_adjustment_alpha",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "adjustment_alpha",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 9,
                                "docs": [
                                    "The extrinsic sets the adjustment alpha for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the adjustment alpha."
                                ]
                            },
                            {
                                "name": "sudo_set_max_weight_limit",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "max_weight_limit",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 12,
                                "docs": [
                                    "The extrinsic sets the adjustment beta for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the adjustment beta."
                                ]
                            },
                            {
                                "name": "sudo_set_immunity_period",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "immunity_period",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 13,
                                "docs": [
                                    "The extrinsic sets the immunity period for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the immunity period."
                                ]
                            },
                            {
                                "name": "sudo_set_min_allowed_weights",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "min_allowed_weights",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 14,
                                "docs": [
                                    "The extrinsic sets the minimum allowed weights for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the minimum allowed weights."
                                ]
                            },
                            {
                                "name": "sudo_set_max_allowed_uids",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "max_allowed_uids",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 15,
                                "docs": [
                                    "The extrinsic sets the maximum allowed UIDs for a subnet.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the maximum allowed UIDs for a subnet."
                                ]
                            },
                            {
                                "name": "sudo_set_kappa",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "kappa",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 16,
                                "docs": [
                                    "The extrinsic sets the kappa for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the kappa."
                                ]
                            },
                            {
                                "name": "sudo_set_rho",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "rho",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 17,
                                "docs": [
                                    "The extrinsic sets the rho for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the rho."
                                ]
                            },
                            {
                                "name": "sudo_set_activity_cutoff",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "activity_cutoff",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 18,
                                "docs": [
                                    "The extrinsic sets the activity cutoff for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the activity cutoff."
                                ]
                            },
                            {
                                "name": "sudo_set_network_registration_allowed",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "registration_allowed",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 19,
                                "docs": [
                                    "The extrinsic sets the network registration allowed for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the network registration allowed."
                                ]
                            },
                            {
                                "name": "sudo_set_network_pow_registration_allowed",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "registration_allowed",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 20,
                                "docs": [
                                    "The extrinsic sets the network PoW registration allowed for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the network PoW registration allowed."
                                ]
                            },
                            {
                                "name": "sudo_set_target_registrations_per_interval",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "target_registrations_per_interval",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 21,
                                "docs": [
                                    "The extrinsic sets the target registrations per interval for a subnet.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the target registrations per interval."
                                ]
                            },
                            {
                                "name": "sudo_set_min_burn",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "min_burn",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 22,
                                "docs": [
                                    "The extrinsic sets the minimum burn for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the minimum burn."
                                ]
                            },
                            {
                                "name": "sudo_set_max_burn",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "max_burn",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 23,
                                "docs": [
                                    "The extrinsic sets the maximum burn for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the maximum burn."
                                ]
                            },
                            {
                                "name": "sudo_set_difficulty",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "difficulty",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 24,
                                "docs": [
                                    "The extrinsic sets the difficulty for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the difficulty."
                                ]
                            },
                            {
                                "name": "sudo_set_max_allowed_validators",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "max_allowed_validators",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 25,
                                "docs": [
                                    "The extrinsic sets the maximum allowed validators for a subnet.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the maximum allowed validators."
                                ]
                            },
                            {
                                "name": "sudo_set_bonds_moving_average",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "bonds_moving_average",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 26,
                                "docs": [
                                    "The extrinsic sets the bonds moving average for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the bonds moving average."
                                ]
                            },
                            {
                                "name": "sudo_set_max_registrations_per_block",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "max_registrations_per_block",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 27,
                                "docs": [
                                    "The extrinsic sets the maximum registrations per block for a subnet.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the maximum registrations per block."
                                ]
                            },
                            {
                                "name": "sudo_set_subnet_owner_cut",
                                "fields": [
                                    {
                                        "name": "subnet_owner_cut",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 28,
                                "docs": [
                                    "The extrinsic sets the subnet owner cut for a subnet.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the subnet owner cut."
                                ]
                            },
                            {
                                "name": "sudo_set_network_rate_limit",
                                "fields": [
                                    {
                                        "name": "rate_limit",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 29,
                                "docs": [
                                    "The extrinsic sets the network rate limit for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the network rate limit."
                                ]
                            },
                            {
                                "name": "sudo_set_tempo",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "tempo",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 30,
                                "docs": [
                                    "The extrinsic sets the tempo for a subnet.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the tempo."
                                ]
                            },
                            {
                                "name": "sudo_set_total_issuance",
                                "fields": [
                                    {
                                        "name": "total_issuance",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 33,
                                "docs": [
                                    "The extrinsic sets the total issuance for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the issuance for the network."
                                ]
                            },
                            {
                                "name": "sudo_set_network_immunity_period",
                                "fields": [
                                    {
                                        "name": "immunity_period",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 35,
                                "docs": [
                                    "The extrinsic sets the immunity period for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the immunity period for the network."
                                ]
                            },
                            {
                                "name": "sudo_set_network_min_lock_cost",
                                "fields": [
                                    {
                                        "name": "lock_cost",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 36,
                                "docs": [
                                    "The extrinsic sets the min lock cost for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the min lock cost for the network."
                                ]
                            },
                            {
                                "name": "sudo_set_subnet_limit",
                                "fields": [
                                    {
                                        "name": "max_subnets",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 37,
                                "docs": [
                                    "The extrinsic sets the subnet limit for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the subnet limit."
                                ]
                            },
                            {
                                "name": "sudo_set_lock_reduction_interval",
                                "fields": [
                                    {
                                        "name": "interval",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 38,
                                "docs": [
                                    "The extrinsic sets the lock reduction interval for the network.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the lock reduction interval."
                                ]
                            },
                            {
                                "name": "sudo_set_rao_recycled",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "rao_recycled",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 39,
                                "docs": [
                                    "The extrinsic sets the recycled RAO for a subnet.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the recycled RAO."
                                ]
                            },
                            {
                                "name": "sudo_set_weights_min_stake",
                                "fields": [
                                    {
                                        "name": "min_stake",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 42,
                                "docs": [
                                    "The extrinsic sets the weights min stake.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the weights min stake."
                                ]
                            },
                            {
                                "name": "sudo_set_nominator_min_required_stake",
                                "fields": [
                                    {
                                        "name": "min_stake",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 43,
                                "docs": [
                                    "The extrinsic sets the minimum stake required for nominators.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the minimum stake required for nominators."
                                ]
                            },
                            {
                                "name": "sudo_set_tx_delegate_take_rate_limit",
                                "fields": [
                                    {
                                        "name": "tx_rate_limit",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 45,
                                "docs": [
                                    "The extrinsic sets the rate limit for delegate take transactions.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the rate limit for delegate take transactions."
                                ]
                            },
                            {
                                "name": "sudo_set_min_delegate_take",
                                "fields": [
                                    {
                                        "name": "take",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 46,
                                "docs": [
                                    "The extrinsic sets the minimum delegate take.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set the minimum delegate take."
                                ]
                            },
                            {
                                "name": "sudo_set_target_stakes_per_interval",
                                "fields": [
                                    {
                                        "name": "target_stakes_per_interval",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 47,
                                "docs": [
                                    "The extrinsic sets the target stake per interval.",
                                    "It is only callable by the root account.",
                                    "The extrinsic will call the Subtensor pallet to set target stake per interval."
                                ]
                            },
                            {
                                "name": "sudo_set_commit_reveal_weights_interval",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "interval",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 48,
                                "docs": [
                                    "The extrinsic sets the commit/reveal interval for a subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the interval."
                                ]
                            },
                            {
                                "name": "sudo_set_commit_reveal_weights_enabled",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "enabled",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 49,
                                "docs": [
                                    "The extrinsic enabled/disables commit/reaveal for a given subnet.",
                                    "It is only callable by the root account or subnet owner.",
                                    "The extrinsic will call the Subtensor pallet to set the value."
                                ]
                            },
                            {
                                "name": "sudo_set_liquid_alpha_enabled",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "enabled",
                                        "type": 9,
                                        "typeName": "bool"
                                    }
                                ],
                                "index": 50,
                                "docs": [
                                    "Enables or disables Liquid Alpha for a given subnet.",
                                    "",
                                    "# Parameters",
                                    "- `origin`: The origin of the call, which must be the root account or subnet owner.",
                                    "- `netuid`: The unique identifier for the subnet.",
                                    "- `enabled`: A boolean flag to enable or disable Liquid Alpha.",
                                    "",
                                    "# Weight",
                                    "This function has a fixed weight of 0 and is classified as an operational transaction that does not incur any fees."
                                ]
                            },
                            {
                                "name": "sudo_set_alpha_values",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "alpha_low",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "alpha_high",
                                        "type": 39,
                                        "typeName": "u16"
                                    }
                                ],
                                "index": 51,
                                "docs": [
                                    "Sets values for liquid alpha"
                                ]
                            },
                            {
                                "name": "sudo_set_hotkey_emission_tempo",
                                "fields": [
                                    {
                                        "name": "emission_tempo",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 52,
                                "docs": [
                                    "Sets the hotkey emission tempo.",
                                    "",
                                    "This extrinsic allows the root account to set the hotkey emission tempo, which determines",
                                    "the number of blocks before a hotkey drains accumulated emissions through to nominator staking accounts.",
                                    "",
                                    "# Arguments",
                                    "* `origin` - The origin of the call, which must be the root account.",
                                    "* `emission_tempo` - The new emission tempo value to set.",
                                    "",
                                    "# Emits",
                                    "* `Event::HotkeyEmissionTempoSet` - When the hotkey emission tempo is successfully set.",
                                    "",
                                    "# Errors",
                                    "* `DispatchError::BadOrigin` - If the origin is not the root account."
                                ]
                            },
                            {
                                "name": "sudo_set_network_max_stake",
                                "fields": [
                                    {
                                        "name": "netuid",
                                        "type": 39,
                                        "typeName": "u16"
                                    },
                                    {
                                        "name": "max_stake",
                                        "type": 6,
                                        "typeName": "u64"
                                    }
                                ],
                                "index": 53,
                                "docs": [
                                    "Sets the maximum stake allowed for a specific network.",
                                    "",
                                    "This function allows the root account to set the maximum stake for a given network.",
                                    "It updates the network's maximum stake value and logs the change.",
                                    "",
                                    "# Arguments",
                                    "",
                                    "* `origin` - The origin of the call, which must be the root account.",
                                    "* `netuid` - The unique identifier of the network.",
                                    "* `max_stake` - The new maximum stake value to set.",
                                    "",
                                    "# Returns",
                                    "",
                                    "Returns `Ok(())` if the operation is successful, or an error if it fails.",
                                    "",
                                    "# Example",
                                    "",
                                    "",
                                    "# Notes",
                                    "",
                                    "- This function can only be called by the root account.",
                                    "- The `netuid` should correspond to an existing network.",
                                    "",
                                    "# TODO",
                                    ""
                                ]
                            },
                            {
                                "name": "sudo_set_coldkey_swap_schedule_duration",
                                "fields": [
                                    {
                                        "name": "duration",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 54,
                                "docs": [
                                    "Sets the duration of the coldkey swap schedule.",
                                    "",
                                    "This extrinsic allows the root account to set the duration for the coldkey swap schedule.",
                                    "The coldkey swap schedule determines how long it takes for a coldkey swap operation to complete.",
                                    "",
                                    "# Arguments",
                                    "* `origin` - The origin of the call, which must be the root account.",
                                    "* `duration` - The new duration for the coldkey swap schedule, in number of blocks.",
                                    "",
                                    "# Errors",
                                    "* `BadOrigin` - If the caller is not the root account.",
                                    "",
                                    "# Weight",
                                    "Weight is handled by the `#[pallet::weight]` attribute."
                                ]
                            },
                            {
                                "name": "sudo_set_dissolve_network_schedule_duration",
                                "fields": [
                                    {
                                        "name": "duration",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 55,
                                "docs": [
                                    "Sets the duration of the dissolve network schedule.",
                                    "",
                                    "This extrinsic allows the root account to set the duration for the dissolve network schedule.",
                                    "The dissolve network schedule determines how long it takes for a network dissolution operation to complete.",
                                    "",
                                    "# Arguments",
                                    "* `origin` - The origin of the call, which must be the root account.",
                                    "* `duration` - The new duration for the dissolve network schedule, in number of blocks.",
                                    "",
                                    "# Errors",
                                    "* `BadOrigin` - If the caller is not the root account.",
                                    "",
                                    "# Weight",
                                    "Weight is handled by the `#[pallet::weight]` attribute."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Dispatchable functions allows users to interact with the pallet and invoke state changes."
                ]
            }
        },
        {
            "id": 309,
            "type": {
                "path": [
                    "pallet_safe_mode",
                    "pallet",
                    "Call"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "enter",
                                "index": 0,
                                "docs": [
                                    "Enter safe-mode permissionlessly for [`Config::EnterDuration`] blocks.",
                                    "",
                                    "Reserves [`Config::EnterDepositAmount`] from the caller's account.",
                                    "Emits an [`Event::Entered`] event on success.",
                                    "Errors with [`Error::Entered`] if the safe-mode is already entered.",
                                    "Errors with [`Error::NotConfigured`] if the deposit amount is `None`."
                                ]
                            },
                            {
                                "name": "force_enter",
                                "index": 1,
                                "docs": [
                                    "Enter safe-mode by force for a per-origin configured number of blocks.",
                                    "",
                                    "Emits an [`Event::Entered`] event on success.",
                                    "Errors with [`Error::Entered`] if the safe-mode is already entered.",
                                    "",
                                    "Can only be called by the [`Config::ForceEnterOrigin`] origin."
                                ]
                            },
                            {
                                "name": "extend",
                                "index": 2,
                                "docs": [
                                    "Extend the safe-mode permissionlessly for [`Config::ExtendDuration`] blocks.",
                                    "",
                                    "This accumulates on top of the current remaining duration.",
                                    "Reserves [`Config::ExtendDepositAmount`] from the caller's account.",
                                    "Emits an [`Event::Extended`] event on success.",
                                    "Errors with [`Error::Exited`] if the safe-mode is entered.",
                                    "Errors with [`Error::NotConfigured`] if the deposit amount is `None`.",
                                    "",
                                    "This may be called by any signed origin with [`Config::ExtendDepositAmount`] free",
                                    "currency to reserve. This call can be disabled for all origins by configuring",
                                    "[`Config::ExtendDepositAmount`] to `None`."
                                ]
                            },
                            {
                                "name": "force_extend",
                                "index": 3,
                                "docs": [
                                    "Extend the safe-mode by force for a per-origin configured number of blocks.",
                                    "",
                                    "Emits an [`Event::Extended`] event on success.",
                                    "Errors with [`Error::Exited`] if the safe-mode is inactive.",
                                    "",
                                    "Can only be called by the [`Config::ForceExtendOrigin`] origin."
                                ]
                            },
                            {
                                "name": "force_exit",
                                "index": 4,
                                "docs": [
                                    "Exit safe-mode by force.",
                                    "",
                                    "Emits an [`Event::Exited`] with [`ExitReason::Force`] event on success.",
                                    "Errors with [`Error::Exited`] if the safe-mode is inactive.",
                                    "",
                                    "Note: `safe-mode` will be automatically deactivated by [`Pallet::on_initialize`] hook",
                                    "after the block height is greater than the [`EnteredUntil`] storage item.",
                                    "Emits an [`Event::Exited`] with [`ExitReason::Timeout`] event when deactivated in the",
                                    "hook."
                                ]
                            },
                            {
                                "name": "force_slash_deposit",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "block",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 5,
                                "docs": [
                                    "Slash a deposit for an account that entered or extended safe-mode at a given",
                                    "historical block.",
                                    "",
                                    "This can only be called while safe-mode is entered.",
                                    "",
                                    "Emits a [`Event::DepositSlashed`] event on success.",
                                    "Errors with [`Error::Entered`] if safe-mode is entered.",
                                    "",
                                    "Can only be called by the [`Config::ForceDepositOrigin`] origin."
                                ]
                            },
                            {
                                "name": "release_deposit",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "block",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 6,
                                "docs": [
                                    "Permissionlessly release a deposit for an account that entered safe-mode at a",
                                    "given historical block.",
                                    "",
                                    "The call can be completely disabled by setting [`Config::ReleaseDelay`] to `None`.",
                                    "This cannot be called while safe-mode is entered and not until",
                                    "[`Config::ReleaseDelay`] blocks have passed since safe-mode was entered.",
                                    "",
                                    "Emits a [`Event::DepositReleased`] event on success.",
                                    "Errors with [`Error::Entered`] if the safe-mode is entered.",
                                    "Errors with [`Error::CannotReleaseYet`] if [`Config::ReleaseDelay`] block have not",
                                    "passed since safe-mode was entered. Errors with [`Error::NoDeposit`] if the payee has no",
                                    "reserved currency at the block specified."
                                ]
                            },
                            {
                                "name": "force_release_deposit",
                                "fields": [
                                    {
                                        "name": "account",
                                        "type": 0,
                                        "typeName": "T::AccountId"
                                    },
                                    {
                                        "name": "block",
                                        "type": 4,
                                        "typeName": "BlockNumberFor<T>"
                                    }
                                ],
                                "index": 7,
                                "docs": [
                                    "Force to release a deposit for an account that entered safe-mode at a given",
                                    "historical block.",
                                    "",
                                    "This can be called while safe-mode is still entered.",
                                    "",
                                    "Emits a [`Event::DepositReleased`] event on success.",
                                    "Errors with [`Error::Entered`] if safe-mode is entered.",
                                    "Errors with [`Error::NoDeposit`] if the payee has no reserved currency at the",
                                    "specified block.",
                                    "",
                                    "Can only be called by the [`Config::ForceDepositOrigin`] origin."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Contains a variant per dispatchable extrinsic that this pallet has."
                ]
            }
        },
        {
            "id": 310,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 151
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 151
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 311,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "SubNetworkDoesNotExist",
                                "index": 0,
                                "docs": [
                                    "The subnet does not exist."
                                ]
                            },
                            {
                                "name": "RootNetworkDoesNotExist",
                                "index": 1,
                                "docs": [
                                    "The root network does not exist."
                                ]
                            },
                            {
                                "name": "InvalidIpType",
                                "index": 2,
                                "docs": [
                                    "The user is trying to serve an axon which is not of type 4 (IPv4) or 6 (IPv6)."
                                ]
                            },
                            {
                                "name": "InvalidIpAddress",
                                "index": 3,
                                "docs": [
                                    "An invalid IP address is passed to the serve function."
                                ]
                            },
                            {
                                "name": "InvalidPort",
                                "index": 4,
                                "docs": [
                                    "An invalid port is passed to the serve function."
                                ]
                            },
                            {
                                "name": "HotKeyNotRegisteredInSubNet",
                                "index": 5,
                                "docs": [
                                    "The hotkey is not registered in subnet"
                                ]
                            },
                            {
                                "name": "HotKeyAccountNotExists",
                                "index": 6,
                                "docs": [
                                    "The hotkey does not exists"
                                ]
                            },
                            {
                                "name": "HotKeyNotRegisteredInNetwork",
                                "index": 7,
                                "docs": [
                                    "The hotkey is not registered in any subnet."
                                ]
                            },
                            {
                                "name": "NonAssociatedColdKey",
                                "index": 8,
                                "docs": [
                                    "Request to stake, unstake or subscribe is made by a coldkey that is not associated with the hotkey account."
                                ]
                            },
                            {
                                "name": "HotKeyNotDelegateAndSignerNotOwnHotKey",
                                "index": 9,
                                "docs": [
                                    "The hotkey is not a delegate and the signer is not the owner of the hotkey."
                                ]
                            },
                            {
                                "name": "StakeToWithdrawIsZero",
                                "index": 10,
                                "docs": [
                                    "Stake amount to withdraw is zero."
                                ]
                            },
                            {
                                "name": "NotEnoughStakeToWithdraw",
                                "index": 11,
                                "docs": [
                                    "The caller is requesting removing more stake than there exists in the staking account. See: \"[remove_stake()]\"."
                                ]
                            },
                            {
                                "name": "NotEnoughStakeToSetWeights",
                                "index": 12,
                                "docs": [
                                    "The caller is requesting to set weights but the caller has less than minimum stake required to set weights (less than WeightsMinStake)."
                                ]
                            },
                            {
                                "name": "NotEnoughBalanceToStake",
                                "index": 13,
                                "docs": [
                                    "The caller is requesting adding more stake than there exists in the coldkey account. See: \"[add_stake()]\""
                                ]
                            },
                            {
                                "name": "BalanceWithdrawalError",
                                "index": 14,
                                "docs": [
                                    "The caller is trying to add stake, but for some reason the requested amount could not be withdrawn from the coldkey account."
                                ]
                            },
                            {
                                "name": "ZeroBalanceAfterWithdrawn",
                                "index": 15,
                                "docs": [
                                    "Unsuccessfully withdraw, balance could be zero (can not make account exist) after withdrawal."
                                ]
                            },
                            {
                                "name": "NeuronNoValidatorPermit",
                                "index": 16,
                                "docs": [
                                    "The caller is attempting to set non-self weights without being a permitted validator."
                                ]
                            },
                            {
                                "name": "WeightVecNotEqualSize",
                                "index": 17,
                                "docs": [
                                    "The caller is attempting to set the weight keys and values but these vectors have different size."
                                ]
                            },
                            {
                                "name": "DuplicateUids",
                                "index": 18,
                                "docs": [
                                    "The caller is attempting to set weights with duplicate UIDs in the weight matrix."
                                ]
                            },
                            {
                                "name": "UidVecContainInvalidOne",
                                "index": 19,
                                "docs": [
                                    "The caller is attempting to set weight to at least one UID that does not exist in the metagraph."
                                ]
                            },
                            {
                                "name": "WeightVecLengthIsLow",
                                "index": 20,
                                "docs": [
                                    "The dispatch is attempting to set weights on chain with fewer elements than are allowed."
                                ]
                            },
                            {
                                "name": "TooManyRegistrationsThisBlock",
                                "index": 21,
                                "docs": [
                                    "Number of registrations in this block exceeds the allowed number (i.e., exceeds the subnet hyperparameter \"max_regs_per_block\")."
                                ]
                            },
                            {
                                "name": "HotKeyAlreadyRegisteredInSubNet",
                                "index": 22,
                                "docs": [
                                    "The caller is requesting registering a neuron which already exists in the active set."
                                ]
                            },
                            {
                                "name": "NewHotKeyIsSameWithOld",
                                "index": 23,
                                "docs": [
                                    "The new hotkey is the same as old one"
                                ]
                            },
                            {
                                "name": "InvalidWorkBlock",
                                "index": 24,
                                "docs": [
                                    "The supplied PoW hash block is in the future or negative."
                                ]
                            },
                            {
                                "name": "InvalidDifficulty",
                                "index": 25,
                                "docs": [
                                    "The supplied PoW hash block does not meet the network difficulty."
                                ]
                            },
                            {
                                "name": "InvalidSeal",
                                "index": 26,
                                "docs": [
                                    "The supplied PoW hash seal does not match the supplied work."
                                ]
                            },
                            {
                                "name": "MaxWeightExceeded",
                                "index": 27,
                                "docs": [
                                    "The dispatch is attempting to set weights on chain with weight value exceeding the MaxWeightLimit (max_weight_limit subnet hyperparameter)."
                                ]
                            },
                            {
                                "name": "HotKeyAlreadyDelegate",
                                "index": 28,
                                "docs": [
                                    "The hotkey is attempting to become a delegate when the hotkey is already a delegate."
                                ]
                            },
                            {
                                "name": "SettingWeightsTooFast",
                                "index": 29,
                                "docs": [
                                    "A transactor exceeded the rate limit for setting weights."
                                ]
                            },
                            {
                                "name": "IncorrectWeightVersionKey",
                                "index": 30,
                                "docs": [
                                    "A validator is attempting to set weights from a validator with incorrect weight version."
                                ]
                            },
                            {
                                "name": "ServingRateLimitExceeded",
                                "index": 31,
                                "docs": [
                                    "An axon or prometheus serving exceeded the rate limit for a registered neuron."
                                ]
                            },
                            {
                                "name": "UidsLengthExceedUidsInSubNet",
                                "index": 32,
                                "docs": [
                                    "The caller is attempting to set weights with more UIDs than allowed."
                                ]
                            },
                            {
                                "name": "NetworkTxRateLimitExceeded",
                                "index": 33,
                                "docs": [
                                    "A transactor exceeded the rate limit for add network transaction."
                                ]
                            },
                            {
                                "name": "DelegateTxRateLimitExceeded",
                                "index": 34,
                                "docs": [
                                    "A transactor exceeded the rate limit for delegate transaction."
                                ]
                            },
                            {
                                "name": "HotKeySetTxRateLimitExceeded",
                                "index": 35,
                                "docs": [
                                    "A transactor exceeded the rate limit for setting or swapping hotkey."
                                ]
                            },
                            {
                                "name": "StakeRateLimitExceeded",
                                "index": 36,
                                "docs": [
                                    "A transactor exceeded the rate limit for staking."
                                ]
                            },
                            {
                                "name": "UnstakeRateLimitExceeded",
                                "index": 37,
                                "docs": [
                                    "A transactor exceeded the rate limit for unstaking."
                                ]
                            },
                            {
                                "name": "SubNetRegistrationDisabled",
                                "index": 38,
                                "docs": [
                                    "Registration is disabled."
                                ]
                            },
                            {
                                "name": "TooManyRegistrationsThisInterval",
                                "index": 39,
                                "docs": [
                                    "The number of registration attempts exceeded the allowed number in the interval."
                                ]
                            },
                            {
                                "name": "TransactorAccountShouldBeHotKey",
                                "index": 40,
                                "docs": [
                                    "The hotkey is required to be the origin."
                                ]
                            },
                            {
                                "name": "NotSenateMember",
                                "index": 41,
                                "docs": [
                                    "A hotkey is attempting to do something only senate members can do."
                                ]
                            },
                            {
                                "name": "FaucetDisabled",
                                "index": 42,
                                "docs": [
                                    "Faucet is disabled."
                                ]
                            },
                            {
                                "name": "NotSubnetOwner",
                                "index": 43,
                                "docs": [
                                    "Not a subnet owner."
                                ]
                            },
                            {
                                "name": "RegistrationNotPermittedOnRootSubnet",
                                "index": 44,
                                "docs": [
                                    "Operation is not permitted on the root subnet."
                                ]
                            },
                            {
                                "name": "StakeTooLowForRoot",
                                "index": 45,
                                "docs": [
                                    "A hotkey with too little stake is attempting to join the root subnet."
                                ]
                            },
                            {
                                "name": "AllNetworksInImmunity",
                                "index": 46,
                                "docs": [
                                    "All subnets are in the immunity period."
                                ]
                            },
                            {
                                "name": "NotEnoughBalanceToPaySwapHotKey",
                                "index": 47,
                                "docs": [
                                    "Not enough balance to pay swapping hotkey."
                                ]
                            },
                            {
                                "name": "NotRootSubnet",
                                "index": 48,
                                "docs": [
                                    "Netuid does not match for setting root network weights."
                                ]
                            },
                            {
                                "name": "CanNotSetRootNetworkWeights",
                                "index": 49,
                                "docs": [
                                    "Can not set weights for the root network."
                                ]
                            },
                            {
                                "name": "NoNeuronIdAvailable",
                                "index": 50,
                                "docs": [
                                    "No neuron ID is available."
                                ]
                            },
                            {
                                "name": "NomStakeBelowMinimumThreshold",
                                "index": 51,
                                "docs": [
                                    "Stake amount below the minimum threshold for nominator validations."
                                ]
                            },
                            {
                                "name": "DelegateTakeTooLow",
                                "index": 52,
                                "docs": [
                                    "Delegate take is too low."
                                ]
                            },
                            {
                                "name": "DelegateTakeTooHigh",
                                "index": 53,
                                "docs": [
                                    "Delegate take is too high."
                                ]
                            },
                            {
                                "name": "WeightsCommitNotAllowed",
                                "index": 54,
                                "docs": [
                                    "Not allowed to commit weights."
                                ]
                            },
                            {
                                "name": "NoWeightsCommitFound",
                                "index": 55,
                                "docs": [
                                    "No commit found for the provided hotkey+netuid combination when attempting to reveal the weights."
                                ]
                            },
                            {
                                "name": "InvalidRevealCommitTempo",
                                "index": 56,
                                "docs": [
                                    "Not the correct block/range to reveal weights."
                                ]
                            },
                            {
                                "name": "InvalidRevealCommitHashNotMatch",
                                "index": 57,
                                "docs": [
                                    "Committed hash does not equal the hashed reveal data."
                                ]
                            },
                            {
                                "name": "CommitRevealEnabled",
                                "index": 58,
                                "docs": [
                                    "Attempting to call set_weights when commit/reveal is enabled"
                                ]
                            },
                            {
                                "name": "CommitRevealDisabled",
                                "index": 59,
                                "docs": [
                                    "Attemtping to commit/reveal weights when disabled."
                                ]
                            },
                            {
                                "name": "CouldNotJoinSenate",
                                "index": 60,
                                "docs": [
                                    "Not able to join the senate."
                                ]
                            },
                            {
                                "name": "LiquidAlphaDisabled",
                                "index": 61,
                                "docs": [
                                    "Attempting to set alpha high/low while disabled"
                                ]
                            },
                            {
                                "name": "AlphaHighTooLow",
                                "index": 62,
                                "docs": [
                                    "Alpha high is too low: alpha_high > 0.8"
                                ]
                            },
                            {
                                "name": "AlphaLowOutOfRange",
                                "index": 63,
                                "docs": [
                                    "Alpha low is out of range: alpha_low > 0 && alpha_low < 0.8"
                                ]
                            },
                            {
                                "name": "ColdKeyAlreadyAssociated",
                                "index": 64,
                                "docs": [
                                    "The coldkey has already been swapped"
                                ]
                            },
                            {
                                "name": "ColdKeySwapTxRateLimitExceeded",
                                "index": 65,
                                "docs": [
                                    "The coldkey swap transaction rate limit exceeded"
                                ]
                            },
                            {
                                "name": "NewColdKeyIsSameWithOld",
                                "index": 66,
                                "docs": [
                                    "The new coldkey is the same as the old coldkey"
                                ]
                            },
                            {
                                "name": "NotExistColdkey",
                                "index": 67,
                                "docs": [
                                    "The coldkey does not exist"
                                ]
                            },
                            {
                                "name": "NotEnoughBalanceToPaySwapColdKey",
                                "index": 68,
                                "docs": [
                                    "The coldkey balance is not enough to pay for the swap"
                                ]
                            },
                            {
                                "name": "NoBalanceToTransfer",
                                "index": 69,
                                "docs": [
                                    "No balance to transfer"
                                ]
                            },
                            {
                                "name": "SameColdkey",
                                "index": 70,
                                "docs": [
                                    "Same coldkey"
                                ]
                            },
                            {
                                "name": "ColdkeyIsInArbitration",
                                "index": 71,
                                "docs": [
                                    "The coldkey is in arbitration"
                                ]
                            },
                            {
                                "name": "DuplicateColdkey",
                                "index": 72,
                                "docs": [
                                    "The new coldkey is already registered for the drain"
                                ]
                            },
                            {
                                "name": "ColdkeySwapError",
                                "index": 73,
                                "docs": [
                                    "Error thrown on a coldkey swap."
                                ]
                            },
                            {
                                "name": "InsufficientBalanceToPerformColdkeySwap",
                                "index": 74,
                                "docs": [
                                    "Insufficient Balance to Schedule coldkey swap"
                                ]
                            },
                            {
                                "name": "MaxColdkeyDestinationsReached",
                                "index": 75,
                                "docs": [
                                    "The maximum number of coldkey destinations has been reached"
                                ]
                            },
                            {
                                "name": "InvalidChild",
                                "index": 76,
                                "docs": [
                                    "Attempting to set an invalid child for a hotkey on a network."
                                ]
                            },
                            {
                                "name": "DuplicateChild",
                                "index": 77,
                                "docs": [
                                    "Duplicate child when setting children."
                                ]
                            },
                            {
                                "name": "ProportionOverflow",
                                "index": 78,
                                "docs": [
                                    "Proportion overflow when setting children."
                                ]
                            },
                            {
                                "name": "TooManyChildren",
                                "index": 79,
                                "docs": [
                                    "Too many children MAX 5."
                                ]
                            },
                            {
                                "name": "TxRateLimitExceeded",
                                "index": 80,
                                "docs": [
                                    "Default transaction rate limit exceeded."
                                ]
                            },
                            {
                                "name": "SwapColdkeyOnlyCallableByRoot",
                                "index": 81,
                                "docs": [
                                    "Swap coldkey only callable by root."
                                ]
                            },
                            {
                                "name": "SwapAlreadyScheduled",
                                "index": 82,
                                "docs": [
                                    "Swap already scheduled."
                                ]
                            },
                            {
                                "name": "FailedToSchedule",
                                "index": 83,
                                "docs": [
                                    "failed to swap coldkey"
                                ]
                            },
                            {
                                "name": "NewColdKeyIsHotkey",
                                "index": 84,
                                "docs": [
                                    "New coldkey is hotkey"
                                ]
                            },
                            {
                                "name": "NewColdkeyIsInArbitration",
                                "index": 85,
                                "docs": [
                                    "New coldkey is in arbitration"
                                ]
                            },
                            {
                                "name": "InvalidChildkeyTake",
                                "index": 86,
                                "docs": [
                                    "Childkey take is invalid."
                                ]
                            },
                            {
                                "name": "TxChildkeyTakeRateLimitExceeded",
                                "index": 87,
                                "docs": [
                                    "Childkey take rate limit exceeded."
                                ]
                            },
                            {
                                "name": "InvalidIdentity",
                                "index": 88,
                                "docs": [
                                    "Invalid identity."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 312,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 13
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 64,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 313,
            "type": {
                "path": [
                    "pallet_collective",
                    "Votes"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "BlockNumber",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ProposalIndex"
                            },
                            {
                                "name": "threshold",
                                "type": 4,
                                "typeName": "MemberCount"
                            },
                            {
                                "name": "ayes",
                                "type": 132,
                                "typeName": "Vec<AccountId>"
                            },
                            {
                                "name": "nays",
                                "type": 132,
                                "typeName": "Vec<AccountId>"
                            },
                            {
                                "name": "end",
                                "type": 4,
                                "typeName": "BlockNumber"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 314,
            "type": {
                "path": [
                    "pallet_collective",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "NotMember",
                                "index": 0,
                                "docs": [
                                    "Account is not a member of collective"
                                ]
                            },
                            {
                                "name": "DuplicateProposal",
                                "index": 1,
                                "docs": [
                                    "Duplicate proposals not allowed"
                                ]
                            },
                            {
                                "name": "ProposalNotExists",
                                "index": 2,
                                "docs": [
                                    "Proposal must exist"
                                ]
                            },
                            {
                                "name": "IndexMismatchProposalHash",
                                "index": 3,
                                "docs": [
                                    "Index mismatched the proposal hash"
                                ]
                            },
                            {
                                "name": "DuplicateVote",
                                "index": 4,
                                "docs": [
                                    "Duplicate vote ignored"
                                ]
                            },
                            {
                                "name": "TooEarlyToCloseProposal",
                                "index": 5,
                                "docs": [
                                    "The call to close the proposal was made too early, before the end of the voting"
                                ]
                            },
                            {
                                "name": "TooManyActiveProposals",
                                "index": 6,
                                "docs": [
                                    "There can only be a maximum of `MaxProposals` active proposals."
                                ]
                            },
                            {
                                "name": "ProposalWeightLessThanDispatchCallWeight",
                                "index": 7,
                                "docs": [
                                    "The given weight-bound for the proposal was too low."
                                ]
                            },
                            {
                                "name": "ProposalLengthBoundLessThanProposalLength",
                                "index": 8,
                                "docs": [
                                    "The given length-bound for the proposal was too low."
                                ]
                            },
                            {
                                "name": "DurationLowerThanConfiguredMotionDuration",
                                "index": 9,
                                "docs": [
                                    "The given motion duration for the proposal was too low."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 315,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 0
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 132,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 316,
            "type": {
                "path": [
                    "pallet_membership",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "AlreadyMember",
                                "index": 0,
                                "docs": [
                                    "Already a member."
                                ]
                            },
                            {
                                "name": "NotMember",
                                "index": 1,
                                "docs": [
                                    "Not a member."
                                ]
                            },
                            {
                                "name": "TooManyMembers",
                                "index": 2,
                                "docs": [
                                    "Too many members."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 317,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 0
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 132,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 318,
            "type": {
                "path": [
                    "pallet_membership",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    },
                    {
                        "name": "I",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "AlreadyMember",
                                "index": 0,
                                "docs": [
                                    "Already a member."
                                ]
                            },
                            {
                                "name": "NotMember",
                                "index": 1,
                                "docs": [
                                    "Not a member."
                                ]
                            },
                            {
                                "name": "TooManyMembers",
                                "index": 2,
                                "docs": [
                                    "Too many members."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 319,
            "type": {
                "path": [
                    "pallet_utility",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "TooManyCalls",
                                "index": 0,
                                "docs": [
                                    "Too many calls batched."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 320,
            "type": {
                "path": [
                    "pallet_sudo",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "RequireSudo",
                                "index": 0,
                                "docs": [
                                    "Sender must be the Sudo account."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "Error for the Sudo pallet."
                ]
            }
        },
        {
            "id": 321,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        1
                    ]
                }
            }
        },
        {
            "id": 322,
            "type": {
                "path": [
                    "pallet_multisig",
                    "Multisig"
                ],
                "params": [
                    {
                        "name": "BlockNumber",
                        "type": 4
                    },
                    {
                        "name": "Balance",
                        "type": 6
                    },
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "MaxApprovals",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "when",
                                "type": 51,
                                "typeName": "Timepoint<BlockNumber>"
                            },
                            {
                                "name": "deposit",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "depositor",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "approvals",
                                "type": 323,
                                "typeName": "BoundedVec<AccountId, MaxApprovals>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 323,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 0
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 132,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 324,
            "type": {
                "path": [
                    "pallet_multisig",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "MinimumThreshold",
                                "index": 0,
                                "docs": [
                                    "Threshold must be 2 or greater."
                                ]
                            },
                            {
                                "name": "AlreadyApproved",
                                "index": 1,
                                "docs": [
                                    "Call is already approved by this signatory."
                                ]
                            },
                            {
                                "name": "NoApprovalsNeeded",
                                "index": 2,
                                "docs": [
                                    "Call doesn't need any (more) approvals."
                                ]
                            },
                            {
                                "name": "TooFewSignatories",
                                "index": 3,
                                "docs": [
                                    "There are too few signatories in the list."
                                ]
                            },
                            {
                                "name": "TooManySignatories",
                                "index": 4,
                                "docs": [
                                    "There are too many signatories in the list."
                                ]
                            },
                            {
                                "name": "SignatoriesOutOfOrder",
                                "index": 5,
                                "docs": [
                                    "The signatories were provided out of order; they should be ordered."
                                ]
                            },
                            {
                                "name": "SenderInSignatories",
                                "index": 6,
                                "docs": [
                                    "The sender was contained in the other signatories; it shouldn't be."
                                ]
                            },
                            {
                                "name": "NotFound",
                                "index": 7,
                                "docs": [
                                    "Multisig operation not found when attempting to cancel."
                                ]
                            },
                            {
                                "name": "NotOwner",
                                "index": 8,
                                "docs": [
                                    "Only the account that originally created the multisig is able to cancel it."
                                ]
                            },
                            {
                                "name": "NoTimepoint",
                                "index": 9,
                                "docs": [
                                    "No timepoint was given, yet the multisig operation is already underway."
                                ]
                            },
                            {
                                "name": "WrongTimepoint",
                                "index": 10,
                                "docs": [
                                    "A different timepoint was given to the multisig operation that is underway."
                                ]
                            },
                            {
                                "name": "UnexpectedTimepoint",
                                "index": 11,
                                "docs": [
                                    "A timepoint was given, yet no multisig operation is underway."
                                ]
                            },
                            {
                                "name": "MaxWeightTooLow",
                                "index": 12,
                                "docs": [
                                    "The maximum weight information provided was too low."
                                ]
                            },
                            {
                                "name": "AlreadyStored",
                                "index": 13,
                                "docs": [
                                    "The data to be stored is already stored."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 325,
            "type": {
                "path": [
                    "pallet_preimage",
                    "OldRequestStatus"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Unrequested",
                                "fields": [
                                    {
                                        "name": "deposit",
                                        "type": 326,
                                        "typeName": "(AccountId, Balance)"
                                    },
                                    {
                                        "name": "len",
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Requested",
                                "fields": [
                                    {
                                        "name": "deposit",
                                        "type": 327,
                                        "typeName": "Option<(AccountId, Balance)>"
                                    },
                                    {
                                        "name": "count",
                                        "type": 4,
                                        "typeName": "u32"
                                    },
                                    {
                                        "name": "len",
                                        "type": 96,
                                        "typeName": "Option<u32>"
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 326,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        6
                    ]
                }
            }
        },
        {
            "id": 327,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 326
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 326
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 328,
            "type": {
                "path": [
                    "pallet_preimage",
                    "RequestStatus"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "Ticket",
                        "type": 329
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Unrequested",
                                "fields": [
                                    {
                                        "name": "ticket",
                                        "type": 330,
                                        "typeName": "(AccountId, Ticket)"
                                    },
                                    {
                                        "name": "len",
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Requested",
                                "fields": [
                                    {
                                        "name": "maybe_ticket",
                                        "type": 331,
                                        "typeName": "Option<(AccountId, Ticket)>"
                                    },
                                    {
                                        "name": "count",
                                        "type": 4,
                                        "typeName": "u32"
                                    },
                                    {
                                        "name": "maybe_len",
                                        "type": 96,
                                        "typeName": "Option<u32>"
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 329,
            "type": {
                "path": [
                    "frame_support",
                    "traits",
                    "tokens",
                    "fungible",
                    "HoldConsideration"
                ],
                "params": [
                    {
                        "name": "A",
                        "type": null
                    },
                    {
                        "name": "F",
                        "type": null
                    },
                    {
                        "name": "R",
                        "type": null
                    },
                    {
                        "name": "D",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 6,
                                "typeName": "F::Balance"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 330,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        329
                    ]
                }
            }
        },
        {
            "id": 331,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 330
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 330
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 332,
            "type": {
                "def": {
                    "tuple": [
                        13,
                        4
                    ]
                }
            }
        },
        {
            "id": 333,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 2
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 334,
            "type": {
                "path": [
                    "pallet_preimage",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "TooBig",
                                "index": 0,
                                "docs": [
                                    "Preimage is too large to store on-chain."
                                ]
                            },
                            {
                                "name": "AlreadyNoted",
                                "index": 1,
                                "docs": [
                                    "Preimage has already been noted on-chain."
                                ]
                            },
                            {
                                "name": "NotAuthorized",
                                "index": 2,
                                "docs": [
                                    "The user is not authorized to perform this action."
                                ]
                            },
                            {
                                "name": "NotNoted",
                                "index": 3,
                                "docs": [
                                    "The preimage cannot be removed since it has not yet been noted."
                                ]
                            },
                            {
                                "name": "Requested",
                                "index": 4,
                                "docs": [
                                    "A preimage may not be removed when there are outstanding requests."
                                ]
                            },
                            {
                                "name": "NotRequested",
                                "index": 5,
                                "docs": [
                                    "The preimage request cannot be removed since no outstanding requests exist."
                                ]
                            },
                            {
                                "name": "TooMany",
                                "index": 6,
                                "docs": [
                                    "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
                                ]
                            },
                            {
                                "name": "TooFew",
                                "index": 7,
                                "docs": [
                                    "Too few hashes were requested to be upgraded (i.e. zero)."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 335,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 336
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 341,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 336,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 337
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 337
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 337,
            "type": {
                "path": [
                    "pallet_scheduler",
                    "Scheduled"
                ],
                "params": [
                    {
                        "name": "Name",
                        "type": 1
                    },
                    {
                        "name": "Call",
                        "type": 338
                    },
                    {
                        "name": "BlockNumber",
                        "type": 4
                    },
                    {
                        "name": "PalletsOrigin",
                        "type": 161
                    },
                    {
                        "name": "AccountId",
                        "type": 0
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "maybe_id",
                                "type": 55,
                                "typeName": "Option<Name>"
                            },
                            {
                                "name": "priority",
                                "type": 2,
                                "typeName": "schedule::Priority"
                            },
                            {
                                "name": "call",
                                "type": 338,
                                "typeName": "Call"
                            },
                            {
                                "name": "maybe_periodic",
                                "type": 169,
                                "typeName": "Option<schedule::Period<BlockNumber>>"
                            },
                            {
                                "name": "origin",
                                "type": 161,
                                "typeName": "PalletsOrigin"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 338,
            "type": {
                "path": [
                    "frame_support",
                    "traits",
                    "preimages",
                    "Bounded"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 155
                    },
                    {
                        "name": "H",
                        "type": 339
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Legacy",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "H::Output"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Inline",
                                "fields": [
                                    {
                                        "type": 340,
                                        "typeName": "BoundedInline"
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "Lookup",
                                "fields": [
                                    {
                                        "name": "hash",
                                        "type": 13,
                                        "typeName": "H::Output"
                                    },
                                    {
                                        "name": "len",
                                        "type": 4,
                                        "typeName": "u32"
                                    }
                                ],
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 339,
            "type": {
                "path": [
                    "sp_runtime",
                    "traits",
                    "BlakeTwo256"
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 340,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 2
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 341,
            "type": {
                "def": {
                    "sequence": {
                        "type": 336
                    }
                }
            }
        },
        {
            "id": 342,
            "type": {
                "path": [
                    "pallet_scheduler",
                    "RetryConfig"
                ],
                "params": [
                    {
                        "name": "Period",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "total_retries",
                                "type": 2,
                                "typeName": "u8"
                            },
                            {
                                "name": "remaining",
                                "type": 2,
                                "typeName": "u8"
                            },
                            {
                                "name": "period",
                                "type": 4,
                                "typeName": "Period"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 343,
            "type": {
                "path": [
                    "pallet_scheduler",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "FailedToSchedule",
                                "index": 0,
                                "docs": [
                                    "Failed to schedule a call"
                                ]
                            },
                            {
                                "name": "NotFound",
                                "index": 1,
                                "docs": [
                                    "Cannot find the scheduled call."
                                ]
                            },
                            {
                                "name": "TargetBlockNumberInPast",
                                "index": 2,
                                "docs": [
                                    "Given target block number is in the past."
                                ]
                            },
                            {
                                "name": "RescheduleNoChange",
                                "index": 3,
                                "docs": [
                                    "Reschedule failed because it does not change scheduled time."
                                ]
                            },
                            {
                                "name": "Named",
                                "index": 4,
                                "docs": [
                                    "Attempt to use a non-named function on a named task."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 344,
            "type": {
                "def": {
                    "tuple": [
                        345,
                        6
                    ]
                }
            }
        },
        {
            "id": 345,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 346
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 347,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 346,
            "type": {
                "path": [
                    "pallet_proxy",
                    "ProxyDefinition"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "ProxyType",
                        "type": 57
                    },
                    {
                        "name": "BlockNumber",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "delegate",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "proxy_type",
                                "type": 57,
                                "typeName": "ProxyType"
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "BlockNumber"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 347,
            "type": {
                "def": {
                    "sequence": {
                        "type": 346
                    }
                }
            }
        },
        {
            "id": 348,
            "type": {
                "def": {
                    "tuple": [
                        349,
                        6
                    ]
                }
            }
        },
        {
            "id": 349,
            "type": {
                "path": [
                    "bounded_collections",
                    "bounded_vec",
                    "BoundedVec"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 350
                    },
                    {
                        "name": "S",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 351,
                                "typeName": "Vec<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 350,
            "type": {
                "path": [
                    "pallet_proxy",
                    "Announcement"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    },
                    {
                        "name": "Hash",
                        "type": 13
                    },
                    {
                        "name": "BlockNumber",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "real",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "Hash"
                            },
                            {
                                "name": "height",
                                "type": 4,
                                "typeName": "BlockNumber"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 351,
            "type": {
                "def": {
                    "sequence": {
                        "type": 350
                    }
                }
            }
        },
        {
            "id": 352,
            "type": {
                "path": [
                    "pallet_proxy",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "TooMany",
                                "index": 0,
                                "docs": [
                                    "There are too many proxies registered or too many announcements pending."
                                ]
                            },
                            {
                                "name": "NotFound",
                                "index": 1,
                                "docs": [
                                    "Proxy registration not found."
                                ]
                            },
                            {
                                "name": "NotProxy",
                                "index": 2,
                                "docs": [
                                    "Sender is not a proxy of the account to be proxied."
                                ]
                            },
                            {
                                "name": "Unproxyable",
                                "index": 3,
                                "docs": [
                                    "A call which is incompatible with the proxy type's filter was attempted."
                                ]
                            },
                            {
                                "name": "Duplicate",
                                "index": 4,
                                "docs": [
                                    "Account is already a proxy."
                                ]
                            },
                            {
                                "name": "NoPermission",
                                "index": 5,
                                "docs": [
                                    "Call may not be made by proxy because it may escalate its privileges."
                                ]
                            },
                            {
                                "name": "Unannounced",
                                "index": 6,
                                "docs": [
                                    "Announcement, if made at all, was made too recently."
                                ]
                            },
                            {
                                "name": "NoSelfProxy",
                                "index": 7,
                                "docs": [
                                    "Cannot add self as proxy."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 353,
            "type": {
                "path": [
                    "pallet_registry",
                    "types",
                    "Registration"
                ],
                "params": [
                    {
                        "name": "Balance",
                        "type": 6
                    },
                    {
                        "name": "MaxAdditionalFields",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "deposit",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "info",
                                "type": 173,
                                "typeName": "IdentityInfo<MaxAdditionalFields>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 354,
            "type": {
                "path": [
                    "pallet_registry",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "CannotRegister",
                                "index": 0,
                                "docs": [
                                    "Account attempted to register an identity but does not meet the requirements."
                                ]
                            },
                            {
                                "name": "TooManyFieldsInIdentityInfo",
                                "index": 1,
                                "docs": [
                                    "Account passed too many additional fields to their identity"
                                ]
                            },
                            {
                                "name": "NotRegistered",
                                "index": 2,
                                "docs": [
                                    "Account doesn't have a registered identity"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 355,
            "type": {
                "path": [
                    "pallet_commitments",
                    "types",
                    "Registration"
                ],
                "params": [
                    {
                        "name": "Balance",
                        "type": 6
                    },
                    {
                        "name": "MaxFields",
                        "type": null
                    },
                    {
                        "name": "BlockNumber",
                        "type": 4
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "deposit",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "block",
                                "type": 4,
                                "typeName": "BlockNumber"
                            },
                            {
                                "name": "info",
                                "type": 240,
                                "typeName": "CommitmentInfo<MaxFields>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 356,
            "type": {
                "path": [
                    "pallet_commitments",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "TooManyFieldsInCommitmentInfo",
                                "index": 0,
                                "docs": [
                                    "Account passed too many additional fields to their commitment"
                                ]
                            },
                            {
                                "name": "AccountNotAllowedCommit",
                                "index": 1,
                                "docs": [
                                    "Account is not allow to make commitments to the chain"
                                ]
                            },
                            {
                                "name": "CommitmentSetRateLimitExceeded",
                                "index": 2,
                                "docs": [
                                    "Account is trying to commit data too fast, rate limit exceeded"
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 357,
            "type": {
                "path": [
                    "pallet_admin_utils",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "SubnetDoesNotExist",
                                "index": 0,
                                "docs": [
                                    "The subnet does not exist, check the netuid parameter"
                                ]
                            },
                            {
                                "name": "MaxValidatorsLargerThanMaxUIds",
                                "index": 1,
                                "docs": [
                                    "The maximum number of subnet validators must be less than the maximum number of allowed UIDs in the subnet."
                                ]
                            },
                            {
                                "name": "MaxAllowedUIdsLessThanCurrentUIds",
                                "index": 2,
                                "docs": [
                                    "The maximum number of subnet validators must be more than the current number of UIDs already in the subnet."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 358,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        4
                    ]
                }
            }
        },
        {
            "id": 359,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 6
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 6
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 360,
            "type": {
                "path": [
                    "pallet_safe_mode",
                    "pallet",
                    "Error"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Entered",
                                "index": 0,
                                "docs": [
                                    "The safe-mode is (already or still) entered."
                                ]
                            },
                            {
                                "name": "Exited",
                                "index": 1,
                                "docs": [
                                    "The safe-mode is (already or still) exited."
                                ]
                            },
                            {
                                "name": "NotConfigured",
                                "index": 2,
                                "docs": [
                                    "This functionality of the pallet is disabled by the configuration."
                                ]
                            },
                            {
                                "name": "NoDeposit",
                                "index": 3,
                                "docs": [
                                    "There is no balance reserved."
                                ]
                            },
                            {
                                "name": "AlreadyDeposited",
                                "index": 4,
                                "docs": [
                                    "The account already has a deposit reserved and can therefore not enter or extend again."
                                ]
                            },
                            {
                                "name": "CannotReleaseYet",
                                "index": 5,
                                "docs": [
                                    "This deposit cannot be released yet."
                                ]
                            },
                            {
                                "name": "CurrencyError",
                                "index": 6,
                                "docs": [
                                    "An error from the underlying `Currency`."
                                ]
                            }
                        ]
                    }
                },
                "docs": [
                    "The `Error` enum of this pallet."
                ]
            }
        },
        {
            "id": 361,
            "type": {
                "path": [
                    "sp_runtime",
                    "MultiSignature"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Ed25519",
                                "fields": [
                                    {
                                        "type": 103,
                                        "typeName": "ed25519::Signature"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Sr25519",
                                "fields": [
                                    {
                                        "type": 103,
                                        "typeName": "sr25519::Signature"
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "Ecdsa",
                                "fields": [
                                    {
                                        "type": 243,
                                        "typeName": "ecdsa::Signature"
                                    }
                                ],
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 362,
            "type": {
                "def": {
                    "tuple": [
                        363,
                        364,
                        365,
                        366,
                        367,
                        369,
                        370,
                        371,
                        372,
                        374,
                        375
                    ]
                }
            }
        },
        {
            "id": 363,
            "type": {
                "path": [
                    "frame_system",
                    "extensions",
                    "check_non_zero_sender",
                    "CheckNonZeroSender"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 364,
            "type": {
                "path": [
                    "frame_system",
                    "extensions",
                    "check_spec_version",
                    "CheckSpecVersion"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 365,
            "type": {
                "path": [
                    "frame_system",
                    "extensions",
                    "check_tx_version",
                    "CheckTxVersion"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 366,
            "type": {
                "path": [
                    "frame_system",
                    "extensions",
                    "check_genesis",
                    "CheckGenesis"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 367,
            "type": {
                "path": [
                    "frame_system",
                    "extensions",
                    "check_mortality",
                    "CheckMortality"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 368,
                                "typeName": "Era"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 368,
            "type": {
                "path": [
                    "sp_runtime",
                    "generic",
                    "era",
                    "Era"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Immortal",
                                "index": 0
                            },
                            {
                                "name": "Mortal1",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 1
                            },
                            {
                                "name": "Mortal2",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 2
                            },
                            {
                                "name": "Mortal3",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 3
                            },
                            {
                                "name": "Mortal4",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 4
                            },
                            {
                                "name": "Mortal5",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 5
                            },
                            {
                                "name": "Mortal6",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 6
                            },
                            {
                                "name": "Mortal7",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "Mortal8",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "Mortal9",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 9
                            },
                            {
                                "name": "Mortal10",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 10
                            },
                            {
                                "name": "Mortal11",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 11
                            },
                            {
                                "name": "Mortal12",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 12
                            },
                            {
                                "name": "Mortal13",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 13
                            },
                            {
                                "name": "Mortal14",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 14
                            },
                            {
                                "name": "Mortal15",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 15
                            },
                            {
                                "name": "Mortal16",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 16
                            },
                            {
                                "name": "Mortal17",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 17
                            },
                            {
                                "name": "Mortal18",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 18
                            },
                            {
                                "name": "Mortal19",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 19
                            },
                            {
                                "name": "Mortal20",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 20
                            },
                            {
                                "name": "Mortal21",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 21
                            },
                            {
                                "name": "Mortal22",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 22
                            },
                            {
                                "name": "Mortal23",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 23
                            },
                            {
                                "name": "Mortal24",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 24
                            },
                            {
                                "name": "Mortal25",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 25
                            },
                            {
                                "name": "Mortal26",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 26
                            },
                            {
                                "name": "Mortal27",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 27
                            },
                            {
                                "name": "Mortal28",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 28
                            },
                            {
                                "name": "Mortal29",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 29
                            },
                            {
                                "name": "Mortal30",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 30
                            },
                            {
                                "name": "Mortal31",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 31
                            },
                            {
                                "name": "Mortal32",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 32
                            },
                            {
                                "name": "Mortal33",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 33
                            },
                            {
                                "name": "Mortal34",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 34
                            },
                            {
                                "name": "Mortal35",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 35
                            },
                            {
                                "name": "Mortal36",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 36
                            },
                            {
                                "name": "Mortal37",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 37
                            },
                            {
                                "name": "Mortal38",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 38
                            },
                            {
                                "name": "Mortal39",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 39
                            },
                            {
                                "name": "Mortal40",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 40
                            },
                            {
                                "name": "Mortal41",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 41
                            },
                            {
                                "name": "Mortal42",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 42
                            },
                            {
                                "name": "Mortal43",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 43
                            },
                            {
                                "name": "Mortal44",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 44
                            },
                            {
                                "name": "Mortal45",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 45
                            },
                            {
                                "name": "Mortal46",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 46
                            },
                            {
                                "name": "Mortal47",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 47
                            },
                            {
                                "name": "Mortal48",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 48
                            },
                            {
                                "name": "Mortal49",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 49
                            },
                            {
                                "name": "Mortal50",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 50
                            },
                            {
                                "name": "Mortal51",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 51
                            },
                            {
                                "name": "Mortal52",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 52
                            },
                            {
                                "name": "Mortal53",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 53
                            },
                            {
                                "name": "Mortal54",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 54
                            },
                            {
                                "name": "Mortal55",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 55
                            },
                            {
                                "name": "Mortal56",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 56
                            },
                            {
                                "name": "Mortal57",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 57
                            },
                            {
                                "name": "Mortal58",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 58
                            },
                            {
                                "name": "Mortal59",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 59
                            },
                            {
                                "name": "Mortal60",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 60
                            },
                            {
                                "name": "Mortal61",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 61
                            },
                            {
                                "name": "Mortal62",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 62
                            },
                            {
                                "name": "Mortal63",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 63
                            },
                            {
                                "name": "Mortal64",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 64
                            },
                            {
                                "name": "Mortal65",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 65
                            },
                            {
                                "name": "Mortal66",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 66
                            },
                            {
                                "name": "Mortal67",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 67
                            },
                            {
                                "name": "Mortal68",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 68
                            },
                            {
                                "name": "Mortal69",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 69
                            },
                            {
                                "name": "Mortal70",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 70
                            },
                            {
                                "name": "Mortal71",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 71
                            },
                            {
                                "name": "Mortal72",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 72
                            },
                            {
                                "name": "Mortal73",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 73
                            },
                            {
                                "name": "Mortal74",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 74
                            },
                            {
                                "name": "Mortal75",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 75
                            },
                            {
                                "name": "Mortal76",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 76
                            },
                            {
                                "name": "Mortal77",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 77
                            },
                            {
                                "name": "Mortal78",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 78
                            },
                            {
                                "name": "Mortal79",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 79
                            },
                            {
                                "name": "Mortal80",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 80
                            },
                            {
                                "name": "Mortal81",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 81
                            },
                            {
                                "name": "Mortal82",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 82
                            },
                            {
                                "name": "Mortal83",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 83
                            },
                            {
                                "name": "Mortal84",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 84
                            },
                            {
                                "name": "Mortal85",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 85
                            },
                            {
                                "name": "Mortal86",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 86
                            },
                            {
                                "name": "Mortal87",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 87
                            },
                            {
                                "name": "Mortal88",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 88
                            },
                            {
                                "name": "Mortal89",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 89
                            },
                            {
                                "name": "Mortal90",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 90
                            },
                            {
                                "name": "Mortal91",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 91
                            },
                            {
                                "name": "Mortal92",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 92
                            },
                            {
                                "name": "Mortal93",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 93
                            },
                            {
                                "name": "Mortal94",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 94
                            },
                            {
                                "name": "Mortal95",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 95
                            },
                            {
                                "name": "Mortal96",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 96
                            },
                            {
                                "name": "Mortal97",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 97
                            },
                            {
                                "name": "Mortal98",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 98
                            },
                            {
                                "name": "Mortal99",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 99
                            },
                            {
                                "name": "Mortal100",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 100
                            },
                            {
                                "name": "Mortal101",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 101
                            },
                            {
                                "name": "Mortal102",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 102
                            },
                            {
                                "name": "Mortal103",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 103
                            },
                            {
                                "name": "Mortal104",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 104
                            },
                            {
                                "name": "Mortal105",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 105
                            },
                            {
                                "name": "Mortal106",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 106
                            },
                            {
                                "name": "Mortal107",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 107
                            },
                            {
                                "name": "Mortal108",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 108
                            },
                            {
                                "name": "Mortal109",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 109
                            },
                            {
                                "name": "Mortal110",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 110
                            },
                            {
                                "name": "Mortal111",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 111
                            },
                            {
                                "name": "Mortal112",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 112
                            },
                            {
                                "name": "Mortal113",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 113
                            },
                            {
                                "name": "Mortal114",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 114
                            },
                            {
                                "name": "Mortal115",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 115
                            },
                            {
                                "name": "Mortal116",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 116
                            },
                            {
                                "name": "Mortal117",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 117
                            },
                            {
                                "name": "Mortal118",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 118
                            },
                            {
                                "name": "Mortal119",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 119
                            },
                            {
                                "name": "Mortal120",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 120
                            },
                            {
                                "name": "Mortal121",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 121
                            },
                            {
                                "name": "Mortal122",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 122
                            },
                            {
                                "name": "Mortal123",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 123
                            },
                            {
                                "name": "Mortal124",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 124
                            },
                            {
                                "name": "Mortal125",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 125
                            },
                            {
                                "name": "Mortal126",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 126
                            },
                            {
                                "name": "Mortal127",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 127
                            },
                            {
                                "name": "Mortal128",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 128
                            },
                            {
                                "name": "Mortal129",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 129
                            },
                            {
                                "name": "Mortal130",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 130
                            },
                            {
                                "name": "Mortal131",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 131
                            },
                            {
                                "name": "Mortal132",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 132
                            },
                            {
                                "name": "Mortal133",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 133
                            },
                            {
                                "name": "Mortal134",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 134
                            },
                            {
                                "name": "Mortal135",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 135
                            },
                            {
                                "name": "Mortal136",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 136
                            },
                            {
                                "name": "Mortal137",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 137
                            },
                            {
                                "name": "Mortal138",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 138
                            },
                            {
                                "name": "Mortal139",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 139
                            },
                            {
                                "name": "Mortal140",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 140
                            },
                            {
                                "name": "Mortal141",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 141
                            },
                            {
                                "name": "Mortal142",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 142
                            },
                            {
                                "name": "Mortal143",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 143
                            },
                            {
                                "name": "Mortal144",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 144
                            },
                            {
                                "name": "Mortal145",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 145
                            },
                            {
                                "name": "Mortal146",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 146
                            },
                            {
                                "name": "Mortal147",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 147
                            },
                            {
                                "name": "Mortal148",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 148
                            },
                            {
                                "name": "Mortal149",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 149
                            },
                            {
                                "name": "Mortal150",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 150
                            },
                            {
                                "name": "Mortal151",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 151
                            },
                            {
                                "name": "Mortal152",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 152
                            },
                            {
                                "name": "Mortal153",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 153
                            },
                            {
                                "name": "Mortal154",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 154
                            },
                            {
                                "name": "Mortal155",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 155
                            },
                            {
                                "name": "Mortal156",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 156
                            },
                            {
                                "name": "Mortal157",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 157
                            },
                            {
                                "name": "Mortal158",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 158
                            },
                            {
                                "name": "Mortal159",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 159
                            },
                            {
                                "name": "Mortal160",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 160
                            },
                            {
                                "name": "Mortal161",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 161
                            },
                            {
                                "name": "Mortal162",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 162
                            },
                            {
                                "name": "Mortal163",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 163
                            },
                            {
                                "name": "Mortal164",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 164
                            },
                            {
                                "name": "Mortal165",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 165
                            },
                            {
                                "name": "Mortal166",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 166
                            },
                            {
                                "name": "Mortal167",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 167
                            },
                            {
                                "name": "Mortal168",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 168
                            },
                            {
                                "name": "Mortal169",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 169
                            },
                            {
                                "name": "Mortal170",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 170
                            },
                            {
                                "name": "Mortal171",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 171
                            },
                            {
                                "name": "Mortal172",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 172
                            },
                            {
                                "name": "Mortal173",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 173
                            },
                            {
                                "name": "Mortal174",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 174
                            },
                            {
                                "name": "Mortal175",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 175
                            },
                            {
                                "name": "Mortal176",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 176
                            },
                            {
                                "name": "Mortal177",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 177
                            },
                            {
                                "name": "Mortal178",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 178
                            },
                            {
                                "name": "Mortal179",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 179
                            },
                            {
                                "name": "Mortal180",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 180
                            },
                            {
                                "name": "Mortal181",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 181
                            },
                            {
                                "name": "Mortal182",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 182
                            },
                            {
                                "name": "Mortal183",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 183
                            },
                            {
                                "name": "Mortal184",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 184
                            },
                            {
                                "name": "Mortal185",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 185
                            },
                            {
                                "name": "Mortal186",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 186
                            },
                            {
                                "name": "Mortal187",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 187
                            },
                            {
                                "name": "Mortal188",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 188
                            },
                            {
                                "name": "Mortal189",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 189
                            },
                            {
                                "name": "Mortal190",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 190
                            },
                            {
                                "name": "Mortal191",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 191
                            },
                            {
                                "name": "Mortal192",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 192
                            },
                            {
                                "name": "Mortal193",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 193
                            },
                            {
                                "name": "Mortal194",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 194
                            },
                            {
                                "name": "Mortal195",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 195
                            },
                            {
                                "name": "Mortal196",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 196
                            },
                            {
                                "name": "Mortal197",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 197
                            },
                            {
                                "name": "Mortal198",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 198
                            },
                            {
                                "name": "Mortal199",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 199
                            },
                            {
                                "name": "Mortal200",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 200
                            },
                            {
                                "name": "Mortal201",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 201
                            },
                            {
                                "name": "Mortal202",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 202
                            },
                            {
                                "name": "Mortal203",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 203
                            },
                            {
                                "name": "Mortal204",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 204
                            },
                            {
                                "name": "Mortal205",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 205
                            },
                            {
                                "name": "Mortal206",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 206
                            },
                            {
                                "name": "Mortal207",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 207
                            },
                            {
                                "name": "Mortal208",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 208
                            },
                            {
                                "name": "Mortal209",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 209
                            },
                            {
                                "name": "Mortal210",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 210
                            },
                            {
                                "name": "Mortal211",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 211
                            },
                            {
                                "name": "Mortal212",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 212
                            },
                            {
                                "name": "Mortal213",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 213
                            },
                            {
                                "name": "Mortal214",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 214
                            },
                            {
                                "name": "Mortal215",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 215
                            },
                            {
                                "name": "Mortal216",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 216
                            },
                            {
                                "name": "Mortal217",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 217
                            },
                            {
                                "name": "Mortal218",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 218
                            },
                            {
                                "name": "Mortal219",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 219
                            },
                            {
                                "name": "Mortal220",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 220
                            },
                            {
                                "name": "Mortal221",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 221
                            },
                            {
                                "name": "Mortal222",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 222
                            },
                            {
                                "name": "Mortal223",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 223
                            },
                            {
                                "name": "Mortal224",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 224
                            },
                            {
                                "name": "Mortal225",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 225
                            },
                            {
                                "name": "Mortal226",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 226
                            },
                            {
                                "name": "Mortal227",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 227
                            },
                            {
                                "name": "Mortal228",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 228
                            },
                            {
                                "name": "Mortal229",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 229
                            },
                            {
                                "name": "Mortal230",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 230
                            },
                            {
                                "name": "Mortal231",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 231
                            },
                            {
                                "name": "Mortal232",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 232
                            },
                            {
                                "name": "Mortal233",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 233
                            },
                            {
                                "name": "Mortal234",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 234
                            },
                            {
                                "name": "Mortal235",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 235
                            },
                            {
                                "name": "Mortal236",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 236
                            },
                            {
                                "name": "Mortal237",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 237
                            },
                            {
                                "name": "Mortal238",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 238
                            },
                            {
                                "name": "Mortal239",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 239
                            },
                            {
                                "name": "Mortal240",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 240
                            },
                            {
                                "name": "Mortal241",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 241
                            },
                            {
                                "name": "Mortal242",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 242
                            },
                            {
                                "name": "Mortal243",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 243
                            },
                            {
                                "name": "Mortal244",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 244
                            },
                            {
                                "name": "Mortal245",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 245
                            },
                            {
                                "name": "Mortal246",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 246
                            },
                            {
                                "name": "Mortal247",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 247
                            },
                            {
                                "name": "Mortal248",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 248
                            },
                            {
                                "name": "Mortal249",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 249
                            },
                            {
                                "name": "Mortal250",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 250
                            },
                            {
                                "name": "Mortal251",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 251
                            },
                            {
                                "name": "Mortal252",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 252
                            },
                            {
                                "name": "Mortal253",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 253
                            },
                            {
                                "name": "Mortal254",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 254
                            },
                            {
                                "name": "Mortal255",
                                "fields": [
                                    {
                                        "type": 2
                                    }
                                ],
                                "index": 255
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 369,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "check_nonce",
                    "CheckNonce"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 67,
                                "typeName": "T::Nonce"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 370,
            "type": {
                "path": [
                    "frame_system",
                    "extensions",
                    "check_weight",
                    "CheckWeight"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 371,
            "type": {
                "path": [
                    "pallet_transaction_payment",
                    "ChargeTransactionPayment"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 12,
                                "typeName": "BalanceOf<T>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 372,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "SubtensorSignedExtension"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 373
                    }
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 373,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "Runtime"
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 374,
            "type": {
                "path": [
                    "pallet_commitments",
                    "CommitmentsSignedExtension"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 373
                    }
                ],
                "def": {
                    "composite": {}
                }
            }
        },
        {
            "id": 375,
            "type": {
                "path": [
                    "frame_metadata_hash_extension",
                    "CheckMetadataHash"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "mode",
                                "type": 376,
                                "typeName": "Mode"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 376,
            "type": {
                "path": [
                    "frame_metadata_hash_extension",
                    "Mode"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Disabled",
                                "index": 0
                            },
                            {
                                "name": "Enabled",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 377,
            "type": {
                "path": [
                    "sp_runtime",
                    "generic",
                    "block",
                    "Block"
                ],
                "params": [
                    {
                        "name": "Header",
                        "type": 378
                    },
                    {
                        "name": "Extrinsic",
                        "type": 379
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "header",
                                "type": 378,
                                "typeName": "Header"
                            },
                            {
                                "name": "extrinsics",
                                "type": 380,
                                "typeName": "Vec<Extrinsic>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 378,
            "type": {
                "path": [
                    "sp_runtime",
                    "generic",
                    "header",
                    "Header"
                ],
                "params": [
                    {
                        "name": "Number",
                        "type": 4
                    },
                    {
                        "name": "Hash",
                        "type": null
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "parent_hash",
                                "type": 13,
                                "typeName": "Hash::Output"
                            },
                            {
                                "name": "number",
                                "type": 67,
                                "typeName": "Number"
                            },
                            {
                                "name": "state_root",
                                "type": 13,
                                "typeName": "Hash::Output"
                            },
                            {
                                "name": "extrinsics_root",
                                "type": 13,
                                "typeName": "Hash::Output"
                            },
                            {
                                "name": "digest",
                                "type": 15,
                                "typeName": "Digest"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 379,
            "type": {
                "path": [
                    "sp_runtime",
                    "generic",
                    "unchecked_extrinsic",
                    "UncheckedExtrinsic"
                ],
                "params": [
                    {
                        "name": "Address",
                        "type": 129
                    },
                    {
                        "name": "Call",
                        "type": 155
                    },
                    {
                        "name": "Signature",
                        "type": 361
                    },
                    {
                        "name": "Extra",
                        "type": 362
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 14
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 380,
            "type": {
                "def": {
                    "sequence": {
                        "type": 379
                    }
                }
            }
        },
        {
            "id": 381,
            "type": {
                "path": [
                    "sp_runtime",
                    "ExtrinsicInclusionMode"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "AllExtrinsics",
                                "index": 0
                            },
                            {
                                "name": "OnlyInherents",
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 382,
            "type": {
                "path": [
                    "sp_core",
                    "OpaqueMetadata"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<u8>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 383,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 382
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 382
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 384,
            "type": {
                "def": {
                    "sequence": {
                        "type": 4
                    }
                }
            }
        },
        {
            "id": 385,
            "type": {
                "path": [
                    "Result"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 40
                    },
                    {
                        "name": "E",
                        "type": 386
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Ok",
                                "fields": [
                                    {
                                        "type": 40
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Err",
                                "fields": [
                                    {
                                        "type": 386
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 386,
            "type": {
                "path": [
                    "sp_runtime",
                    "transaction_validity",
                    "TransactionValidityError"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Invalid",
                                "fields": [
                                    {
                                        "type": 387,
                                        "typeName": "InvalidTransaction"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Unknown",
                                "fields": [
                                    {
                                        "type": 388,
                                        "typeName": "UnknownTransaction"
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 387,
            "type": {
                "path": [
                    "sp_runtime",
                    "transaction_validity",
                    "InvalidTransaction"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Call",
                                "index": 0
                            },
                            {
                                "name": "Payment",
                                "index": 1
                            },
                            {
                                "name": "Future",
                                "index": 2
                            },
                            {
                                "name": "Stale",
                                "index": 3
                            },
                            {
                                "name": "BadProof",
                                "index": 4
                            },
                            {
                                "name": "AncientBirthBlock",
                                "index": 5
                            },
                            {
                                "name": "ExhaustsResources",
                                "index": 6
                            },
                            {
                                "name": "Custom",
                                "fields": [
                                    {
                                        "type": 2,
                                        "typeName": "u8"
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "BadMandatory",
                                "index": 8
                            },
                            {
                                "name": "MandatoryValidation",
                                "index": 9
                            },
                            {
                                "name": "BadSigner",
                                "index": 10
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 388,
            "type": {
                "path": [
                    "sp_runtime",
                    "transaction_validity",
                    "UnknownTransaction"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "CannotLookup",
                                "index": 0
                            },
                            {
                                "name": "NoUnsignedValidator",
                                "index": 1
                            },
                            {
                                "name": "Custom",
                                "fields": [
                                    {
                                        "type": 2,
                                        "typeName": "u8"
                                    }
                                ],
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 389,
            "type": {
                "path": [
                    "sp_inherents",
                    "InherentData"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "data",
                                "type": 390,
                                "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 390,
            "type": {
                "path": [
                    "BTreeMap"
                ],
                "params": [
                    {
                        "name": "K",
                        "type": 85
                    },
                    {
                        "name": "V",
                        "type": 14
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 391
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 391,
            "type": {
                "def": {
                    "sequence": {
                        "type": 392
                    }
                }
            }
        },
        {
            "id": 392,
            "type": {
                "def": {
                    "tuple": [
                        85,
                        14
                    ]
                }
            }
        },
        {
            "id": 393,
            "type": {
                "path": [
                    "sp_inherents",
                    "CheckInherentsResult"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "okay",
                                "type": 9,
                                "typeName": "bool"
                            },
                            {
                                "name": "fatal_error",
                                "type": 9,
                                "typeName": "bool"
                            },
                            {
                                "name": "errors",
                                "type": 389,
                                "typeName": "InherentData"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 394,
            "type": {
                "path": [
                    "Result"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 41
                    },
                    {
                        "name": "E",
                        "type": 68
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Ok",
                                "fields": [
                                    {
                                        "type": 41
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Err",
                                "fields": [
                                    {
                                        "type": 68
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 395,
            "type": {
                "path": [
                    "sp_runtime",
                    "transaction_validity",
                    "TransactionSource"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "InBlock",
                                "index": 0
                            },
                            {
                                "name": "Local",
                                "index": 1
                            },
                            {
                                "name": "External",
                                "index": 2
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 396,
            "type": {
                "path": [
                    "Result"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 397
                    },
                    {
                        "name": "E",
                        "type": 386
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Ok",
                                "fields": [
                                    {
                                        "type": 397
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Err",
                                "fields": [
                                    {
                                        "type": 386
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 397,
            "type": {
                "path": [
                    "sp_runtime",
                    "transaction_validity",
                    "ValidTransaction"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "priority",
                                "type": 6,
                                "typeName": "TransactionPriority"
                            },
                            {
                                "name": "requires",
                                "type": 73,
                                "typeName": "Vec<TransactionTag>"
                            },
                            {
                                "name": "provides",
                                "type": 73,
                                "typeName": "Vec<TransactionTag>"
                            },
                            {
                                "name": "longevity",
                                "type": 6,
                                "typeName": "TransactionLongevity"
                            },
                            {
                                "name": "propagate",
                                "type": 9,
                                "typeName": "bool"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 398,
            "type": {
                "path": [
                    "sp_consensus_slots",
                    "SlotDuration"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 6,
                                "typeName": "u64"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 399,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 14
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 14
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 400,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 401
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 401
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 401,
            "type": {
                "def": {
                    "sequence": {
                        "type": 402
                    }
                }
            }
        },
        {
            "id": 402,
            "type": {
                "def": {
                    "tuple": [
                        14,
                        403
                    ]
                }
            }
        },
        {
            "id": 403,
            "type": {
                "path": [
                    "sp_core",
                    "crypto",
                    "KeyTypeId"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "[u8; 4]"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 404,
            "type": {
                "path": [
                    "sp_consensus_grandpa",
                    "OpaqueKeyOwnershipProof"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<u8>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 405,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 41
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 41
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 406,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 404
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 404
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 407,
            "type": {
                "path": [
                    "pallet_transaction_payment",
                    "types",
                    "RuntimeDispatchInfo"
                ],
                "params": [
                    {
                        "name": "Balance",
                        "type": 6
                    },
                    {
                        "name": "Weight",
                        "type": 11
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "weight",
                                "type": 11,
                                "typeName": "Weight"
                            },
                            {
                                "name": "class",
                                "type": 24,
                                "typeName": "DispatchClass"
                            },
                            {
                                "name": "partial_fee",
                                "type": 6,
                                "typeName": "Balance"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 408,
            "type": {
                "path": [
                    "pallet_transaction_payment",
                    "types",
                    "FeeDetails"
                ],
                "params": [
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "inclusion_fee",
                                "type": 409,
                                "typeName": "Option<InclusionFee<Balance>>"
                            },
                            {
                                "name": "tip",
                                "type": 6,
                                "typeName": "Balance"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 409,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 410
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 410
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 410,
            "type": {
                "path": [
                    "pallet_transaction_payment",
                    "types",
                    "InclusionFee"
                ],
                "params": [
                    {
                        "name": "Balance",
                        "type": 6
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "base_fee",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "len_fee",
                                "type": 6,
                                "typeName": "Balance"
                            },
                            {
                                "name": "adjusted_weight_fee",
                                "type": 6,
                                "typeName": "Balance"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 411,
            "type": {
                "def": {
                    "tuple": [
                        412,
                        419
                    ]
                }
            }
        },
        {
            "id": 412,
            "type": {
                "def": {
                    "sequence": {
                        "type": 413
                    }
                }
            }
        },
        {
            "id": 413,
            "type": {
                "path": [
                    "frame_benchmarking",
                    "utils",
                    "BenchmarkList"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "pallet",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "instance",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "benchmarks",
                                "type": 414,
                                "typeName": "Vec<BenchmarkMetadata>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 414,
            "type": {
                "def": {
                    "sequence": {
                        "type": 415
                    }
                }
            }
        },
        {
            "id": 415,
            "type": {
                "path": [
                    "frame_benchmarking",
                    "utils",
                    "BenchmarkMetadata"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "name",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "components",
                                "type": 416,
                                "typeName": "Vec<(BenchmarkParameter, u32, u32)>"
                            },
                            {
                                "name": "pov_modes",
                                "type": 71,
                                "typeName": "Vec<(Vec<u8>, Vec<u8>)>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 416,
            "type": {
                "def": {
                    "sequence": {
                        "type": 417
                    }
                }
            }
        },
        {
            "id": 417,
            "type": {
                "def": {
                    "tuple": [
                        418,
                        4,
                        4
                    ]
                }
            }
        },
        {
            "id": 418,
            "type": {
                "path": [
                    "frame_benchmarking",
                    "utils",
                    "BenchmarkParameter"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "a",
                                "index": 0
                            },
                            {
                                "name": "b",
                                "index": 1
                            },
                            {
                                "name": "c",
                                "index": 2
                            },
                            {
                                "name": "d",
                                "index": 3
                            },
                            {
                                "name": "e",
                                "index": 4
                            },
                            {
                                "name": "f",
                                "index": 5
                            },
                            {
                                "name": "g",
                                "index": 6
                            },
                            {
                                "name": "h",
                                "index": 7
                            },
                            {
                                "name": "i",
                                "index": 8
                            },
                            {
                                "name": "j",
                                "index": 9
                            },
                            {
                                "name": "k",
                                "index": 10
                            },
                            {
                                "name": "l",
                                "index": 11
                            },
                            {
                                "name": "m",
                                "index": 12
                            },
                            {
                                "name": "n",
                                "index": 13
                            },
                            {
                                "name": "o",
                                "index": 14
                            },
                            {
                                "name": "p",
                                "index": 15
                            },
                            {
                                "name": "q",
                                "index": 16
                            },
                            {
                                "name": "r",
                                "index": 17
                            },
                            {
                                "name": "s",
                                "index": 18
                            },
                            {
                                "name": "t",
                                "index": 19
                            },
                            {
                                "name": "u",
                                "index": 20
                            },
                            {
                                "name": "v",
                                "index": 21
                            },
                            {
                                "name": "w",
                                "index": 22
                            },
                            {
                                "name": "x",
                                "index": 23
                            },
                            {
                                "name": "y",
                                "index": 24
                            },
                            {
                                "name": "z",
                                "index": 25
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 419,
            "type": {
                "def": {
                    "sequence": {
                        "type": 420
                    }
                }
            }
        },
        {
            "id": 420,
            "type": {
                "path": [
                    "frame_support",
                    "traits",
                    "storage",
                    "StorageInfo"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "pallet_name",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "storage_name",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "prefix",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "max_values",
                                "type": 96,
                                "typeName": "Option<u32>"
                            },
                            {
                                "name": "max_size",
                                "type": 96,
                                "typeName": "Option<u32>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 421,
            "type": {
                "path": [
                    "frame_benchmarking",
                    "utils",
                    "BenchmarkConfig"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "pallet",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "benchmark",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "selected_components",
                                "type": 422,
                                "typeName": "Vec<(BenchmarkParameter, u32)>"
                            },
                            {
                                "name": "verify",
                                "type": 9,
                                "typeName": "bool"
                            },
                            {
                                "name": "internal_repeats",
                                "type": 4,
                                "typeName": "u32"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 422,
            "type": {
                "def": {
                    "sequence": {
                        "type": 423
                    }
                }
            }
        },
        {
            "id": 423,
            "type": {
                "def": {
                    "tuple": [
                        418,
                        4
                    ]
                }
            }
        },
        {
            "id": 424,
            "type": {
                "path": [
                    "Result"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 425
                    },
                    {
                        "name": "E",
                        "type": 68
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "Ok",
                                "fields": [
                                    {
                                        "type": 425
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Err",
                                "fields": [
                                    {
                                        "type": 68
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 425,
            "type": {
                "def": {
                    "sequence": {
                        "type": 426
                    }
                }
            }
        },
        {
            "id": 426,
            "type": {
                "path": [
                    "frame_benchmarking",
                    "utils",
                    "BenchmarkBatch"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "pallet",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "instance",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "benchmark",
                                "type": 14,
                                "typeName": "Vec<u8>"
                            },
                            {
                                "name": "results",
                                "type": 427,
                                "typeName": "Vec<BenchmarkResult>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 427,
            "type": {
                "def": {
                    "sequence": {
                        "type": 428
                    }
                }
            }
        },
        {
            "id": 428,
            "type": {
                "path": [
                    "frame_benchmarking",
                    "utils",
                    "BenchmarkResult"
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "components",
                                "type": 422,
                                "typeName": "Vec<(BenchmarkParameter, u32)>"
                            },
                            {
                                "name": "extrinsic_time",
                                "type": 8,
                                "typeName": "u128"
                            },
                            {
                                "name": "storage_root_time",
                                "type": 8,
                                "typeName": "u128"
                            },
                            {
                                "name": "reads",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "repeat_reads",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "writes",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "repeat_writes",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "proof_size",
                                "type": 4,
                                "typeName": "u32"
                            },
                            {
                                "name": "keys",
                                "type": 429,
                                "typeName": "Vec<(Vec<u8>, u32, u32, bool)>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 429,
            "type": {
                "def": {
                    "sequence": {
                        "type": 430
                    }
                }
            }
        },
        {
            "id": 430,
            "type": {
                "def": {
                    "tuple": [
                        14,
                        4,
                        4,
                        9
                    ]
                }
            }
        },
        {
            "id": 431,
            "type": {
                "def": {
                    "sequence": {
                        "type": 432
                    }
                }
            }
        },
        {
            "id": 432,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "rpc_info",
                    "delegate_info",
                    "DelegateInfo"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "delegate_ss58",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "take",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "nominators",
                                "type": 434,
                                "typeName": "Vec<(AccountId, Compact<u64>)>"
                            },
                            {
                                "name": "owner_ss58",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "registrations",
                                "type": 436,
                                "typeName": "Vec<Compact<u16>>"
                            },
                            {
                                "name": "validator_permits",
                                "type": 436,
                                "typeName": "Vec<Compact<u16>>"
                            },
                            {
                                "name": "return_per_1000",
                                "type": 12,
                                "typeName": "Compact<u64>"
                            },
                            {
                                "name": "total_daily_return",
                                "type": 12,
                                "typeName": "Compact<u64>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 433,
            "type": {
                "def": {
                    "compact": {
                        "type": 39
                    }
                }
            }
        },
        {
            "id": 434,
            "type": {
                "def": {
                    "sequence": {
                        "type": 435
                    }
                }
            }
        },
        {
            "id": 435,
            "type": {
                "def": {
                    "tuple": [
                        0,
                        12
                    ]
                }
            }
        },
        {
            "id": 436,
            "type": {
                "def": {
                    "sequence": {
                        "type": 433
                    }
                }
            }
        },
        {
            "id": 437,
            "type": {
                "path": [
                    "Option"
                ],
                "params": [
                    {
                        "name": "T",
                        "type": 432
                    }
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "None",
                                "index": 0
                            },
                            {
                                "name": "Some",
                                "fields": [
                                    {
                                        "type": 432
                                    }
                                ],
                                "index": 1
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 438,
            "type": {
                "def": {
                    "sequence": {
                        "type": 439
                    }
                }
            }
        },
        {
            "id": 439,
            "type": {
                "def": {
                    "tuple": [
                        432,
                        12
                    ]
                }
            }
        },
        {
            "id": 440,
            "type": {
                "def": {
                    "sequence": {
                        "type": 441
                    }
                }
            }
        },
        {
            "id": 441,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "rpc_info",
                    "neuron_info",
                    "NeuronInfo"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "hotkey",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "coldkey",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "uid",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "netuid",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "active",
                                "type": 9,
                                "typeName": "bool"
                            },
                            {
                                "name": "axon_info",
                                "type": 148,
                                "typeName": "AxonInfo"
                            },
                            {
                                "name": "prometheus_info",
                                "type": 149,
                                "typeName": "PrometheusInfo"
                            },
                            {
                                "name": "stake",
                                "type": 434,
                                "typeName": "Vec<(AccountId, Compact<u64>)>"
                            },
                            {
                                "name": "rank",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "emission",
                                "type": 12,
                                "typeName": "Compact<u64>"
                            },
                            {
                                "name": "incentive",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "consensus",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "trust",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "validator_trust",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "dividends",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "last_update",
                                "type": 12,
                                "typeName": "Compact<u64>"
                            },
                            {
                                "name": "validator_permit",
                                "type": 9,
                                "typeName": "bool"
                            },
                            {
                                "name": "weights",
                                "type": 442,
                                "typeName": "Vec<(Compact<u16>, Compact<u16>)>"
                            },
                            {
                                "name": "bonds",
                                "type": 442,
                                "typeName": "Vec<(Compact<u16>, Compact<u16>)>"
                            },
                            {
                                "name": "pruning_score",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 442,
            "type": {
                "def": {
                    "sequence": {
                        "type": 443
                    }
                }
            }
        },
        {
            "id": 443,
            "type": {
                "def": {
                    "tuple": [
                        433,
                        433
                    ]
                }
            }
        },
        {
            "id": 444,
            "type": {
                "def": {
                    "sequence": {
                        "type": 445
                    }
                }
            }
        },
        {
            "id": 445,
            "type": {
                "path": [
                    "pallet_subtensor",
                    "rpc_info",
                    "neuron_info",
                    "NeuronInfoLite"
                ],
                "params": [
                    {
                        "name": "AccountId",
                        "type": 0
                    }
                ],
                "def": {
                    "composite": {
                        "fields": [
                            {
                                "name": "hotkey",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "coldkey",
                                "type": 0,
                                "typeName": "AccountId"
                            },
                            {
                                "name": "uid",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "netuid",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "active",
                                "type": 9,
                                "typeName": "bool"
                            },
                            {
                                "name": "axon_info",
                                "type": 148,
                                "typeName": "AxonInfo"
                            },
                            {
                                "name": "prometheus_info",
                                "type": 149,
                                "typeName": "PrometheusInfo"
                            },
                            {
                                "name": "stake",
                                "type": 434,
                                "typeName": "Vec<(AccountId, Compact<u64>)>"
                            },
                            {
                                "name": "rank",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "emission",
                                "type": 12,
                                "typeName": "Compact<u64>"
                            },
                            {
                                "name": "incentive",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "consensus",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "trust",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "validator_trust",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "dividends",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            },
                            {
                                "name": "last_update",
                                "type": 12,
                                "typeName": "Compact<u64>"
                            },
                            {
                                "name": "validator_permit",
                                "type": 9,
                                "typeName": "bool"
                            },
                            {
                                "name": "pruning_score",
                                "type": 433,
                                "typeName": "Compact<u16>"
                            }
                        ]
                    }
                }
            }
        },
        {
            "id": 446,
            "type": {
                "path": [
                    "node_subtensor_runtime",
                    "RuntimeError"
                ],
                "def": {
                    "variant": {
                        "variants": [
                            {
                                "name": "System",
                                "fields": [
                                    {
                                        "type": 86,
                                        "typeName": "frame_system::Error<Runtime>"
                                    }
                                ],
                                "index": 0
                            },
                            {
                                "name": "Grandpa",
                                "fields": [
                                    {
                                        "type": 109,
                                        "typeName": "pallet_grandpa::Error<Runtime>"
                                    }
                                ],
                                "index": 4
                            },
                            {
                                "name": "Balances",
                                "fields": [
                                    {
                                        "type": 134,
                                        "typeName": "pallet_balances::Error<Runtime>"
                                    }
                                ],
                                "index": 5
                            },
                            {
                                "name": "SubtensorModule",
                                "fields": [
                                    {
                                        "type": 311,
                                        "typeName": "pallet_subtensor::Error<Runtime>"
                                    }
                                ],
                                "index": 7
                            },
                            {
                                "name": "Triumvirate",
                                "fields": [
                                    {
                                        "type": 314,
                                        "typeName": "pallet_collective::Error<Runtime, pallet_collective::Instance1>"
                                    }
                                ],
                                "index": 8
                            },
                            {
                                "name": "TriumvirateMembers",
                                "fields": [
                                    {
                                        "type": 316,
                                        "typeName": "pallet_membership::Error<Runtime, pallet_membership::Instance1>"
                                    }
                                ],
                                "index": 9
                            },
                            {
                                "name": "SenateMembers",
                                "fields": [
                                    {
                                        "type": 318,
                                        "typeName": "pallet_membership::Error<Runtime, pallet_membership::Instance2>"
                                    }
                                ],
                                "index": 10
                            },
                            {
                                "name": "Utility",
                                "fields": [
                                    {
                                        "type": 319,
                                        "typeName": "pallet_utility::Error<Runtime>"
                                    }
                                ],
                                "index": 11
                            },
                            {
                                "name": "Sudo",
                                "fields": [
                                    {
                                        "type": 320,
                                        "typeName": "pallet_sudo::Error<Runtime>"
                                    }
                                ],
                                "index": 12
                            },
                            {
                                "name": "Multisig",
                                "fields": [
                                    {
                                        "type": 324,
                                        "typeName": "pallet_multisig::Error<Runtime>"
                                    }
                                ],
                                "index": 13
                            },
                            {
                                "name": "Preimage",
                                "fields": [
                                    {
                                        "type": 334,
                                        "typeName": "pallet_preimage::Error<Runtime>"
                                    }
                                ],
                                "index": 14
                            },
                            {
                                "name": "Scheduler",
                                "fields": [
                                    {
                                        "type": 343,
                                        "typeName": "pallet_scheduler::Error<Runtime>"
                                    }
                                ],
                                "index": 15
                            },
                            {
                                "name": "Proxy",
                                "fields": [
                                    {
                                        "type": 352,
                                        "typeName": "pallet_proxy::Error<Runtime>"
                                    }
                                ],
                                "index": 16
                            },
                            {
                                "name": "Registry",
                                "fields": [
                                    {
                                        "type": 354,
                                        "typeName": "pallet_registry::Error<Runtime>"
                                    }
                                ],
                                "index": 17
                            },
                            {
                                "name": "Commitments",
                                "fields": [
                                    {
                                        "type": 356,
                                        "typeName": "pallet_commitments::Error<Runtime>"
                                    }
                                ],
                                "index": 18
                            },
                            {
                                "name": "AdminUtils",
                                "fields": [
                                    {
                                        "type": 357,
                                        "typeName": "pallet_admin_utils::Error<Runtime>"
                                    }
                                ],
                                "index": 19
                            },
                            {
                                "name": "SafeMode",
                                "fields": [
                                    {
                                        "type": 360,
                                        "typeName": "pallet_safe_mode::Error<Runtime>"
                                    }
                                ],
                                "index": 20
                            }
                        ]
                    }
                }
            }
        }
    ]
}